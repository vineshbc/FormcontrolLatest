{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDScrollBar/index.vue?vue&type=style&index=0&id=889bef88&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDScrollBar/index.vue","mtime":1611419998000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnNsaWRlY29udGFpbmVyIHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMHB4IGF1dG8gMjBweDsNCn0NCg0KLnNsaWRlciB7DQogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsNCiAgY29udGVudDogJyc7DQogIC0tcmdiOjI1MCwyNTAsMjUwOw0KICAtLWFscGhhOiAwLjU7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYmEodmFyKC0tcmdiKSwgdmFyKC0tYWxwaGEpKTsNCiAgb3V0bGluZTogbm9uZTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQp9DQoNCi5zbGlkZXI6aG92ZXIgew0KICBvcGFjaXR5OiAxOw0KfQ0KDQouc2xpZGVyOjotd2Via2l0LXNsaWRlci10aHVtYiB7DQogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWNvbG9yKTsNCiAgYm9yZGVyOiAycHggc29saWQgZ3JheTsNCiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgYmxhY2s7DQogIGhlaWdodDogdmFyKC0taGVpZ2h0KTsNCiAgb3BhY2l0eTogdmFyKC0tb3BhY2l0eVZhbHVlKTsNCiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOw0KICBhcHBlYXJhbmNlOiBub25lOw0KICB3aWR0aDogMjVweDsNCiAgLS1hbHBoYTogMTsNCiAgY3Vyc29yOiBpbmhlcml0Ow0KICBwb2ludGVyLWV2ZW50czphdXRvOw0KICBmaWx0ZXI6IGludmVydCh2YXIoLS1pbnZlcnRWYWx1ZSkpOw0KfQ0KDQouc2xpZGVyOjotbW96LXJhbmdlLXRodW1iIHsNCiAgYmFja2dyb3VuZDogcmdiKDEzOSwgMTM4LCAxMzgpOw0KICBjdXJzb3I6IHBvaW50ZXI7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDScrollBar","sourcesContent":["<template>\r\n  <div\r\n  v-on=\"eventStoppers()\"\r\n  @click=\"scrollBarClick\"\r\n  :style=\"outerScrollBarDivObj\"\r\n  :title=\"properties.ControlTipText\"\r\n  @keydown.enter=\"setContentEditable($event, true)\"\r\n  @keydown.esc=\"setContentEditable($event, false)\"\r\n  :tabindex=\"0\"\r\n  @mousedown=\"controlEditMode\"\r\n  >\r\n    <div class=\"slidecontainer\" :style=\"cssVars\">\r\n      <button :style=\"scrollBarButtonStyleObj\" @click=\"!getDisableValue?properties.Min > properties.Max ? increaseTheValue() : decreaseTheValue():''\">\r\n        <FdSvgImage\r\n          key=\"leftArrow\"\r\n          name=\"left-arrow.svg\"\r\n          @hook:mounted=\"changeForeColor\"\r\n          class=\"svgLeftRightStyle\"\r\n        />\r\n      </button>\r\n      <input\r\n        :disabled=\"getDisableValue\"\r\n        type=\"range\"\r\n        :min=\"properties.Min > properties.Max ? properties.Max : properties.Min\"\r\n        :max=\"properties.Min > properties.Max ? properties.Min : properties.Max\"\r\n        :value=\"properties.Value\"\r\n        class=\"slider\"\r\n        :style=\"inputStyleObj\"\r\n        @input=\"updateValueProperty\"\r\n        orient=\"vertical\"\r\n      />\r\n      <button :style=\"scrollBarButtonStyleObj\" @click=\"!getDisableValue?properties.Min > properties.Max ? decreaseTheValue() : increaseTheValue():''\">\r\n        <FdSvgImage\r\n          key=\"rightArrow\"\r\n          name=\"right-arrow.svg\"\r\n          @hook:mounted=\"changeForeColor\"\r\n          class=\"svgLeftRightStyle\"\r\n        />\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Emit, Mixins, Watch } from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport FdSvgImage from '@/FormDesigner/components/atoms/FDSVGImage/index.vue'\r\nimport { controlProperties } from '@/FormDesigner/controls-properties'\r\n\r\n@Component({\r\n  name: 'FDScrollBar',\r\n  components: {\r\n    FdSvgImage\r\n  }\r\n})\r\nexport default class FDScrollBar extends Mixins(FdControlVue) {\r\n  $el: HTMLDivElement\r\n  isInvert: boolean = false\r\n  updateValueProperty (e: Event) {\r\n    if (e.target instanceof HTMLInputElement) {\r\n      const targetValue = parseInt(e.target!.value)\r\n      this.updateDataModel({ propertyName: 'Value', value: targetValue })\r\n    }\r\n  }\r\n\r\n  get cssVars () {\r\n    const controlProp = this.properties\r\n    return {\r\n      position: 'relative',\r\n      left: '0px',\r\n      top: (this.properties.Min! > this.properties.Max!) ? this.checkOtherOrientations() ? `${controlProp.Height!}px` : '0px' : '0px',\r\n      gridTemplateColumns: this.checkOtherOrientations() ? '20px ' + `${controlProp.Height! - 40}px` + ' 20px' : '',\r\n      '--bg-color': this.properties.BackColor,\r\n      '--height': this.checkOtherOrientations() ? `${this.properties.Width!}px` : `${this.properties.Height!}px`,\r\n      transform: (this.properties.Min! > this.properties.Max!) ? this.scrollReAlign() : this.checkOtherOrientations() ? 'rotate(90deg)' : '',\r\n      transformOrigin: (this.properties.Min! > this.properties.Max!) ? this.checkOtherOrientations() ? '0% 0%' : '' : '',\r\n      '--invertValue': this.isEditMode ? this.isInvert ? '1' : '0' : '0'\r\n    }\r\n  }\r\n\r\n  @Watch('isEditMode')\r\n  editModeValidate () {\r\n    let intervalVariable\r\n    if (this.isEditMode) {\r\n      intervalVariable = setInterval(() => {\r\n        this.isInvert = !this.isInvert\r\n      }, 1000)\r\n    } else {\r\n      clearInterval(intervalVariable)\r\n    }\r\n  }\r\n  scrollReAlign () {\r\n    if (this.checkOtherOrientations()) {\r\n      return 'rotate(-90deg)'\r\n    }\r\n    return 'ScaleX(-1)'\r\n  }\r\n  get getDisableValue () {\r\n    if (this.isRunMode || this.isEditMode) {\r\n      return this.properties.Enabled === false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  /**\r\n   * @description changes ForeColor property and then updates the getForeColor variable which is given to fill attribute of the svg element\r\n   * @function getForeColorValue\r\n   *\r\n   */\r\n  @Watch('properties.ForeColor', { deep: true })\r\n  changeForeColor () {\r\n    if (this.properties.Enabled) {\r\n      this.$el.querySelectorAll('.foreColor').forEach((e) => {\r\n        (e as SVGGElement).style.fill = this.getForeColorValue\r\n      })\r\n    } else {\r\n      this.$el.querySelectorAll('.foreColor').forEach((e) => {\r\n        (e as SVGGElement).style.fill = 'rgb(200,200,200)'\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Enabled', { deep: true })\r\n  enabledValidate () {\r\n    this.changeForeColor()\r\n  }\r\n  get outerScrollBarDivObj () {\r\n    const controlProp = this.properties\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'inline-block' : 'none'\r\n    } else {\r\n      display = 'inline-block'\r\n    }\r\n    return {\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      left: `${controlProp.Left}px`,\r\n      top: `${controlProp.Top}px`,\r\n      display: display,\r\n      overflow: 'hidden',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      backgroundColor: 'white'\r\n    }\r\n  }\r\n\r\n  get inputStyleObj () {\r\n    const controlProp = this.properties\r\n    let a = null\r\n    let temprgba\r\n    if (controlProp.BackColor!!.startsWith('rgb')) {\r\n      a = controlProp.BackColor!.split('rgba(')[1].split(',')\r\n    } else {\r\n      temprgba = this.hexToRgbA(controlProp.BackColor!)\r\n    }\r\n\r\n    return {\r\n      width: this.checkOtherOrientations() ? `${controlProp.Height! - 40}px` : `${controlProp.Width! - 40}px`,\r\n      height: this.checkOtherOrientations() ? `${controlProp.Width!}px` : `${controlProp.Height!}px`,\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      backgroundColor: controlProp.BackColor!.startsWith('rgb') ? `rgba(${a![0]},${a![1]},${a![2]},0.5)` : temprgba,\r\n      margin: '0px'\r\n    }\r\n  }\r\n  hexToRgbA (hex: string) {\r\n    let c: any\r\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\r\n      c = hex.substring(1).split('')\r\n      if (c.length === 3) {\r\n        c = [c[0], c[0], c[1], c[1], c[2], c[2]]\r\n      }\r\n      c = '0x' + c.join('')\r\n      return 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',0.5)'\r\n    }\r\n  }\r\n  get scrollBarButtonStyleObj () {\r\n    const controlProp = this.properties\r\n    return {\r\n      backgroundColor: this.cssVars['--bg-color'],\r\n      overflow: 'hidden',\r\n      outline: 'none',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      border: !controlProp.Enabled ? '1px solid gray' : ''\r\n    }\r\n  }\r\n  mounted () {\r\n    this.$el.focus()\r\n  }\r\n\r\n  /**\r\n   * @description checkOtherOrientations returns string value from\r\n   * controlProperties.controlsOrientationProp\r\n   * @function checkOtherOrientations\r\n   * @returns boolean value\r\n   * @override\r\n   */\r\n  checkOtherOrientations (): boolean {\r\n    return controlProperties.controlsOrientationProp(this.data)\r\n  }\r\n  eventStoppers () {\r\n    const eventStop = (event: Event) => event.stopPropagation()\r\n    return this.isEditMode === false ? null : {\r\n      keydown: eventStop\r\n    }\r\n  }\r\n  scrollBarClick (event: MouseEvent) {\r\n    if (this.toolBoxSelectControl === 'Select') {\r\n      event.stopPropagation()\r\n      this.selectedItem(event)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.slidecontainer {\r\n  display: grid;\r\n  grid-template-columns: 20px auto 20px;\r\n}\r\n\r\n.slider {\r\n  -webkit-appearance: none;\r\n  content: '';\r\n  --rgb:250,250,250;\r\n  --alpha: 0.5;\r\n  background-color: rgba(var(--rgb), var(--alpha));\r\n  outline: none;\r\n  overflow: hidden;\r\n  pointer-events: none;\r\n}\r\n\r\n.slider:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.slider::-webkit-slider-thumb {\r\n  background-color: var(--bg-color);\r\n  border: 2px solid gray;\r\n  border-right: 2px solid black;\r\n  height: var(--height);\r\n  opacity: var(--opacityValue);\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  width: 25px;\r\n  --alpha: 1;\r\n  cursor: inherit;\r\n  pointer-events:auto;\r\n  filter: invert(var(--invertValue));\r\n}\r\n\r\n.slider::-moz-range-thumb {\r\n  background: rgb(139, 138, 138);\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"]}]}