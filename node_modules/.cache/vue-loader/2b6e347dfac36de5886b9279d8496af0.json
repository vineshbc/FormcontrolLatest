{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDGroupControl/index.vue?vue&type=style&index=0&id=159dd23f&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDGroupControl/index.vue","mtime":1612247696000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5tb3ZlLWJvcmRlciB7DQogIHotaW5kZXg6IDk5OTk7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYm9yZGVyOiAxcHggcmdiKDU5LCA1OCwgNTgpIGRhc2hlZDsNCn0NCi5tLXRvcC1iLA0KLm0tYm90dG9tLWIgew0KICB3aWR0aDogMTAwJTsNCn0NCi5tLWxlZnQtYiwNCi5tLXJpZ2h0LWIgew0KICBoZWlnaHQ6IDEwMCU7DQp9DQouaGFuZGxlIHsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB3aWR0aDogNnB4Ow0KICBoZWlnaHQ6IDZweDsNCiAgYmFja2dyb3VuZDogd2hpdGU7DQogIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7DQp9DQouaGFuZGxlQWN0aXZhdGUgew0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHdpZHRoOiA2cHg7DQogIGhlaWdodDogNnB4Ow0KDQogIGJhY2tncm91bmQ6IGJsYWNrOw0KICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsNCn0NCi5oYW5kbGUtdGwgew0KICB0b3A6IC01cHg7DQogIGxlZnQ6IC01cHg7DQogIGN1cnNvcjogbnctcmVzaXplOw0KfQ0KLmhhbmRsZS10bSB7DQogIHRvcDogLTVweDsNCiAgbGVmdDogNTAlOw0KICBtYXJnaW4tbGVmdDogLTVweDsNCiAgY3Vyc29yOiBuLXJlc2l6ZTsNCn0NCi5oYW5kbGUtdHIgew0KICB0b3A6IC01cHg7DQogIHJpZ2h0OiAtNXB4Ow0KICBjdXJzb3I6IG5lLXJlc2l6ZTsNCn0NCi5oYW5kbGUtbWwgew0KICB0b3A6IDUwJTsNCiAgbWFyZ2luLXRvcDogLTVweDsNCiAgbGVmdDogLTVweDsNCiAgY3Vyc29yOiB3LXJlc2l6ZTsNCn0NCi5oYW5kbGUtbXIgew0KICB0b3A6IDUwJTsNCiAgbWFyZ2luLXRvcDogLTVweDsNCiAgcmlnaHQ6IC01cHg7DQogIGN1cnNvcjogZS1yZXNpemU7DQp9DQouaGFuZGxlLWJsIHsNCiAgYm90dG9tOiAtNXB4Ow0KICBsZWZ0OiAtNXB4Ow0KICBjdXJzb3I6IHN3LXJlc2l6ZTsNCn0NCi5oYW5kbGUtYm0gew0KICBib3R0b206IC01cHg7DQogIGxlZnQ6IDUwJTsNCiAgbWFyZ2luLWxlZnQ6IC01cHg7DQogIGN1cnNvcjogcy1yZXNpemU7DQp9DQouaGFuZGxlLWJyIHsNCiAgYm90dG9tOiAtNXB4Ow0KICByaWdodDogLTVweDsNCiAgY3Vyc29yOiBzZS1yZXNpemU7DQp9DQoubWFpbkRpdiB7DQogIGN1cnNvcjogbW92ZTsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICAtLWJvcmRlci13aWR0aDogNTsNCiAgLS1zdHJpcGUtZGlzdGFuY2U6IDJweDsNCiAgYm9yZGVyOiBjYWxjKHZhcigtLWJvcmRlci13aWR0aCkgKiAxcHgpIHNvbGlkIHRyYW5zcGFyZW50Ow0KICBib3JkZXItaW1hZ2U6IHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoDQogICAgICAtMTEwZGVnLA0KICAgICAgYmxhY2ssDQogICAgICB0cmFuc3BhcmVudCAxcHgsDQogICAgICB0cmFuc3BhcmVudCB2YXIoLS1zdHJpcGUtZGlzdGFuY2UpLA0KICAgICAgYmxhY2sgY2FsYyh2YXIoLS1zdHJpcGUtZGlzdGFuY2UpICsgMC4ycHgpDQogICAgKQ0KICAgIHZhcigtLWJvcmRlci13aWR0aCk7DQogIHBhZGRpbmc6IDVweDsNCiAgbWFyZ2luLXRvcDogLTVweDsNCiAgbWFyZ2luLWxlZnQ6IC01cHg7DQogIGRpc3BsYXk6IG5vbmU7DQp9DQoubWFpbkVkaXREaXYgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIGN1cnNvcjogbW92ZTsNCiAgLS1ib3JkZXItd2lkdGg6IDU7DQogIC0tc3RyaXBlLWRpc3RhbmNlOiAycHg7DQogIGJvcmRlcjogY2FsYyh2YXIoLS1ib3JkZXItd2lkdGgpICogMXB4KSBzb2xpZCB0cmFuc3BhcmVudDsNCiAgYm9yZGVyLWltYWdlOiByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KA0KICAgICAgLTQ1ZGVnLA0KICAgICAgYmxhY2ssDQogICAgICB0cmFuc3BhcmVudCAycHgsDQogICAgICB0cmFuc3BhcmVudCB2YXIoLS1zdHJpcGUtZGlzdGFuY2UpLA0KICAgICAgYmxhY2sgY2FsYyh2YXIoLS1zdHJpcGUtZGlzdGFuY2UpICsgMC4ycHgpDQogICAgKQ0KICAgIHZhcigtLWJvcmRlci13aWR0aCk7DQogIHBhZGRpbmc6IDVweDsNCiAgbWFyZ2luLXRvcDogLTVweDsNCiAgbWFyZ2luLWxlZnQ6IC01cHg7DQogIGRpc3BsYXk6IG5vbmU7DQp9DQouaW5uZXJHcm91cFN0eWxlIHsNCiAgICBtYXJnaW4tdG9wOiAtNXB4Ow0KICAgIG1hcmdpbi1sZWZ0OiAtNXB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7DQogICAgcGFkZGluZy1ib3R0b206IDEwcHg7DQp9DQouaGFuZGxlIHsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB3aWR0aDogNnB4Ow0KICBoZWlnaHQ6IDZweDsNCiAgYmFja2dyb3VuZDogd2hpdGU7DQogIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7DQp9DQouaGFuZGxlLXRsIHsNCiAgdG9wOiAtNXB4Ow0KICBsZWZ0OiAtNXB4Ow0KICBjdXJzb3I6IG53LXJlc2l6ZTsNCn0NCi5oYW5kbGUtdG0gew0KICB0b3A6IC01cHg7DQogIGxlZnQ6IDUwJTsNCiAgbWFyZ2luLWxlZnQ6IC01cHg7DQogIGN1cnNvcjogbi1yZXNpemU7DQp9DQouaGFuZGxlLXRyIHsNCiAgdG9wOiAtNXB4Ow0KICByaWdodDogLTVweDsNCiAgY3Vyc29yOiBuZS1yZXNpemU7DQp9DQouaGFuZGxlLW1sIHsNCiAgdG9wOiA1MCU7DQogIG1hcmdpbi10b3A6IC01cHg7DQogIGxlZnQ6IC01cHg7DQogIGN1cnNvcjogdy1yZXNpemU7DQp9DQouaGFuZGxlLW1yIHsNCiAgdG9wOiA1MCU7DQogIG1hcmdpbi10b3A6IC01cHg7DQogIHJpZ2h0OiAtNXB4Ow0KICBjdXJzb3I6IGUtcmVzaXplOw0KfQ0KLmhhbmRsZS1ibCB7DQogIGJvdHRvbTogLTVweDsNCiAgbGVmdDogLTVweDsNCiAgY3Vyc29yOiBzdy1yZXNpemU7DQp9DQouaGFuZGxlLWJtIHsNCiAgYm90dG9tOiAtNXB4Ow0KICBsZWZ0OiA1MCU7DQogIG1hcmdpbi1sZWZ0OiAtNXB4Ow0KICBjdXJzb3I6IHMtcmVzaXplOw0KfQ0KLmhhbmRsZS1iciB7DQogIGJvdHRvbTogLTVweDsNCiAgcmlnaHQ6IC01cHg7DQogIGN1cnNvcjogc2UtcmVzaXplOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsgwfile":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDGroupControl","sourcesContent":["<template>\r\n  <div v-if=\"groupedControls[userFormId].groupArray.length!==0\">\r\n   <div\r\n      v-for=\"(groupName, index) in groupedControls[userFormId].groupArray\"\r\n      :class=\"getGroupEditStyle(groupName)\"\r\n      :key=\"groupName.concat(index)\"\r\n      :style=\"getGroupStyle(groupName)\"\r\n      :id=\"groupName\"\r\n      @mousedown.stop=\"handleMouseDown($event,'drag')\"\r\n      @contextmenu.self.stop=\"openMenu($event,'control')\"\r\n    >\r\n    <div\r\n    :style=\"getGroupStyle(groupName)\"\r\n    class=\"innerGroupStyle\"\r\n    :id=\"groupName\"\r\n    @contextmenu=\"openMenu($event,'container')\"\r\n    >\r\n    <div class=\"handle handle-tl\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'tl')\"></div>\r\n      <div class=\"handle handle-tr\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'tr')\"></div>\r\n      <div class=\"handle handle-tm\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'tm')\"></div>\r\n      <div class=\"handle handle-ml\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'ml')\"></div>\r\n      <div class=\"handle handle-mr\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'mr')\"></div>\r\n      <div class=\"handle handle-bl\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'bl')\"></div>\r\n      <div class=\"handle handle-br\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'br')\"></div>\r\n      <div class=\"handle handle-bm\" :style=\"handlerStyle(groupName)\" @mousedown.stop=\"handleMouseDown($event,'bm')\"></div>\r\n    </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue, Prop, Watch, Ref } from 'vue-property-decorator'\r\nimport {\r\n  IselectControl,\r\n  IupdateControl,\r\n  IupdateGroup\r\n} from '@/storeModules/fd/actions'\r\nimport { State, Action } from 'vuex-class'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\r\n@Component({\r\n  name: 'GroupControl',\r\n  components: {}\r\n})\r\nexport default class GroupControl extends FDCommonMethod {\r\n  @State((state) => state.fd.groupedControls) groupedControls!: groupedControls;\r\n  @State((state) => state.fd.selectedControls)\r\n  selectedControls!: fdState['selectedControls'];\r\n  @State((state) => state.fd.userformData) userformData!: userformData;\r\n\r\n  @Prop({ required: true, type: Array }) public currentSelectedGroup!: string[];\r\n  @Prop({ required: true, type: String }) public userFormId!: string;\r\n  @Prop({ required: true, type: String }) public containerId!: string;\r\n  @Prop() controlRef: any;\r\n\r\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void;\r\n  @Action('fd/updateGroup') updateGroup!: (payload: IupdateGroup) => void;\r\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void;\r\n\r\n  divStyleArray: Array<IGroupStyle> = [];\r\n  resizeDiv: string = '';\r\n\r\n  positions: IMousePosition = {\r\n    clientX: 0,\r\n    clientY: 0,\r\n    movementX: 0,\r\n    movementY: 0,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  };\r\n  groupName: string = '';\r\n  count: number = 0;\r\n  currentMouseDownEvent: CustomMouseEvent | null = null;\r\n  control: string = ''\r\n  container: string = ''\r\n  createGroup (groupName: string) {\r\n    this.groupStyle(groupName)\r\n  }\r\n  value = 'different'\r\n  isMainSelect = false;\r\n  isMove: boolean = false\r\n  tempEvent = {}\r\n\r\n  created () {\r\n    EventBus.$on('getGroupMoveValue', this.getGroupMoveValue)\r\n    EventBus.$on('startGroupMoveControl', this.startGroupMoveControl)\r\n    EventBus.$on('moveGroupControl', this.moveGroupControl)\r\n    EventBus.$on('endGroupMoveControl', this.endGroupMoveControl)\r\n    EventBus.$on('getClientValue', this.getClientValue)\r\n    EventBus.$on('updasteGroupSize', this.updasteGroupSize)\r\n    EventBus.$on('getGroupSize', this.getGroupSize)\r\n    EventBus.$on('groupElementDrag', this.elementDrag)\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('getGroupMoveValue', this.getGroupMoveValue)\r\n    EventBus.$off('startGroupMoveControl', this.startGroupMoveControl)\r\n    EventBus.$off('moveGroupControl', this.moveGroupControl)\r\n    EventBus.$off('endGroupMoveControl', this.endGroupMoveControl)\r\n    EventBus.$off('getClientValue', this.getClientValue)\r\n    EventBus.$off('updasteGroupSize', this.updasteGroupSize)\r\n    EventBus.$off('getGroupSize', this.getGroupSize)\r\n    EventBus.$off('groupElementDrag', this.elementDrag)\r\n  }\r\n  convertToGridSize (val: number) {\r\n    const gridSize = 9\r\n    return Math.round(val / gridSize) * gridSize\r\n  }\r\n  updasteGroupSize (propName: keyof controlProperties, propertyValue: number, groupIndex: number) {\r\n    if (this.selectedControls[this.userFormId].container[0] === this.containerId) {\r\n      if (propName === 'GroupID') {\r\n        this.divStyleArray[groupIndex].left = `${this.convertToGridSize(parseInt(this.divStyleArray[groupIndex].left!))}px`\r\n        this.divStyleArray[groupIndex].height = `${this.convertToGridSize(parseInt(this.divStyleArray[groupIndex].height!))}px`\r\n        this.divStyleArray[groupIndex].top = `${this.convertToGridSize(parseInt(this.divStyleArray[groupIndex].top!))}px`\r\n        this.divStyleArray[groupIndex].width = `${this.convertToGridSize(parseInt(this.divStyleArray[groupIndex].width!))}px`\r\n      } else {\r\n        this.groupStyle(this.divStyleArray[groupIndex].groupName!)\r\n        this.updatedValue(groupIndex, propName, propertyValue)\r\n        this.groupStyle(this.divStyleArray[groupIndex].groupName!)\r\n      }\r\n    }\r\n  }\r\n  updatedValue (groupIndex: number, propName: keyof controlProperties, diff: number) {\r\n    for (const j in this.userformData[this.userFormId][this.containerId].controls) {\r\n      const index = this.userformData[this.userFormId][this.containerId].controls[j]\r\n      const controlProp = this.userformData[this.userFormId][index].properties\r\n      const divStyle = this.divStyleArray[groupIndex]\r\n      if (controlProp.GroupID && controlProp.GroupID === divStyle.groupName) {\r\n        if (propName === 'Left') {\r\n          let left: number = diff + this.leftArray[j]\r\n          this.updateControlAction(propName, left, index)\r\n        } else if (propName === 'Top') {\r\n          let top: number = diff + this.topArray[j]\r\n          this.updateControlAction(propName, top, index)\r\n        } else if (propName === 'Width') {\r\n          let left = (diff * this.leftArray[j]) / parseInt(divStyle.width!) + parseInt(divStyle.left!)\r\n          let width = diff * this.percwidthArray[j]\r\n          this.updateControlAction('Left', left, index)\r\n          this.updateControlAction(propName, width, index)\r\n        } else if (propName === 'Height') {\r\n          let top = (diff * this.topArray[j]) / parseInt(divStyle.height!) + parseInt(divStyle.top!)\r\n          let height = diff * this.percheightArray[j]\r\n          this.updateControlAction('Top', top, index)\r\n          this.updateControlAction(propName, height, index)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getClientValue (value: string, containerX: number, containerY: number, event: MouseEvent, container: string, previousEvent: MouseEvent) {\r\n    this.value = value\r\n    this.container = container\r\n    if (container === this.containerId) {\r\n      this.positions.clientX = previousEvent.clientX\r\n      this.positions.clientY = previousEvent.clientY\r\n      this.positions.offsetX = previousEvent.offsetX\r\n      this.positions.offsetY = previousEvent.offsetY\r\n      this.elementMouseDrag(event, containerX, containerY, previousEvent)\r\n    }\r\n  }\r\n  getGroupMoveValue (callBack: Function) {\r\n    callBack(\r\n      this.positions.offsetX,\r\n      this.positions.offsetY,\r\n      this.control,\r\n      this.tempEvent\r\n    )\r\n  }\r\n  getGroupSize (callBack: Function) {\r\n    if (this.containerId === this.selectedControls[this.userFormId].container[0]) {\r\n      callBack(this.divStyleArray)\r\n    }\r\n  }\r\n  endGroupMoveControl () {\r\n    // if (this.getIsMoveTarget) {\r\n    this.positions.movementX = 0\r\n    this.positions.movementY = 0\r\n    this.isMove = false\r\n    // }\r\n  }\r\n  topArray: number[] = [];\r\n  leftArray: number[] = [];\r\n\r\n  percwidthArray: number[] = [];\r\n  percheightArray: number[] = [];\r\n\r\n  initialArray: Array<IGroupStyle> = [];\r\n\r\n  get getIsMoveTarget () {\r\n    const isGroupPrsent = this.selectedControls[this.userFormId].selected.findIndex((val: string) => {\r\n      val.startsWith('group')\r\n    })\r\n    return isGroupPrsent === -1\r\n  }\r\n  startGroupMoveControl (event: MouseEvent) {\r\n    if (this.getIsMoveTarget) {\r\n      this.positions.clientX = event.clientX\r\n      this.positions.clientY = event.clientY\r\n    }\r\n  }\r\n\r\n  moveGroupControl (event: MouseEvent) {\r\n    if (this.getIsMoveTarget) {\r\n      //   this.moveBorder(event)\r\n      if (event.movementX !== 0 && event.movementY !== 0) {\r\n        EventBus.$emit('moveControl', event, 'groupControlDrag')\r\n        EventBus.$emit('groupDrag', 'groupdrag')\r\n        this.isMove = true\r\n        // this.updateIsMove(true)\r\n      }\r\n    }\r\n  }\r\n\r\n  updateControlAction (\r\n    propertyName: keyof controlProperties,\r\n    propertyValue: number,\r\n    controlId: string\r\n  ) {\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: controlId,\r\n      propertyName: propertyName,\r\n      value: propertyValue\r\n    })\r\n  }\r\n  handlerStyle (groupName: string) {\r\n    const isGroup: string = this.selectedControls[this.userFormId].selected[0]\r\n    return {\r\n      backgroundColor: isGroup === groupName ? 'white' : 'black',\r\n      borderColor: isGroup === groupName ? 'black' : 'white'\r\n    }\r\n  }\r\n  groupStyle (groupName: string) {\r\n    this.count += 1\r\n    let index = this.divStyleArray.findIndex(\r\n      (p: IGroupStyle) => p.groupName === groupName\r\n    )\r\n    if (index === -1) {\r\n      this.divStyleArray.push({\r\n        left: '0px',\r\n        top: '0px',\r\n        width: '0px',\r\n        height: '0px',\r\n        display: 'none',\r\n        groupName: groupName\r\n      })\r\n    }\r\n    const styleLeft: number[] = []\r\n    const styleWidth: number[] = []\r\n    const styleTop: number[] = []\r\n    const styleHeight: number[] = []\r\n    for (const control of this.userformData[this.userFormId][this.containerId]\r\n      .controls) {\r\n      if (\r\n        this.userformData[this.userFormId][control].properties.GroupID ===\r\n        groupName\r\n      ) {\r\n        const controlprop = this.userformData[this.userFormId][control]\r\n          .properties\r\n        styleLeft.push(controlprop.Left!)\r\n        styleTop.push(controlprop.Top!)\r\n        styleWidth.push(controlprop.Width! + controlprop.Left!)\r\n        styleHeight.push(controlprop.Height! + controlprop.Top!)\r\n      }\r\n    }\r\n    index = this.divStyleArray.findIndex(\r\n      (p: IGroupStyle) => p.groupName === groupName\r\n    )\r\n    this.divStyleArray[index].left = `${Math.min(...styleLeft)}px`\r\n    this.divStyleArray[index].top = `${Math.min(...styleTop)}px`\r\n    this.divStyleArray[index].width = `${\r\n      Math.max(...styleWidth) - Math.min(...styleLeft)\r\n    }px`\r\n    this.divStyleArray[index].height = `${\r\n      Math.max(...styleHeight) - Math.min(...styleTop)\r\n    }px`\r\n\r\n    this.topArray = []\r\n    this.leftArray = []\r\n\r\n    this.percwidthArray = []\r\n    this.percheightArray = []\r\n\r\n    for (const control of this.userformData[this.userFormId][this.containerId].controls) {\r\n      const controlProp = this.userformData[this.userFormId][control].properties\r\n      if (this.userformData[this.userFormId][control].type !== 'Useform') {\r\n        if (controlProp.GroupID !== '') {\r\n          for (const divStyle of this.divStyleArray) {\r\n            if (controlProp.GroupID === divStyle.groupName) {\r\n              this.topArray.push(controlProp.Top! - parseInt(divStyle.top!))\r\n\r\n              this.leftArray.push(controlProp.Left! - parseInt(divStyle.left!))\r\n\r\n              this.percheightArray.push(\r\n              controlProp.Height! / parseInt(divStyle.height!)\r\n              )\r\n\r\n              this.percwidthArray.push(\r\n              controlProp.Width! / parseInt(divStyle.width!)\r\n              )\r\n            }\r\n          }\r\n        } else {\r\n          this.topArray.push(controlProp.Top!)\r\n\r\n          this.leftArray.push(controlProp.Left!)\r\n\r\n          this.percheightArray.push(controlProp.Height!)\r\n\r\n          this.percwidthArray.push(controlProp.Width!)\r\n        }\r\n      }\r\n    }\r\n    this.initialArray = []\r\n    for (let k = 0; k < this.divStyleArray.length; k++) {\r\n      this.initialArray.push(Object.assign({}, this.divStyleArray[k]))\r\n    }\r\n  }\r\n\r\n  deActGroupControl () {\r\n    const selControl = this.selectedControls[this.userFormId].selected\r\n    if (\r\n      this.currentSelectedGroup.length === 1 &&\r\n      selControl.length === 1 &&\r\n      !selControl[0].startsWith('group')\r\n    ) {\r\n      const controlId = this.selectedControls[this.userFormId].selected[0]\r\n      if (\r\n        this.currentSelectedGroup[0] ===\r\n        this.userformData[this.userFormId][controlId].properties.GroupID!\r\n      ) {\r\n        this.selectControl({\r\n          userFormId: this.userFormId,\r\n          select: {\r\n            container: this.getContainerList(this.currentSelectedGroup[0]),\r\n            selected: [this.currentSelectedGroup[0]]\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown (event: CustomMouseEvent, handler: string) {\r\n    this.tempEvent = event\r\n    EventBus.$emit('groupDrag', 'NotDrag')\r\n    this.isMove = false\r\n    this.deActGroupControl()\r\n    this.resizeDiv = handler\r\n    this.positions.clientX = event.clientX\r\n    this.positions.clientY = event.clientY\r\n    this.currentMouseDownEvent = event\r\n    if (handler !== 'drag') {\r\n      EventBus.$emit('startGroupMoveControl', event)\r\n      EventBus.$emit('startResizeGroupControl', event, handler)\r\n      document.onmousemove = (event: MouseEvent) => {\r\n        EventBus.$emit('resizeGroupControl', event, this.positions)\r\n      }\r\n    } else {\r\n      this.positions.offsetX = event.offsetX\r\n      this.positions.offsetY = event.offsetY\r\n      this.isMainSelect = true\r\n      EventBus.$emit('startGroupMoveControl', event)\r\n      EventBus.$emit('startResizeGroupControl', event, handler)\r\n      document.onmousemove = (event: MouseEvent) => {\r\n        EventBus.$emit('moveGroupControl', event)\r\n      }\r\n    }\r\n    document.onmouseup = (event) => {\r\n      this.closeDragElement(event, handler)\r\n    }\r\n  }\r\n  elementMouseDrag (event: MouseEvent, containerX: number, containerY: number, previousEvent: MouseEvent): void {\r\n    event.preventDefault()\r\n    if (this.container === this.containerId) {\r\n      const containerProp = this.userformData[this.userFormId][this.containerId].properties\r\n      for (const i of this.selectedControls[this.userFormId].selected) {\r\n        if (i.startsWith('group')) {\r\n          const index = this.divStyleArray.findIndex(val => val.groupName === i)\r\n          this.divStyleArray[index].display = 'block'\r\n          this.groupStyle(this.divStyleArray[index].groupName!)\r\n        }\r\n      }\r\n      this.resizeDiv = 'drag'\r\n      let targetLeft = -1\r\n      let targetTop = -1\r\n      const main = this.selectedControls[this.userFormId].selected[0]\r\n      const isGroup = main.startsWith('group') ? this.divStyleArray.findIndex(val => val.groupName === main) : -1\r\n      if (isGroup === -1) {\r\n        const targetData = this.userformData[this.userFormId][main].properties\r\n        targetLeft = targetData.Left!\r\n        targetTop = targetData.Top!\r\n      } else {\r\n        const targetData = this.divStyleArray[isGroup]\r\n        targetLeft = parseInt(targetData.left!)\r\n        targetTop = parseInt(targetData.top!)\r\n      }\r\n      this.positions.movementX = (targetLeft - (containerX - this.positions.offsetX!))\r\n      this.positions.movementY = (targetTop - (containerY - this.positions.offsetY!))\r\n      const scale: number = 1\r\n      const grid: Array<number> = [10, 10]\r\n      const x: number =\r\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\r\n      const y: number =\r\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\r\n\r\n      if (this.currentMouseDownEvent && (x !== 0 || y !== 0)) {\r\n        this.currentMouseDownEvent.customCallBack &&\r\n        this.currentMouseDownEvent.customCallBack()\r\n      }\r\n      let dragResizeControl: IGroupStyle = {}\r\n      let dragResizeControl1: controlProperties = { ID: '' }\r\n\r\n      for (let i = 0; i < this.divStyleArray.length; i++) {\r\n        this.groupName = this.divStyleArray[i].groupName!\r\n        dragResizeControl = this.divStyleArray[i]\r\n        if (dragResizeControl.display === 'block') {\r\n          let top: number = -1\r\n          let left: number = -1\r\n          let decHeight: number = -1\r\n          top = parseInt(dragResizeControl.top!) - y\r\n          left = parseInt(dragResizeControl.left!) - x\r\n\r\n          if (this.resizeDiv === 'drag') {\r\n            dragResizeControl.top = `${top + containerProp.ScrollTop!}px`\r\n            dragResizeControl.left = `${left + containerProp.ScrollLeft!}px`\r\n          }\r\n          for (const j in this.userformData[this.userFormId][this.containerId]\r\n            .controls) {\r\n            const index = this.userformData[this.userFormId][this.containerId]\r\n              .controls[j]\r\n            const controlProp = this.userformData[this.userFormId][index]\r\n              .properties\r\n            if (\r\n              controlProp.GroupID === this.divStyleArray[i].groupName &&\r\n            this.divStyleArray[i].display === 'block'\r\n            ) {\r\n              dragResizeControl1 = controlProp\r\n              if (this.resizeDiv === 'drag') {\r\n                top = dragResizeControl1.Top! - y\r\n                left = dragResizeControl1.Left! - x\r\n                this.updateControlAction('Top', top + containerProp.ScrollTop!, index)\r\n                this.updateControlAction('Left', left + containerProp.ScrollLeft!, index)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      for (let k of this.selectedControls[this.userFormId].selected) {\r\n        if (!k.startsWith('ID_USERFORM') && !k.startsWith('group')) {\r\n          let dragResizeReffer: IdragResizeRefStyle = {}\r\n          const control: controlProperties = this.userformData[this.userFormId][k]\r\n            .properties\r\n          for (const key in this.controlRef.resizeControl) {\r\n            if (\r\n              this.controlRef.resizeControl[key].$refs['draRef'.concat(control.ID)] !== undefined\r\n            ) {\r\n              dragResizeReffer = this.controlRef.resizeControl[key].$refs['draRef'.concat(control.ID)]\r\n            }\r\n          }\r\n          const top = control.Top! - y\r\n          const left = control.Left! - x\r\n\r\n          if (this.resizeDiv === 'drag') {\r\n            this.updateControlAction('Top', top + containerProp.ScrollTop!, k)\r\n            this.updateControlAction('Left', left + containerProp.ScrollLeft!, k)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  elementDrag (event: MouseEvent): void {\r\n    event.preventDefault()\r\n    this.positions.movementX = this.positions.clientX - event.clientX\r\n    this.positions.movementY = this.positions.clientY - event.clientY\r\n    const scale: number = 1\r\n    const grid: Array<number> = [10, 10]\r\n    const x: number =\r\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\r\n    const y: number =\r\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\r\n\r\n    if (this.currentMouseDownEvent && (x !== 0 || y !== 0)) {\r\n      this.currentMouseDownEvent.customCallBack &&\r\n        this.currentMouseDownEvent.customCallBack()\r\n    }\r\n    const diffGridX: number = x - this.positions.movementX\r\n    const diffGridY: number = y - this.positions.movementY\r\n\r\n    this.positions.clientX = event.clientX - diffGridX\r\n    this.positions.clientY = event.clientY - diffGridY\r\n\r\n    let dragResizeControl: IGroupStyle = {}\r\n    let dragResizeControl1: controlProperties = { ID: '' }\r\n\r\n    for (let i = 0; i < this.divStyleArray.length; i++) {\r\n      this.groupName = this.divStyleArray[i].groupName!\r\n      dragResizeControl = this.divStyleArray[i]\r\n      if (dragResizeControl.display === 'block') {\r\n        let top: number = -1\r\n        let left: number = -1\r\n        let incWidth: number = -1\r\n        let incHeight: number = -1\r\n        let decWidth: number = -1\r\n        let decHeight: number = -1\r\n        top = parseInt(dragResizeControl.top!) - y\r\n        left = parseInt(dragResizeControl.left!) - x\r\n        incWidth =\r\n          parseInt(dragResizeControl.width!) + x > 0\r\n            ? parseInt(dragResizeControl.width!) + x\r\n            : 0\r\n        incHeight =\r\n          parseInt(dragResizeControl.height!) + y > 0\r\n            ? parseInt(dragResizeControl.height!) + y\r\n            : 0\r\n        decWidth =\r\n          parseInt(dragResizeControl.width!) - x > 0\r\n            ? parseInt(dragResizeControl.width!) - x\r\n            : 0\r\n        decHeight =\r\n          parseInt(dragResizeControl.height!) - y > 0\r\n            ? parseInt(dragResizeControl.height!) - y\r\n            : 0\r\n\r\n        if (this.resizeDiv === 'drag') {\r\n          dragResizeControl.top = `${top}px`\r\n          dragResizeControl.left = `${left}px`\r\n        } else {\r\n          if (this.resizeDiv.includes('t')) {\r\n            if (incHeight > 0) {\r\n              dragResizeControl.top = `${top}px`\r\n            }\r\n            dragResizeControl.height = `${incHeight}px`\r\n          } else if (this.resizeDiv.includes('b')) {\r\n            dragResizeControl.height = `${decHeight}px`\r\n          }\r\n\r\n          if (this.resizeDiv.includes('l')) {\r\n            if (incWidth > 0) {\r\n              dragResizeControl.left = `${left}px`\r\n            }\r\n            dragResizeControl.width = `${incWidth}px`\r\n          } else if (this.resizeDiv.includes('r')) {\r\n            dragResizeControl.width = `${decWidth}px`\r\n          }\r\n        }\r\n        for (const j in this.userformData[this.userFormId][this.containerId]\r\n          .controls) {\r\n          const index = this.userformData[this.userFormId][this.containerId]\r\n            .controls[j]\r\n          const controlProp = this.userformData[this.userFormId][index]\r\n            .properties\r\n\r\n          let top: number =\r\n            (parseInt(dragResizeControl.height!) * this.topArray[j]) /\r\n              parseInt(this.initialArray[i].height!) +\r\n            parseInt(this.initialArray[i].top!)\r\n\r\n          let height: number =\r\n            parseInt(dragResizeControl.height!) * this.percheightArray[j]\r\n\r\n          let left: number =\r\n            (parseInt(dragResizeControl.width!) * this.leftArray[j]) /\r\n              parseInt(this.initialArray[i].width!) +\r\n            parseInt(this.initialArray[i].left!)\r\n\r\n          let width: number =\r\n            parseInt(dragResizeControl.width!) * this.percwidthArray[j]\r\n\r\n          let right: number =\r\n            (parseInt(dragResizeControl.width!) * this.leftArray[j]) /\r\n              parseInt(this.initialArray[i].width!) +\r\n            parseInt(dragResizeControl.left!)\r\n\r\n          let bottom: number =\r\n            (parseInt(dragResizeControl.height!) * this.topArray[j]) /\r\n              parseInt(this.initialArray[i].height!) +\r\n            parseInt(dragResizeControl.top!)\r\n          if (\r\n            controlProp.GroupID === this.divStyleArray[i].groupName &&\r\n            this.divStyleArray[i].display === 'block'\r\n          ) {\r\n            dragResizeControl1 = controlProp\r\n            if (this.resizeDiv === 'drag') {\r\n              top = dragResizeControl1.Top! - y\r\n              left = dragResizeControl1.Left! - x\r\n              this.updateControlAction('Top', top, index)\r\n              this.updateControlAction('Left', left, index)\r\n            } else {\r\n              if (this.resizeDiv.includes('t')) {\r\n                this.updateControlAction('Top', bottom, index)\r\n                this.updateControlAction('Height', height, index)\r\n              } else if (this.resizeDiv.includes('b')) {\r\n                this.updateControlAction('Top', top, index)\r\n                this.updateControlAction('Height', height, index)\r\n              }\r\n              if (this.resizeDiv.includes('l')) {\r\n                this.updateControlAction('Left', right, index)\r\n                this.updateControlAction('Width', width, index)\r\n              } else if (this.resizeDiv.includes('r')) {\r\n                this.updateControlAction('Left', left, index)\r\n                this.updateControlAction('Width', width, index)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    for (let k of this.selectedControls[this.userFormId].selected) {\r\n      if (!k.startsWith('ID_USERFORM') && !k.startsWith('group')) {\r\n        let dragResizeReffer: IdragResizeRefStyle = {}\r\n        const control: controlProperties = this.userformData[this.userFormId][k]\r\n          .properties\r\n        for (const key in this.controlRef.resizeControl) {\r\n          if (\r\n            this.controlRef.resizeControl[key].$refs['draRef'.concat(control.ID)] !== undefined\r\n          ) {\r\n            dragResizeReffer = this.controlRef.resizeControl[key].$refs['draRef'.concat(control.ID)]\r\n          }\r\n        }\r\n        const top = dragResizeReffer.offsetTop! - y\r\n        const left = dragResizeReffer.offsetLeft! - x\r\n        const incWidth = control.Width! + x > 0 ? control.Width! + x : 0\r\n        const incHeight = control.Height! + y > 0 ? control.Height! + y : 0\r\n        const decWidth = control.Width! - x > 0 ? control.Width! - x : 0\r\n        const decHeight = control.Height! - y > 0 ? control.Height! - y : 0\r\n\r\n        if (this.resizeDiv === 'drag') {\r\n          this.updateControlAction('Top', top, k)\r\n          this.updateControlAction('Left', left, k)\r\n        } else {\r\n          if (this.resizeDiv.includes('t')) {\r\n            if (incHeight > 0) {\r\n              this.updateControlAction('Top', top, k)\r\n            }\r\n            this.updateControlAction('Height', incHeight, k)\r\n          } else if (this.resizeDiv.includes('b')) {\r\n            this.updateControlAction('Height', decHeight, k)\r\n          }\r\n          if (this.resizeDiv.includes('l')) {\r\n            if (incWidth > 0) {\r\n              this.updateControlAction('Left', left, k)\r\n            }\r\n            this.updateControlAction('Width', incWidth, k)\r\n          } else if (this.resizeDiv.includes('r')) {\r\n            this.updateControlAction('Width', decWidth, k)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  openContextMenu (e: MouseEvent, parentID: string, controlID: string, type: string) {\r\n    this.$emit('openMenu', e, parentID, controlID, type)\r\n  }\r\n  openMenu (event: MouseEvent, type: string) {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    const container = this.selectedControls[this.userFormId].container[0]\r\n    let controlId = container\r\n    if (type === 'control') {\r\n      controlId = this.getSelectedControlsDatas![0]\r\n    }\r\n    this.openContextMenu(event, container, controlId, type)\r\n  }\r\n\r\n  closeDragElement (event:MouseEvent, handler: string): void {\r\n    this.elementDrag(event)\r\n    if (this.value !== 'same') {\r\n      this.value = 'different'\r\n    }\r\n    EventBus.$emit('updateIsControlMove', this.isMove)\r\n    EventBus.$emit('groupDrag', 'NotDrag')\r\n    EventBus.$emit('endMoveControl', 'groupEndMove')\r\n    EventBus.$emit('endGroupMoveControl')\r\n    document.onmouseup = null\r\n    document.onmousemove = null\r\n    if (handler === 'drag') {\r\n      const selected = this.selectedControls[this.userFormId].selected\r\n      for (const grpname in selected) {\r\n        if (selected[grpname].startsWith('group')) {\r\n          this.groupStyle(selected[grpname])\r\n        }\r\n      }\r\n    }\r\n    for (const controlGroup in this.divStyleArray) {\r\n      const groupName = this.divStyleArray[controlGroup].groupName!\r\n      if (groupName.startsWith('group')) {\r\n        this.groupStyle(groupName)\r\n      }\r\n    }\r\n  }\r\n  getGroupEditStyle (groupName: string) {\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    const isSelected =\r\n      selected.length === 1 &&\r\n      !selected[0].startsWith('group') &&\r\n      this.userformData[this.userFormId][selected[0]].properties.GroupID ===\r\n        groupName\r\n    return isSelected ? 'mainEditDiv' : 'mainDiv'\r\n  }\r\n  getGroupStyle (groupName: string) {\r\n    return this.divStyleArray[this.divStyleArray.findIndex((p) => p.groupName === groupName)]\r\n  }\r\n\r\n  @Watch('selectedControls', { deep: true })\r\n  updateGroupStyle () {\r\n    const selectedContainer = this.selectedControls[this.userFormId].container[0]\r\n    if (selectedContainer !== this.containerId && this.isMove) {\r\n      const selected = this.selectedControls[this.userFormId].selected\r\n      for (const grpname in selected) {\r\n        if (selected[grpname].startsWith('group')) {\r\n          const fingGroupIndex = this.divStyleArray.findIndex(val => val.groupName === selected[grpname])\r\n          this.divStyleArray.splice(fingGroupIndex, 1)\r\n        }\r\n      }\r\n    }\r\n    if (this.divStyleArray.length > 0 && selectedContainer === this.containerId) {\r\n      for (const index in this.divStyleArray) {\r\n        this.divStyleArray[index].display = 'none'\r\n      }\r\n      const selControl = this.selectedControls[this.userFormId].selected\r\n      if (selControl.length >= 1) {\r\n        for (const val of this.getSelectedControlsDatas!) {\r\n          const groupId = this.userformData[this.userFormId][val].properties.GroupID!\r\n          if (groupId) {\r\n            const index = this.divStyleArray.findIndex(\r\n              (p) => p.groupName === groupId\r\n            )\r\n            this.divStyleArray[index].display = 'block'\r\n          }\r\n        }\r\n      } else {\r\n        if (\r\n          selControl[0].startsWith('group') ||\r\n          (!selControl[0].startsWith('group') &&\r\n            selControl.includes(\r\n              this.userformData[this.userFormId][selControl[0]].properties\r\n                .GroupID!\r\n            ))\r\n        ) {\r\n          if (selControl[0].startsWith('group')) {\r\n            const index = this.divStyleArray.findIndex(\r\n              (p) => p.groupName === selControl[0]\r\n            )\r\n            if (index !== -1) {\r\n              this.divStyleArray[index].display = 'block'\r\n            }\r\n          } else {\r\n            const index = this.divStyleArray.findIndex(\r\n              (p) =>\r\n                p.groupName ===\r\n                this.userformData[this.userFormId][selControl[0]].properties\r\n                  .GroupID!\r\n            )\r\n            if (index !== -1) {\r\n              this.divStyleArray[index].display = 'block'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (const index in this.divStyleArray) {\r\n        this.divStyleArray[index].display = 'none'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n.move-border {\r\n  z-index: 9999;\r\n  position: absolute;\r\n  border: 1px rgb(59, 58, 58) dashed;\r\n}\r\n.m-top-b,\r\n.m-bottom-b {\r\n  width: 100%;\r\n}\r\n.m-left-b,\r\n.m-right-b {\r\n  height: 100%;\r\n}\r\n.handle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 6px;\r\n  height: 6px;\r\n  background: white;\r\n  border: 1px solid #333;\r\n}\r\n.handleActivate {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 6px;\r\n  height: 6px;\r\n\r\n  background: black;\r\n  border: 1px solid white;\r\n}\r\n.handle-tl {\r\n  top: -5px;\r\n  left: -5px;\r\n  cursor: nw-resize;\r\n}\r\n.handle-tm {\r\n  top: -5px;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  cursor: n-resize;\r\n}\r\n.handle-tr {\r\n  top: -5px;\r\n  right: -5px;\r\n  cursor: ne-resize;\r\n}\r\n.handle-ml {\r\n  top: 50%;\r\n  margin-top: -5px;\r\n  left: -5px;\r\n  cursor: w-resize;\r\n}\r\n.handle-mr {\r\n  top: 50%;\r\n  margin-top: -5px;\r\n  right: -5px;\r\n  cursor: e-resize;\r\n}\r\n.handle-bl {\r\n  bottom: -5px;\r\n  left: -5px;\r\n  cursor: sw-resize;\r\n}\r\n.handle-bm {\r\n  bottom: -5px;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  cursor: s-resize;\r\n}\r\n.handle-br {\r\n  bottom: -5px;\r\n  right: -5px;\r\n  cursor: se-resize;\r\n}\r\n.mainDiv {\r\n  cursor: move;\r\n  position: absolute;\r\n  --border-width: 5;\r\n  --stripe-distance: 2px;\r\n  border: calc(var(--border-width) * 1px) solid transparent;\r\n  border-image: repeating-linear-gradient(\r\n      -110deg,\r\n      black,\r\n      transparent 1px,\r\n      transparent var(--stripe-distance),\r\n      black calc(var(--stripe-distance) + 0.2px)\r\n    )\r\n    var(--border-width);\r\n  padding: 5px;\r\n  margin-top: -5px;\r\n  margin-left: -5px;\r\n  display: none;\r\n}\r\n.mainEditDiv {\r\n  position: absolute;\r\n  cursor: move;\r\n  --border-width: 5;\r\n  --stripe-distance: 2px;\r\n  border: calc(var(--border-width) * 1px) solid transparent;\r\n  border-image: repeating-linear-gradient(\r\n      -45deg,\r\n      black,\r\n      transparent 2px,\r\n      transparent var(--stripe-distance),\r\n      black calc(var(--stripe-distance) + 0.2px)\r\n    )\r\n    var(--border-width);\r\n  padding: 5px;\r\n  margin-top: -5px;\r\n  margin-left: -5px;\r\n  display: none;\r\n}\r\n.innerGroupStyle {\r\n    margin-top: -5px;\r\n    margin-left: -5px;\r\n    padding-right: 10px;\r\n    padding-bottom: 10px;\r\n}\r\n.handle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 6px;\r\n  height: 6px;\r\n  background: white;\r\n  border: 1px solid #333;\r\n}\r\n.handle-tl {\r\n  top: -5px;\r\n  left: -5px;\r\n  cursor: nw-resize;\r\n}\r\n.handle-tm {\r\n  top: -5px;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  cursor: n-resize;\r\n}\r\n.handle-tr {\r\n  top: -5px;\r\n  right: -5px;\r\n  cursor: ne-resize;\r\n}\r\n.handle-ml {\r\n  top: 50%;\r\n  margin-top: -5px;\r\n  left: -5px;\r\n  cursor: w-resize;\r\n}\r\n.handle-mr {\r\n  top: 50%;\r\n  margin-top: -5px;\r\n  right: -5px;\r\n  cursor: e-resize;\r\n}\r\n.handle-bl {\r\n  bottom: -5px;\r\n  left: -5px;\r\n  cursor: sw-resize;\r\n}\r\n.handle-bm {\r\n  bottom: -5px;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  cursor: s-resize;\r\n}\r\n.handle-br {\r\n  bottom: -5px;\r\n  right: -5px;\r\n  cursor: se-resize;\r\n}\r\n</style>\r\n"]}]}