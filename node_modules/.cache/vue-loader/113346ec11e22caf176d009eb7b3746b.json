{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDTextBox/index.vue?vue&type=style&index=0&id=e831a758&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDTextBox/index.vue","mtime":1611558080000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoudGV4dC1ib3gtZGVzaWduIHsNCiAgd2lkdGg6IDBweDsNCiAgaGVpZ2h0OiAwcHg7DQogIGxlZnQ6IDBweDsNCiAgdG9wOiAwcHg7DQogIHJlc2l6ZTogbm9uZTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCn0NCi50ZXh0LWJveC1kZXNpZ246Zm9jdXMgew0KICBvdXRsaW5lOiBub25lOw0KfQ0KLnRleHQtYm94LWRlc2lnbjo6c2VsZWN0aW9uIHsNCiAgYmFja2dyb3VuZDogbGlnaHRibHVlOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingswmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDTextBox","sourcesContent":["<template>\r\n  <div class=\"resp-textbox\"\r\n  v-on=\"eventStoppers()\"\r\n  @click=\"textBoxClick\"\r\n  @mousedown=\"controlEditMode\"\r\n  :tabindex=\"properties.TabIndex\"\r\n  @keydown.enter=\"setContentEditable($event, true)\"\r\n  @contextmenu=\"isEditMode ? openTextContextMenu($event): parentConextMenu($event)\"\r\n  >\r\n    <textarea\r\n      data-gramm=\"false\"\r\n      ref=\"textareaRef\"\r\n      :style=\"cssStyleProperty\"\r\n      :tabindex=\"properties.TabIndex\"\r\n      :maxlength=\"properties.MaxLength !==0 ? properties.MaxLength : ''\"\r\n      :disabled=\"getDisableValue\"\r\n      :title=\"properties.ControlTipText\"\r\n      :readonly=\"properties.Locked\"\r\n      @keydown.escape.exact=\"releaseEditMode\"\r\n      v-cursorDirective=\"{\r\n        start: data.properties.CursorStartPosition,\r\n        end: data.properties.CursorEndPosition,\r\n        pwdCharType: properties.PasswordChar,\r\n      }\"\r\n      @keydown.tab=\"tabKeyBehavior\"\r\n      @keydown.enter=\"enterKeyBehavior\"\r\n      @input=\"\r\n        properties.PasswordChar === ''\r\n          ? textAndValueUpdate($event)\r\n          : handlePasswordChar($event)\r\n      \"\r\n      @keydown=\"properties.PasswordChar !== '' ? handleDelete($event) : null\"\r\n      @blur=\"handleBlur($event, textareaRef, hideSelectionDiv)\"\r\n      @click=\"handleClick(hideSelectionDiv)\"\r\n      class=\"text-box-design\"\r\n      :value=\"\r\n        properties.Value\r\n          | passwordFilter(properties.PasswordChar, properties.Value)\r\n      \"\r\n      @dragstart=\"dragBehavior\"\r\n    />\r\n    <div\r\n      ref=\"hideSelectionDiv\"\r\n      @click=\"divHide($event, textareaRef)\"\r\n      :style=\"divcssStyleProperty\"\r\n      :title=\"properties.ControlTipText\"\r\n      class=\"text-box-design\"\r\n    >\r\n      {{\r\n        properties.Value\r\n          | passwordFilter(properties.PasswordChar, properties.Value)\r\n      }}\r\n    </div>\r\n    <label ref=\"autoSizeTextarea\"></label>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Vue,\r\n  Prop,\r\n  Ref,\r\n  Watch,\r\n  Emit,\r\n  Mixins\r\n} from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { DirectiveBinding } from 'vue/types/options'\r\n\r\n@Component({\r\n  name: 'FDTextBox',\r\n  filters: {\r\n    /**\r\n     * @description filter to show passwordChar instead of original text\r\n     * @function passwordFilter\r\n     * @param value text to be filtered\r\n     * @param password passwordChar value to filter the text\r\n     * @param text  TextBox properties Text Value\r\n     */\r\n    passwordFilter (value: string, password: string, text: string) {\r\n      if (password !== '' && text !== '') {\r\n        let filteredValue: string = ''\r\n        for (let index = 0; index < text.length; index++) {\r\n          filteredValue = filteredValue + password[0]\r\n        }\r\n        return filteredValue\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  },\r\n  directives: {\r\n    cursorDirective: {\r\n      /**\r\n       * @description  called after the containing component’s VNode has updated\r\n       * updates selection start and end cursor positon when data model value changes\r\n       * to maintain cursor position\r\n       * @function update Hook Functions i.e, (bind, inserted, update, componentUpdated, unbind)\r\n       * @param event The element the directive is bound to. This can be used to directly manipulate the DOM.\r\n       * @param vnode The virtual node produced by Vue’s compiler\r\n       */\r\n      update (event: HTMLElement, vnode: DirectiveBinding) {\r\n        if (vnode.value.pwdCharType !== '') {\r\n          (event as HTMLFormElement).selectionStart = vnode.value.start;\r\n          (event as HTMLFormElement).selectionEnd = vnode.value.end\r\n        } else {\r\n          return undefined\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\nexport default class FDTextBox extends Mixins(FdControlVue) {\r\n  @Ref('hideSelectionDiv') readonly hideSelectionDiv!: HTMLDivElement;\r\n  @Ref('autoSizeTextarea') readonly autoSizeTextarea!: HTMLLabelElement;\r\n  @Ref('textareaRef') textareaRef: HTMLTextAreaElement;\r\n  $el: HTMLDivElement\r\n  originalText: string = ''\r\n  trimmedText: string = ''\r\n  get getDisableValue () {\r\n    if (this.isRunMode || this.isEditMode) {\r\n      return (\r\n        this.properties.Enabled === false || this.properties.Locked === true\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in Textarea tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function cssStyleProperty\r\n   *\r\n   */\r\n  get cssStyleProperty () {\r\n    const controlProp = this.properties\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 10,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true,\r\n        FontStyle: 'Arial'\r\n      }\r\n    return {\r\n      left: `${controlProp.Left}px`,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      top: `${controlProp.Top}px`,\r\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\r\n      textAlign:\r\n        controlProp.TextAlign === 0\r\n          ? 'left'\r\n          : controlProp.TextAlign === 1\r\n            ? 'center'\r\n            : 'right',\r\n      backgroundColor: controlProp.BackStyle ? controlProp.BackColor : 'transparent',\r\n      borderLeft: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : '',\r\n      borderRight: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 1 ? '2px solid gray' : controlProp.SpecialEffect === 4 ? '1.5px solid gray' : controlProp.SpecialEffect === 3 ? '0.5px solid gray' : '',\r\n      borderTop: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : '',\r\n      borderBottom: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 1 ? '2px solid gray' : controlProp.SpecialEffect === 4 ? '1.5px solid gray' : controlProp.SpecialEffect === 3 ? '0.5px solid gray' : '',\r\n      whiteSpace:\r\n        this.isEditMode ? controlProp.WordWrap && controlProp.MultiLine ? 'normal' : 'nowrap' : controlProp.WordWrap && controlProp.MultiLine ? 'pre-line' : 'pre',\r\n      wordBreak:\r\n        controlProp.WordWrap && controlProp.MultiLine ? 'break-word' : 'normal',\r\n      color:\r\n        controlProp.Enabled === true ? controlProp.ForeColor : this.getEnabled,\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      fontFamily: (font.FontStyle! !== '') ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      fontWeight: font.FontBold ? 'bold' : (font.FontStyle !== '') ? this.tempWeight : '',\r\n      fontStretch: (font.FontStyle !== '') ? this.tempStretch : '',\r\n      display: controlProp.Visible ? 'block' : 'none',\r\n      overflowX: this.getScrollBarX,\r\n      overflowY: this.getScrollBarY\r\n      // position: 'relative'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description updates the dataModel textBox object properties when user insert/delete text\r\n   * inside textBox when passwordChar is set, updates text and values properties of textBox with entered character\r\n   * @function handlePasswordChar\r\n   * @param event its of type TextEvent\r\n   * @event input\r\n   *\r\n   */\r\n  handlePasswordChar (event: TextEvent) {\r\n    let newData\r\n    let text = this.properties.Text!\r\n    let selectionDiff =\r\n      (this.data.properties!.CursorStartPosition as number) !==\r\n      (this.data.properties!.CursorEndPosition as number)\r\n    if (event.target instanceof HTMLTextAreaElement) {\r\n      if (selectionDiff) {\r\n        // selection\r\n        newData =\r\n        text.substring(0, this.data.properties!.CursorStartPosition as number) +\r\n        text.substring(this.data.properties!.CursorEndPosition as number)\r\n        this.updateDataModel({ propertyName: 'Text', value: newData })\r\n        this.updateDataModel({ propertyName: 'Value', value: newData })\r\n      } else if (text.length < event.target.value.length) {\r\n        // insertion\r\n        newData = [\r\n          text.slice(0, event.target.selectionStart - 1),\r\n          event.data,\r\n          text.slice(event.target.selectionStart - 1)\r\n        ].join('')\r\n        this.updateDataModel({ propertyName: 'Text', value: newData })\r\n        this.updateDataModel({ propertyName: 'Value', value: newData })\r\n      } else if (text.length > event.target.value.length) {\r\n        // deletion\r\n        newData = [\r\n          text.slice(0, event.target.selectionStart),\r\n          text.slice(event.target.selectionStart + 1)\r\n        ].join('')\r\n        this.updateDataModel({ propertyName: 'Text', value: newData })\r\n        this.updateDataModel({ propertyName: 'Value', value: newData })\r\n      }\r\n      this.updateDataModel({\r\n        propertyName: 'CursorStartPosition',\r\n        value: event.target.selectionStart\r\n      })\r\n      this.updateDataModel({\r\n        propertyName: 'CursorEndPosition',\r\n        value: event.target.selectionEnd\r\n      })\r\n    } else {\r\n      throw new Error('Expected HTMLTextAreaElement but found different element')\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on cssStyleProperty of\r\n   * textarea\r\n   * @function divcssStyleProperty\r\n   *\r\n   */\r\n  get divcssStyleProperty () {\r\n    const styleObject = this.cssStyleProperty\r\n    return {\r\n      ...styleObject,\r\n      display: 'none',\r\n      paddingTop: '2px',\r\n      paddingLeft: '2px'\r\n    }\r\n  }\r\n  /**\r\n   * @description When user enters ctrl + enter cursor moves to next line\r\n   * @function handleCtrlEnter\r\n   * @param el its of type HTMLTextAreaElement\r\n   * @param text new line character\r\n   * @event keydown.enter.ctrl\r\n   */\r\n  handleCtrlEnter (el : HTMLTextAreaElement, text: string) {\r\n    el.focus()\r\n    if (typeof el.selectionStart === 'number' &&\r\n            typeof el.selectionEnd === 'number') {\r\n      const val = el.value\r\n      const selStart = el.selectionStart\r\n      el.value = val.slice(0, selStart) + text + val.slice(el.selectionEnd)\r\n      el.selectionEnd = el.selectionStart = selStart + text.length\r\n    }\r\n  }\r\n  /**\r\n   * @description EnterKeyBehavior - if true when enter is pressed while editing the cursor moves to next line\r\n   *  if false the cursor remains in same place\r\n   * @function enterKeyBehavior\r\n   * @param event its of type KeyboardEvent\r\n   * @event keydown.enter\r\n   */\r\n  enterKeyBehavior (event: KeyboardEvent): boolean {\r\n    if (this.properties.MultiLine) {\r\n      if (event.ctrlKey) {\r\n        this.handleCtrlEnter(this.textareaRef, '\\n')\r\n        return true\r\n      } else if (this.properties.EnterKeyBehavior && this.properties.MultiLine) {\r\n        return true\r\n      } else if (event.shiftKey) {\r\n        return true\r\n      }\r\n    }\r\n    event.preventDefault()\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * @description  specifies how the control responds to the TAB key\r\n   * when  TabKeyBehavior true in textBox tab spaces are added on press of tab Key\r\n   * when TabKeyBehavior false in textBox pressing tab moves focus to next controls\r\n   * @function tabKeyBehavior\r\n   * @param event its of type MouseEvent\r\n   * @event keydown.tab\r\n   */\r\n  tabKeyBehavior (event: KeyboardEvent): boolean {\r\n    if (this.properties.TabKeyBehavior) {\r\n      const TABKEY = 9\r\n      if (event.target instanceof HTMLTextAreaElement) {\r\n        event.stopPropagation()\r\n        const eventTaget = event.target\r\n        const selectionStart = eventTaget.selectionStart\r\n        const selectionEnd = eventTaget.selectionEnd\r\n        const value = eventTaget.value\r\n        if (event.keyCode === TABKEY) {\r\n          (event.target).value =\r\n          value.substring(0, selectionStart) +\r\n          '\\t' +\r\n          value.substring(selectionEnd)\r\n          event.preventDefault()\r\n        }\r\n        (event.target).selectionStart = selectionStart + 1;\r\n        (event.target).selectionEnd = (event.target).selectionStart\r\n        return false\r\n      } else {\r\n        throw new Error('Expected HTMLTextAreaElement but found different element')\r\n      }\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  /**\r\n   * @description updates the dataModel textBox object properties when user insert/delete text\r\n   * inside textBox, updates text and values properties of textBox\r\n   * @function textAndValueUpdate\r\n   * @param event its of type InputEvent\r\n   * @event input\r\n   *\r\n   */\r\n  textAndValueUpdate (event: InputEvent) {\r\n    const propData = this.properties\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n    if (event.target instanceof HTMLTextAreaElement) {\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: (event.target).value\r\n      })\r\n      this.updateDataModel({\r\n        propertyName: 'Text',\r\n        value: (event.target).value\r\n      })\r\n      if (this.properties.ControlSource !== '') {\r\n        this.updateDataModelExtraData({\r\n          propertyName: 'ControlSourceValue',\r\n          value: (event.target).value\r\n        })\r\n      } else {\r\n        return undefined\r\n      }\r\n    } else {\r\n      throw new Error('Expected HTMLTextAreaElement but found different element')\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Font.FontSize', { deep: true })\r\n  autoSizeValidateOnFontChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n\r\n  @Watch('properties.WordWrap', { deep: true })\r\n  autoSizeValidateOnWordWrapChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description dragBehavior - if true when dragging\r\n   *  if false the cursor remains in same place\r\n   * @function dragBehavior\r\n   * @param event its of type KeyboardEvent\r\n   * @event dragStart\r\n   */\r\n  dragBehavior (e: Event) {\r\n    if (this.properties.DragBehavior) {\r\n      return true\r\n    }\r\n    e.preventDefault()\r\n  }\r\n\r\n  @Watch('isEditMode')\r\n  editModeValidation () {\r\n    if (this.textareaRef) {\r\n      this.originalText = this.textareaRef.value\r\n      this.trimmedText = this.originalText.replace(/(\\r\\n|\\n|\\r)/gm, ',')\r\n    }\r\n  }\r\n\r\n  @Watch('properties.MultiLine')\r\n  multiLineValidate () {\r\n    if (this.textareaRef) {\r\n      this.originalText = this.textareaRef.value\r\n      this.trimmedText = this.originalText.replace(/(\\r\\n|\\n|\\r)/gm, '¶')\r\n\r\n      if (this.properties.MultiLine) {\r\n        this.trimmedText = this.originalText.replace(/¶/g, '\\n')\r\n        this.updateDataModel({ propertyName: 'Value', value: this.trimmedText })\r\n      } else {\r\n        this.updateDataModel({ propertyName: 'Value', value: this.trimmedText })\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @override\r\n   */\r\n  @Watch('properties.AutoSize', { deep: true })\r\n  updateAutoSize () {\r\n    if (this.properties.AutoSize === true) {\r\n      this.$nextTick(() => {\r\n        const textareaRef: HTMLTextAreaElement = this.textareaRef\r\n        // replication of stype attribute to Label tag for autoSize property to work\r\n        let tempLabel: HTMLLabelElement = this.autoSizeTextarea\r\n        tempLabel.style.display = 'inline'\r\n        tempLabel.style.fontStyle = textareaRef.style.fontStyle\r\n        tempLabel.style.fontSize =\r\n            parseInt(textareaRef.style.fontSize) + 'px'\r\n        tempLabel.style.whiteSpace = textareaRef.style.whiteSpace\r\n        tempLabel.style.wordBreak = textareaRef.style.wordBreak\r\n        tempLabel.style.fontWeight = textareaRef.style.fontWeight\r\n        tempLabel.style.width = textareaRef.style.width\r\n        tempLabel.style.height = textareaRef.style.height\r\n        tempLabel.innerText = textareaRef.value\r\n        this.updateDataModel({\r\n          propertyName: 'Width',\r\n          value: tempLabel.offsetWidth + 5\r\n        })\r\n        this.updateDataModel({\r\n          propertyName: 'Height',\r\n          value: tempLabel.offsetHeight + 5\r\n        })\r\n        tempLabel.innerText = ''\r\n        tempLabel.style.display = 'none'\r\n      })\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  created () {\r\n    const propData: controlData = this.data\r\n    if (propData.properties.ControlSource !== '') {\r\n      const controlSourceValue = propData.extraDatas!.ControlSourceValue\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: controlSourceValue\r\n      })\r\n      this.updateDataModel({ propertyName: 'Text', value: controlSourceValue })\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @description watches ControlSource property\r\n  * @function updateControlSourceValue\r\n  * @param oldVal previous string value\r\n  * @param newVal  new/changed string value\r\n  */\r\n  @Watch('properties.ControlSource', { deep: true })\r\n  updateControlSourceValue (newVal: string, oldVal: string) {\r\n    const propData: controlData = this.data\r\n    if (propData.properties.ControlSource !== '') {\r\n      const controlSourceValue = propData.extraDatas!.ControlSourceValue\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: controlSourceValue\r\n      })\r\n      this.updateDataModel({ propertyName: 'Text', value: controlSourceValue })\r\n    } else {\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: ''\r\n      })\r\n      this.updateDataModel({ propertyName: 'Text', value: '' })\r\n    }\r\n  }\r\n  /**\r\n   * @description keep tracks of key press and selectionStart and selectionEnd\r\n   * updates extra property CursorStartPosition and CursorEndPosition which is required\r\n   * when user insert, update or delete text in textBox\r\n   * @function handleDelete\r\n   * @param event it is of type KeyboardEvent\r\n   * @event keydown\r\n   */\r\n  handleDelete (event: KeyboardEvent) {\r\n    if (event.target instanceof HTMLTextAreaElement) {\r\n      if (event.keyCode === 8) {\r\n        this.updateDataModel({\r\n          propertyName: 'CursorStartPosition',\r\n          value: (event.target).selectionStart!\r\n        })\r\n        this.updateDataModel({\r\n          propertyName: 'CursorEndPosition',\r\n          value: (event.target).selectionEnd!\r\n        })\r\n      } else {\r\n        return undefined\r\n      }\r\n    } else {\r\n      throw new Error('Expected HTMLTextAreaElement but found different element')\r\n    }\r\n  }\r\n  /**\r\n   * @description  show selection when TextBox loses focus\r\n   * when HideSelection is false selection is show if user selects any text\r\n   * @function handleBlur\r\n   * @event blur\r\n   *\r\n   */\r\n  handleBlur (\r\n    event: TextEvent,\r\n    textareaRef: HTMLTextAreaElement,\r\n    hideSelectionDiv: HTMLDivElement\r\n  ) {\r\n    if (!this.properties.HideSelection) {\r\n      if (event.target instanceof HTMLTextAreaElement) {\r\n        const eventTarget = event.target\r\n        hideSelectionDiv.style.display = 'block'\r\n        hideSelectionDiv.style.height = this.properties.Height! + 2 + 'px'\r\n        hideSelectionDiv.style.width = this.properties.Width! + 2 + 'px'\r\n        textareaRef.style.display = 'none'\r\n        let textarea = eventTarget.value\r\n        let firstPart =\r\n        textarea.slice(0, eventTarget.selectionEnd) +\r\n        '</span>' +\r\n        textarea.slice(eventTarget.selectionEnd + Math.abs(0))\r\n        let text =\r\n        firstPart.slice(0, eventTarget.selectionStart) +\r\n        \"<span style='background-color:lightblue'>\" +\r\n        firstPart.slice(eventTarget.selectionStart + Math.abs(0))\r\n        hideSelectionDiv.innerHTML = text\r\n      } else {\r\n        throw new Error('Expected HTMLTextAreaElement but found different element')\r\n      }\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n  /**\r\n   *@description hides the div when focus comes to textarea when hideSelection\r\n   * properties is false\r\n   * @function handleClick\r\n   * @param event its of FocusEvent\r\n   * @event click\r\n   */\r\n  handleClick (hideSelectionDiv: HTMLDivElement) {\r\n    if (!this.properties.HideSelection) {\r\n      hideSelectionDiv.style.display = 'none'\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n  /**\r\n   * @description hides div instead of textarea when hideSelection is false\r\n   * when hideSelection properties is true textarea is shown\r\n   * when hideSelection properties is false div is shown\r\n   * @function divHide\r\n   * @param event its of type MouseEvent\r\n   * @event click\r\n   */\r\n  divHide (event: MouseEvent, textareaRef: HTMLTextAreaElement) {\r\n    if (event.target instanceof HTMLSpanElement || event.target instanceof HTMLDivElement) {\r\n      (event.target).style.display = 'none'\r\n      textareaRef.style.display = 'block'\r\n      if (\r\n        (event.target).tagName === 'SPAN' &&\r\n      (event.target).parentNode!.nodeName === 'DIV'\r\n      ) {\r\n        ((event.target)\r\n          .parentNode as HTMLElement).style.display = 'none'\r\n      }\r\n      textareaRef.focus()\r\n      textareaRef.selectionStart = textareaRef.selectionEnd\r\n    }\r\n  }\r\n\r\n  mounted () {\r\n    this.$el.focus()\r\n  }\r\n  releaseEditMode (event: KeyboardEvent) {\r\n    this.$el.focus()\r\n    this.setContentEditable(event, false)\r\n  }\r\n  eventStoppers () {\r\n    const eventStop = (event: Event) => event.stopPropagation()\r\n    return this.isEditMode === false ? null : {\r\n      keydown: eventStop\r\n    }\r\n  }\r\n  textBoxClick (event: MouseEvent) {\r\n    if (this.toolBoxSelectControl === 'Select') {\r\n      event.stopPropagation()\r\n      this.selectedItem(event)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.text-box-design {\r\n  width: 0px;\r\n  height: 0px;\r\n  left: 0px;\r\n  top: 0px;\r\n  resize: none;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n.text-box-design:focus {\r\n  outline: none;\r\n}\r\n.text-box-design::selection {\r\n  background: lightblue;\r\n}\r\n</style>\r\n"]}]}