{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDComboBox/index.vue?vue&type=style&index=0&id=7d9d363d&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDComboBox/index.vue","mtime":1611670264000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmN1c3RvbS1zZWxlY3Qgew0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIG91dGxpbmU6IG5vbmU7DQogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQp9DQouc2VsZWN0aW9uU3BhbiB7DQogIHdpZHRoOiA1cHg7DQp9DQouc2VsZWN0aW9uRGl2IHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1cHggYXV0bzsNCn0NCi5zZWxlY3RlZCB7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzgsIDIzOCwgMjM4KTsNCiAgYm9yZGVyOiAxcHggc29saWQgIzg1ODU4NjsNCiAgYm9yZGVyLWxlZnQ6IDBweDsNCiAgY29sb3I6IGJsYWNrOw0KICBiYWNrZ3JvdW5kLXNpemU6IDQwJTsNCiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOw0KICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICBjdXJzb3I6IHBvaW50ZXI7DQogIHdpZHRoOiAyMHB4Ow0KICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDJweCk7DQp9DQoNCi5pdGVtcyB7DQogIGNvbG9yOiBibGFjazsNCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIGxlZnQ6IDA7DQogIHJpZ2h0OiAwOw0KICB3aWR0aDogY2FsYygxMDAlICsgMjBweCk7DQogIGN1cnNvcjogY29udGV4dC1tZW51Ow0KfQ0KLml0ZW0gew0KICBjb2xvcjogYmxhY2s7DQogIGN1cnNvcjogcG9pbnRlcjsNCiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCBibGFjazsNCiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7DQp9DQouaXRlbTpob3ZlciB7DQogIGJhY2tncm91bmQtY29sb3I6ICMwMzgwZmM7DQogIGNvbG9yOiB3aGl0ZTsNCiAgYm9yZGVyOiAxcHggZG90dGVkIGJsYWNrOw0KfQ0KLnNlbGVjdEhpZGUgew0KICBkaXNwbGF5OiBub25lOw0KfQ0KLmNvbWJvYm94IHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDIwcHg7DQp9DQouY29sdW1uSGVhZHMgew0KICBoZWlnaHQ6IDE5LjJweDsNCiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7DQogIGJvcmRlci10b3A6IDBweDsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOw0KfQ0KLmxpc3RTdHlsZSB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDEwMCU7DQogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsNCiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTsNCiAgb3ZlcmZsb3c6IGF1dG87DQp9DQoubGlzdC1vdXRlciB7DQogIGJvcmRlcjogMC4xcHggc29saWQgbGlnaHRncmF5Ow0KICB3aWR0aDogMTY0cHg7DQogIGhlaWdodDogMTMwcHg7DQogIG92ZXJmbG93LXk6IGF1dG87DQogIGJveC1zaGFkb3c6IC0xcHggLTFweCBncmV5Ow0KfQ0KLnRyIHsNCiAgb3V0bGluZTogbm9uZTsNCiAgZGlzcGxheTogaW5saW5lLWZsZXg7DQp9DQoudHI6aG92ZXI6bm90KFtkaXNhYmxlZF0pIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDU5LCAxMjIsIDIzMSk7DQp9DQoudWwgew0KICBkaXNwbGF5OiBncmlkOw0KICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7DQogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsNCiAgbWFyZ2luLWJsb2NrLXN0YXJ0OiAwZW07DQogIG1hcmdpbi1ibG9jay1lbmQ6IDBlbTsNCiAgbWFyZ2luLWlubGluZS1zdGFydDogMHB4Ow0KICBtYXJnaW4taW5saW5lLWVuZDogMHB4Ow0KICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4Ow0KfQ0KLmxpIHsNCiAgbWFyZ2luOiAxcHg7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIGZvbnQtc2l6ZTogMTRweDsNCiAgaGVpZ2h0OiAxNnB4Ow0KICBib3JkZXI6IDAuNXB4IHNvbGlkIHdoaXRlOw0KICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoubGk6aG92ZXIgew0KICBtYXJnaW46IDFweDsNCiAgYm9yZGVyLWNvbG9yOiByZ2IoNTIsIDUyLCAyNTUpOw0KICBib3JkZXItcmFkaXVzOiAycHg7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYig1OSwgMTIyLCAyMzEpOw0KfQ0KLmZhIHsNCiAgbWFyZ2luLWxlZnQ6IDRweDsNCiAgbWFyZ2luLXRvcDogM3B4Ow0KfQ0KLnNwYW4gew0KICBtYXJnaW4tbGVmdDogN3B4Ow0KICBtYXJnaW4tdG9wOiAwcHg7DQogIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOw0KfQ0KLmxhYmVsU3R5bGUgew0KICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KfQ0KLmRpdiB7DQogIGRpc3BsYXk6IGdyaWQ7DQogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyOw0KfQ0KLmxpc3Rib3ggew0KICBkaXNwbGF5OiBncmlkOw0KICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7DQogIGhlaWdodDogMTAwcHg7DQogIHdpZHRoOiAzMDBweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5Ow0KICBib3JkZXI6IDFweCBzb2xpZCBncmF5Ow0KfQ0KLmNvbHVtbkhlYWRzIHsNCiAgaGVpZ2h0OiAxOS4ycHg7DQogIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOw0KICBkaXNwbGF5OiBncmlkOw0KICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7DQp9DQoub3B0aW9uc0l0ZW1zIHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOw0KfQ0KLnRleHQtYm94LWRlc2lnbiB7DQogIHJlc2l6ZTogbm9uZTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgYm9yZGVyOiBub25lOw0KICBmb250LWZhbWlseTogbW9ub3NwYWNlOw0KfQ0KLnRleHQtYm94LWRlc2lnbjpmb2N1cyB7DQogIG91dGxpbmU6IG5vbmU7DQp9DQoudGV4dC1ib3gtZGVzaWduOjpzZWxlY3Rpb24gew0KICBiYWNrZ3JvdW5kOiBsaWdodGJsdWU7DQp9DQoudGFibGUtc3R5bGUgew0KICB3aWR0aDogY2FsYygxMDAlIC0gMnB4KTsNCn0NCi50aENsYXNzIHsNCiAgcG9zaXRpb246IHN0aWNreTsNCiAgdG9wOiAwOw0KICBvdmVyZmxvdzogaGlkZGVuOw0KICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsNCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCn0NCi50ZENsYXNzIHsNCiAgd2lkdGg6IDE1cHg7DQogIGJvcmRlci1yaWdodDogMXB4IHNvbGlkOw0KfQ0KLnRkQ2xhc3NJbiB7DQogIHdpZHRoOiAxMHB4Ow0KICBtYXgtd2lkdGg6IDEwcHggIWltcG9ydGFudDsNCiAgbWluLXdpZHRoOiAwcHggIWltcG9ydGFudDsNCn0NCi5pbnB1dENsYXNzIHsNCiAgbWFyZ2luOiAwOw0KfQ0KLmhyU3R5bGUgew0KICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50Ow0KICBtYXJnaW46IDBweDsNCiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsNCn0NCi5mb3JQbGFpbiB7DQogIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7DQp9DQoudEhlYWRTdHlsZSB7DQogIHBvc2l0aW9uOiBzdGlja3k7DQogIHRvcDogMHB4Ow0KICB6LWluZGV4OiAxOw0KfQ0KLmNvbHVtbi1pdGVtIHsNCiAgZGlzcGxheTogZmxleDsNCn0NCi5jb2xIZWFkc0NsYXNzIHsNCiAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KfQ0KLmJhciB7DQogIGZvbnQtc2l6ZTogMTNweDsNCiAgY29sb3I6IGJsYWNrOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDComboBox","sourcesContent":["<template>\r\n  <div\r\n    class=\"custom-select\"\r\n    :tabindex=\"tabindex\"\r\n    :style=\"customSelectObj\"\r\n    :title=\"properties.ControlTipText\"\r\n    @click=\"comBoxClick\"\r\n    @keydown.enter=\"setContentEditable($event, true)\"\r\n    @keydown.esc=\"releaseEditMode\"\r\n    v-on=\"eventStoppers()\"\r\n    @contextmenu=\"isEditMode ? openTextContextMenu($event): parentConextMenu($event)\"\r\n  >\r\n    <div\r\n      class=\"combobox\"\r\n      :style=\"boxStyleObj\"\r\n      @mousedown=\"controlEditMode\"\r\n      tabindex=\"1\"\r\n      @click=\"toFocus\"\r\n    >\r\n      <div\r\n        :class=\"properties.SelectionMargin ? 'selectionDiv' : ''\"\r\n        :style=\"selectionStyle\"\r\n      >\r\n        <span\r\n          v-if=\"properties.SelectionMargin\"\r\n          class=\"selectionSpan\"\r\n          :style=\"selectionSpanObj\"\r\n          @click=\"setSelection\"\r\n        ></span>\r\n        <textarea\r\n          data-gramm=\"false\"\r\n          ref=\"textareaRef\"\r\n          :style=\"cssStyleProperty\"\r\n          wrap=\"off\"\r\n          :tabindex=\"properties.TabIndex\"\r\n          :readonly=\"getDisableValue || properties.Style === 1\"\r\n          :maxlength=\"properties.MaxLength !== 0 ? properties.MaxLength : ''\"\r\n          @blur=\"handleBlur($event, textareaRef, hideSelectionDiv)\"\r\n          @click=\"handleClick($event, textareaRef, hideSelectionDiv)\"\r\n          @input=\"handleTextInput($event)\"\r\n          class=\"text-box-design\"\r\n          :value=\"properties.Value\"\r\n          @dragstart=\"dragBehavior\"\r\n          @keydown.enter.prevent\r\n        />\r\n        <div\r\n          ref=\"hideSelectionDiv\"\r\n          @click=\"divHide($event, textareaRef)\"\r\n          :style=\"divcssStyleProperty\"\r\n          :title=\"properties.ControlTipText\"\r\n          class=\"text-box-design\"\r\n        >\r\n          {{ properties.Value }}\r\n        </div>\r\n        <label\r\n          ref=\"autoSizeTextarea\"\r\n          class=\"labelStyle\"\r\n          :class=\"labelStyleObj\"\r\n        ></label>\r\n      </div>\r\n      <div\r\n        class=\"selected\"\r\n        @click=\"enabledCheck($event)\"\r\n        :style=\"selectedStyleObj\"\r\n      >\r\n        <div v-if=\"properties.DropButtonStyle === 1\">\r\n          <svg\r\n            version=\"1.0\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            height=\"10\"\r\n            width=\"10\"\r\n            viewBox=\"0 0 810.000000 460.000000\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n          >\r\n            <g\r\n              :fill=\"\r\n                properties.Enabled\r\n                  ? '#000000'\r\n                  : open\r\n                  ? '#000000'\r\n                  : 'rgb(190,190,190)'\r\n              \"\r\n              transform=\"translate(0.000000,460.000000) scale(0.100000,-0.100000)\"\r\n              stroke=\"none\"\r\n            >\r\n              <path\r\n                d=\"M74 4585 c-4 -8 0 -23 7 -32 8 -9 897 -1036 1977 -2282 1612 -1862\r\n          1967 -2266 1987 -2266 20 0 378 408 2005 2280 1089 1254 1979 2287 1977 2295\r\n          -2 13 -453 15 -3975 18 -3540 2 -3973 0 -3978 -13z\"\r\n              />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n        <div v-else-if=\"properties.DropButtonStyle === 2\">\r\n          <svg\r\n            version=\"1.0\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"12\"\r\n            height=\"12\"\r\n            viewBox=\"0 0 1280.000000 1024.000000\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n          >\r\n            <g\r\n              transform=\"translate(0.000000,1024.000000) scale(0.100000,-0.100000)\"\r\n              :fill=\"\r\n                properties.Enabled\r\n                  ? '#000000'\r\n                  : open\r\n                  ? '#000000'\r\n                  : 'rgb(180,180,180)'\r\n              \"\r\n              stroke=\"none\"\r\n            >\r\n              <path\r\n                d=\"M3105 4084 c-295 -66 -529 -300 -590 -592 -19 -86 -19 -238 0 -324\r\n32 -153 97 -270 217 -390 73 -73 101 -94 190 -137 58 -29 134 -58 173 -66 103\r\n-22 275 -19 368 5 218 55 400 204 497 405 59 123 80 212 80 348 0 347 -231\r\n651 -565 742 -87 24 -283 29 -370 9z\"\r\n              />\r\n              <path\r\n                d=\"M6236 4083 c-151 -32 -275 -101 -386 -213 -151 -153 -219 -324 -220\r\n-546 0 -160 45 -304 138 -441 40 -58 130 -150 188 -190 59 -42 175 -94 251\r\n-113 104 -27 281 -27 386 -1 259 67 466 267 549 531 20 65 23 95 23 225 -1\r\n137 -3 157 -28 230 -78 223 -238 396 -444 480 -132 53 -316 69 -457 38z\"\r\n              />\r\n              <path\r\n                d=\"M9370 4085 c-364 -81 -610 -385 -610 -752 0 -136 21 -225 80 -348 97\r\n-201 279 -350 497 -405 93 -24 265 -27 368 -5 39 8 115 37 173 66 89 43 117\r\n64 190 137 121 121 185 237 219 395 18 89 13 275 -11 362 -71 255 -285 469\r\n-541 540 -84 23 -282 29 -365 10z\"\r\n              />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n        <div v-else-if=\"properties.DropButtonStyle === 3\">\r\n          <svg\r\n            version=\"1.0\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"12\"\r\n            height=\"12\"\r\n            viewBox=\"0 0 1200.000000 1200.000000\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n          >\r\n            <g\r\n              transform=\"translate(0.000000,1200.000000) scale(0.100000,-0.100000)\"\r\n              :fill=\"\r\n                properties.Enabled\r\n                  ? '#000000'\r\n                  : open\r\n                  ? '#000000'\r\n                  : 'rgb(180,180,180)'\r\n              \"\r\n              stroke=\"none\"\r\n            >\r\n              <path\r\n                d=\"M0 6000 l0 -460 6000 0 6000 0 0 460 0 460 -6000 0 -6000 0 0 -460z\"\r\n              />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div class=\"items\" :class=\"{ selectHide: !open }\" :style=\"itemsStyleObj\" ref=\"itemsRef\">\r\n        <div\r\n          class=\"listStyle\"\r\n          :title=\"properties.ControlTipText\"\r\n          :style=\"listStyleObj\"\r\n          @mousedown=\"scrollingOnListItems\"\r\n        >\r\n          <div\r\n            :style=\"tableStyleObj\"\r\n            class=\"table-style\"\r\n            @click=\"tableClick\"\r\n            ref=\"comboRef\"\r\n            tabindex=\"1\"\r\n          >\r\n            <div class=\"tHeadStyle\" :style=\"tHeadStyleObj\" v-if=\"properties.ColumnHeads === true\">\r\n              <div class=\"thClass\" :style=\"colHeadsStyle\">\r\n                <template\r\n                  :style=\"tdStyleObj\"\r\n                  v-if=\"properties.ListStyle === 1 && properties.RowSource !== ''\"\r\n                  class=\"tdClass\"\r\n                ></template>\r\n                <template\r\n                  v-for=\"(a, columnIndex) in extraDatas.ColumnHeadsValues\"\r\n                >\r\n                  <div\r\n                    v-if=\"\r\n                      (properties.RowSource !== '' &&\r\n                        columnIndex < properties.ColumnCount) ||\r\n                      properties.ColumnCount === -1\r\n                    \"\r\n                    :key=\"columnIndex\"\r\n                    :style=\"updateColumnHeads(columnIndex)\"\r\n                    class=\"colHeadsClass\"\r\n                  >\r\n                    {{ a }}\r\n                  </div>\r\n                </template>\r\n                <div\r\n                  v-if=\"properties.RowSource === '' && properties.ColumnCount !== -1\"\r\n                  :style=\"emptyColHeads\"\r\n                >\r\n                <div v-if=\"properties.ListStyle === 1\" :style=\"{display:'inline-block', width:'20px'}\">\r\n                  <span class=\"bar\" :style=\"{float:'right'}\">|</span>\r\n                </div>\r\n                <div v-for=\"(a, i) in properties.ColumnCount\" :key=\"i\" :style=\"{display:'inline-block', width:'100px'}\">\r\n                  <span v-if=\"a>1\" class=\"bar\" :key=\"i\">|</span>\r\n                </div>\r\n                </div>\r\n                <div v-else-if=\"properties.ColumnCount === -1 && properties.RowSource === ''\">\r\n                <div v-for=\"i in 10\" :key=\"i\" :style=\"{display:'inline-block', width:'100px'}\">\r\n                  <span v-if=\"i < 10\" class=\"bar\" :style=\"{ float: 'right'}\" :key=\"i\">|</span>\r\n                </div>\r\n                </div>\r\n                <hr v-if=\"properties.ColumnHeads\" class=\"hrStyle\"/>\r\n              </div>\r\n            </div>\r\n            <div v-else></div>\r\n            <div\r\n              @click=\"properties.Enabled ? (open = false) : (open = true)\"\r\n              v-if=\"properties.RowSource !== ''\"\r\n            >\r\n              <div\r\n                :tabindex=\"index\"\r\n                class=\"tr\"\r\n                :disabled=\"!properties.Enabled\"\r\n                v-for=\"(item, index) of tempArray\"\r\n                :key=\"index\"\r\n                ref=\"trRef\"\r\n                @mouseenter=\"handleDrag\"\r\n                @keydown=\"handleExtendArrowKeySelect\"\r\n                @blur=\"clearMatchEntry\"\r\n                @mousedown=\"\r\n                  isRunMode || isEditMode\r\n                    ? properties.Enabled\r\n                      ? handleMultiSelect($event)\r\n                      : makeOpen()\r\n                    : ''\r\n                \"\r\n              >\r\n                <div\r\n                  :style=\"tdStyleObj\"\r\n                  class=\"tdClassIn\"\r\n                  v-if=\"\r\n                    (properties.ListStyle === 1 &&\r\n                      properties.ColumnCount > 0) ||\r\n                    (properties.ListStyle === 1 &&\r\n                      properties.ColumnCount === -1)\r\n                  \"\r\n                >\r\n                  <input name=\"radio\" type=\"radio\" class=\"inputClass\" />\r\n                </div>\r\n                <div\r\n                  class=\"column-item\"\r\n                  v-for=\"(i, index) in item\"\r\n                  :key=\"index\"\r\n                  :style=\"columnItemObj(index)\"\r\n                >\r\n                  <template\r\n                    v-if=\"\r\n                      index < properties.ColumnCount ||\r\n                      properties.ColumnCount === -1\r\n                    \"\r\n                    >{{ i }}</template\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Vue,\r\n  Prop,\r\n  Mixins,\r\n  Watch,\r\n  Ref\r\n} from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { Mutation, Action, Getter } from 'vuex-class'\r\n@Component({\r\n  name: 'FDComboBox'\r\n})\r\nexport default class FDComboBox extends Mixins(FdControlVue) {\r\n  $el!: HTMLDivElement;\r\n  @Ref('textareaRef') textareaRef: HTMLTextAreaElement;\r\n  @Ref('autoSizeTextarea') readonly autoSizeTextarea!: HTMLLabelElement;\r\n  @Ref('hideSelectionDiv') readonly hideSelectionDiv!: HTMLDivElement;\r\n  @Ref('comboRef') comboRef!: HTMLDivElement;\r\n  @Ref('itemsRef') itemsRef!: HTMLDivElement;\r\n  @Ref('trRef') trRef!: HTMLDivElement;\r\n\r\n  private tabindex = 0;\r\n  eTargetValue: string = '';\r\n  tempArray: Array<Array<string>> = [];\r\n  open: boolean = false;\r\n  multiselect = [];\r\n  selectionStart: number = 0;\r\n  selectionEnd: number = 0;\r\n  tempInputValue: string = '';\r\n  tempWidth: string = '0px';\r\n  isScrolling: boolean = false;\r\n  tempHeight: number;\r\n  inBlur: boolean = false;\r\n  headWidth: string = '100%';\r\n  controlZIndex: number = -1;\r\n  makeOpen () {\r\n    this.open = true\r\n  }\r\n\r\n  updateColumnHeads (index: number) {\r\n    const controlProp = this.properties\r\n    if (this.properties.RowSource !== '') {\r\n      return {\r\n        textAlign: controlProp.TextAlign === 0 ? 'left' : controlProp.TextAlign === 2 ? 'right' : 'center',\r\n        borderRight: index >= this.extraDatas.ColumnHeadsValues!.length - 1 ? '' : (index < controlProp.ColumnCount! - 1) ? '1px solid' : controlProp.ColumnCount === -1 ? (index < this.extraDatas.RowSourceData![0].length - 1) ? '1px solid' : '' : '',\r\n        overflow: 'hidden'\r\n      }\r\n    } else {\r\n      return {\r\n        display: 'none'\r\n      }\r\n    }\r\n  }\r\n  columnItemObj (index: number) {\r\n    const controlProp = this.properties\r\n    this.updateColumns()\r\n    return {\r\n      position: 'relative',\r\n      display: 'inline-block',\r\n      width: '100%',\r\n      textAlign: controlProp.TextAlign === 2 ? 'right' : controlProp.TextAlign === 1 ? 'center' : 'left',\r\n      overflow: 'hidden',\r\n      paddingBottom: this.data.properties.Font!.FontSize! > 48 ? '10px' : '5px'\r\n    }\r\n  }\r\n\r\n  @Watch('open')\r\n  openValidate () {\r\n    if (this.open) {\r\n      this.updateDataModelExtraData({ propertyName: 'zIndex', value: -1 })\r\n    } else {\r\n      this.updateDataModelExtraData({ propertyName: 'zIndex', value: this.controlZIndex })\r\n    }\r\n    if (this.open && this.properties.RowSource !== '') {\r\n      Vue.nextTick(() => {\r\n        this.headWidth = this.comboRef.children[1].children[0].scrollWidth + 'px'\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.ColumnWidths')\r\n  columnWidthsValidate () {\r\n    this.updateColumns()\r\n  }\r\n  @Watch('properties.ColumnCount')\r\n  columnCountValidate () {\r\n    this.updateColumns()\r\n  }\r\n  get tHeadStyleObj () {\r\n    return {\r\n      width: this.headWidth\r\n    }\r\n  }\r\n\r\n  updateColumns () {\r\n    if (this.properties.RowSource !== '') {\r\n      let finalWidths:Array<number> = []\r\n      if (this.comboRef && this.comboRef.children[0]) {\r\n        if (this.comboRef.children[0].children[0]) {\r\n          for (let j = 0; j < this.comboRef.children[0].children[0].children.length; j++) {\r\n            const headWidth = this.comboRef.children[0].children[0].children[j] as HTMLDivElement\r\n            if (this.properties.ColumnCount! === -1) {\r\n              if (j >= 0 && j < this.extraDatas.RowSourceData!.length) {\r\n                headWidth.style.minWidth = '100px'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (this.properties.ColumnWidths === '' && this.itemsRef && this.comboRef.children[1]) {\r\n        if (this.comboRef.children[1].children[0]) {\r\n          let tempWidth\r\n          if (this.properties.ColumnCount! <= this.extraDatas.RowSourceData![0].length) {\r\n            if (this.properties.Width! > 100) {\r\n              if (this.properties.ColumnCount! === -1) {\r\n                tempWidth = this.properties.Width! / this.extraDatas.RowSourceData![0].length\r\n              } else {\r\n                tempWidth = this.properties.Width! / this.properties.ColumnCount!\r\n              }\r\n            } else {\r\n              tempWidth = 100\r\n            }\r\n          } else {\r\n            if (this.properties.Width! > 100) {\r\n              tempWidth = this.properties.Width! / this.extraDatas.RowSourceData![0].length\r\n            } else {\r\n              tempWidth = 100\r\n            }\r\n          }\r\n          for (let i = 0; i < this.comboRef.children[1].children.length; i++) {\r\n            if (this.properties.ListStyle === 0) {\r\n              Vue.nextTick(() => {\r\n                if (this.comboRef && this.comboRef.children[0] && this.comboRef.children[0].children[0]) {\r\n                  for (let j = 0; j < this.comboRef.children[0].children[0].children.length; j++) {\r\n                    if (this.comboRef && this.comboRef.children[0] && this.comboRef.children[0].children[0] && this.comboRef.children[0].children[0].children[j]) {\r\n                      const headWidth = this.comboRef.children[0].children[0].children[j] as HTMLDivElement\r\n                      if (this.properties.ColumnCount !== -1) {\r\n                        if (j === this.comboRef.children[0].children[0].children.length - 1) {\r\n                          headWidth.style.width = finalWidths[j] + 'px'\r\n                        } else {\r\n                          headWidth.style.width = '100px'\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              })\r\n              for (let j = 0; j < this.comboRef.children[1].children[i].children.length; j++) {\r\n                const width = this.comboRef.children[1].children[i].children[j] as HTMLDivElement\r\n                if (this.properties.ColumnCount! === -1) {\r\n                  if (j >= 0 && j < this.extraDatas.RowSourceData!.length) {\r\n                    width.style.width = tempWidth + 'px'\r\n                  }\r\n                } else if (j + 1 > this.properties.ColumnCount!) {\r\n                  width.style.minWidth = '0px'\r\n                  width.style.width = '0px'\r\n                } else {\r\n                  if (j < this.extraDatas.RowSourceData!.length) {\r\n                    width.style.minWidth = '100px'\r\n                    width.style.width = tempWidth + 'px'\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              Vue.nextTick(() => {\r\n                if (this.comboRef && this.comboRef.children[0] && this.comboRef.children[0].children[0]) {\r\n                  for (let j = 0; j < this.comboRef.children[0].children[0].children.length; j++) {\r\n                    if (this.comboRef && this.comboRef.children[0] && this.comboRef.children[0].children[0] && this.comboRef.children[0].children[0].children[j]) {\r\n                      const headWidth = this.comboRef.children[0].children[0].children[j] as HTMLDivElement\r\n                      if (this.properties.ColumnCount !== -1) {\r\n                        if (j === this.comboRef.children[0].children[0].children.length - 1) {\r\n                          headWidth.style.width = finalWidths[j] + 'px'\r\n                        } else {\r\n                          headWidth.style.width = '100px'\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              })\r\n              for (let j = 0; j < this.comboRef.children[1].children[i].children.length; j++) {\r\n                const width = this.comboRef.children[1].children[i].children[j] as HTMLDivElement\r\n                if (this.properties.ColumnCount! === -1) {\r\n                  if (j >= 0 && j < this.extraDatas.RowSourceData!.length) {\r\n                    width.style.width = '100px'\r\n                  }\r\n                } else if (j === 1 && this.properties.ColumnCount! === 1) {\r\n                  width.style.width = this.properties.Width + 'px'\r\n                } else if (j > this.properties.ColumnCount!) {\r\n                  width.style.minWidth = '0px'\r\n                  width.style.width = '0px'\r\n                } else {\r\n                  if (j < this.extraDatas.RowSourceData!.length) {\r\n                    width.style.minWidth = '100px'\r\n                    width.style.width = (parseInt(this.itemsRef.style.width) / this.properties.ColumnCount!) + 'px'\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (this.itemsRef && this.comboRef.children[1]) {\r\n        finalWidths = this.calculateColumnWidths()\r\n        if (this.comboRef.children[1].children[0]) {\r\n          for (let i = 0; i < this.comboRef.children[1].children.length; i++) {\r\n            if (this.properties.ListStyle === 0) {\r\n              for (let j = 0; j < this.comboRef.children[1].children[i].children.length; j++) {\r\n                const width = this.comboRef.children[1].children[i].children[j] as HTMLDivElement\r\n                if (j >= this.properties.ColumnCount! && this.properties.ColumnCount !== -1) {\r\n                  width.style.display = 'none'\r\n                } else {\r\n                  width.style.display = 'inline-block'\r\n                  if (this.properties.ColumnCount === 1) {\r\n                    if (this.properties.Width! > finalWidths[0]) {\r\n                      width.style.width = this.properties.Width! + 'px'\r\n                    } else {\r\n                      width.style.width = finalWidths[0] + 'px'\r\n                    }\r\n                  } else {\r\n                    width.style.minWidth = '0px'\r\n                    width.style.width = finalWidths[j] + 'px'\r\n                  }\r\n                }\r\n                if (this.comboRef && this.comboRef.children[0] && this.comboRef.children[0].children[0] && this.comboRef.children[0].children[0].children[j]) {\r\n                  const headWidth = this.comboRef.children[0].children[0].children[j] as HTMLDivElement\r\n                  if (this.properties.ColumnCount === -1) {\r\n                    headWidth.style.display = 'inline-block'\r\n                    headWidth.style.minWidth = '0px'\r\n                    headWidth.style.width = finalWidths[j] + 'px'\r\n                  } else if (j >= this.properties.ColumnCount!) {\r\n                    headWidth.style.display = 'none'\r\n                  } else {\r\n                    headWidth.style.display = 'inline-block'\r\n                    if (this.properties.ColumnCount === 1) {\r\n                      if (this.properties.Width! > finalWidths[0]) {\r\n                        headWidth.style.width = this.properties.Width! + 'px'\r\n                      } else {\r\n                        headWidth.style.width = finalWidths[0] + 'px'\r\n                      }\r\n                    } else {\r\n                      headWidth.style.width = finalWidths[j] + 'px'\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              for (let j = 0; j < this.comboRef.children[1].children[i].children.length; j++) {\r\n                const width = this.comboRef.children[1].children[i].children[j] as HTMLDivElement\r\n                if (j > 0) {\r\n                  if (j > this.properties.ColumnCount! && j > this.extraDatas.RowSourceData!.length - 1) {\r\n                    width.style.display = 'none'\r\n                  } else {\r\n                    width.style.display = 'inline-block'\r\n                    if (this.properties.ColumnCount === 1) {\r\n                      if (this.properties.Width! > finalWidths[0]) {\r\n                        width.style.width = this.properties.Width! + 'px'\r\n                      } else {\r\n                        width.style.width = finalWidths[0] + 'px'\r\n                      }\r\n                    } else {\r\n                      width.style.minWidth = '0px'\r\n                      width.style.width = finalWidths[j - 1] + 'px'\r\n                    }\r\n                  }\r\n                  if (this.comboRef && this.comboRef.children[0] && this.comboRef.children[0].children[0] && this.comboRef.children[0].children[0].children[j]) {\r\n                    const headWidth = this.comboRef.children[0].children[0].children[j] as HTMLDivElement\r\n                    if (this.properties.ColumnCount === -1) {\r\n                      headWidth.style.display = 'inline-block'\r\n                      headWidth.style.minWidth = '0px'\r\n                      headWidth.style.width = finalWidths[j] + 'px'\r\n                    } else if (j >= this.properties.ColumnCount!) {\r\n                      headWidth.style.display = 'none'\r\n                    } else {\r\n                      headWidth.style.display = 'inline-block'\r\n                      if (this.properties.ColumnCount === 1) {\r\n                        if (this.properties.Width! > finalWidths[0]) {\r\n                          headWidth.style.width = this.properties.Width! + 'px'\r\n                        } else {\r\n                          headWidth.style.width = finalWidths[0] + 'px'\r\n                        }\r\n                      } else {\r\n                        headWidth.style.width = finalWidths[j] + 'px'\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.headWidth = '100%'\r\n    }\r\n  }\r\n\r\n  calculateColumnWidths () {\r\n    let a = (this.properties.ColumnWidths!.split(';'))\r\n    let b = []\r\n    let temp = 0\r\n    let totalWidth = this.properties.Width!\r\n    let totalColumnWidths = 0\r\n    let colWidths = this.properties.ColumnWidths!\r\n    let columnWidthCount = colWidths.split(';').length\r\n    let totalColumnCount = this.properties.ColumnCount! < this.extraDatas.RowSourceData![0].length ? this.properties.ColumnCount! : this.extraDatas.RowSourceData![0].length\r\n    let widths = []\r\n    let finalWidths:Array<number> = []\r\n    let lastColumWidth = 0\r\n    if (this.properties.ColumnCount === -1) {\r\n      if (columnWidthCount >= this.extraDatas.RowSourceData![0].length) {\r\n        for (let i = 0; i < this.extraDatas.RowSourceData![0].length; i++) {\r\n          if (i < this.extraDatas.RowSourceData![0].length) {\r\n            let tempWidth = parseInt(colWidths.split(';')[i], 10)\r\n            totalColumnWidths += tempWidth\r\n            widths.push(tempWidth)\r\n          }\r\n        }\r\n      } else {\r\n        let count = 0\r\n        let colWidthCalculatedCount = 0\r\n        let colWidth = 0\r\n        for (let i = 0; i < this.extraDatas.RowSourceData![0].length; i++) {\r\n          if (i < columnWidthCount) {\r\n            widths.push(parseInt(colWidths.split(';')[i], 10))\r\n            count = count + 1\r\n            totalColumnWidths += parseInt(colWidths.split(';')[i], 10)\r\n          } else {\r\n            if (totalWidth > totalColumnWidths) {\r\n              colWidthCalculatedCount = colWidthCalculatedCount + 1\r\n              if (colWidthCalculatedCount === 1) {\r\n                colWidth = ((totalWidth - totalColumnWidths) / (this.extraDatas.RowSourceData![0].length - count))\r\n              }\r\n              widths.push(colWidth)\r\n              totalColumnWidths += colWidth\r\n            } else {\r\n              widths.push(100)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (totalWidth > totalColumnWidths) {\r\n        for (let i = 0; i < widths.length; i++) {\r\n          if (widths.length - 1 !== i) {\r\n            lastColumWidth = totalWidth - widths[i]!\r\n            finalWidths.push(widths[i])\r\n            totalWidth = lastColumWidth\r\n          } else {\r\n            finalWidths.push(lastColumWidth)\r\n          }\r\n        }\r\n      } else if (totalWidth <= totalColumnWidths) {\r\n        for (let j = 0; j < widths.length; j++) {\r\n          finalWidths.push(widths[j])\r\n        }\r\n      }\r\n    } else {\r\n      if (columnWidthCount >= totalColumnCount) {\r\n        for (let i = 0; i < totalColumnCount; i++) {\r\n          if (i < this.properties.ColumnCount!) {\r\n            let tempWidth = parseInt(colWidths.split(';')[i], 10)\r\n            totalColumnWidths += tempWidth\r\n            widths.push(tempWidth)\r\n          }\r\n        }\r\n      } else {\r\n        let count = 0\r\n        let colWidthCalculatedCount = 0\r\n        let colWidth = 0\r\n        for (let i = 0; i < totalColumnCount; i++) {\r\n          if (i < columnWidthCount) {\r\n            widths.push(parseInt(colWidths.split(';')[i], 10))\r\n            count = count + 1\r\n            totalColumnWidths += parseInt(colWidths.split(';')[i], 10)\r\n          } else {\r\n            if (totalWidth > totalColumnWidths) {\r\n              colWidthCalculatedCount = colWidthCalculatedCount + 1\r\n              if (colWidthCalculatedCount === 1) {\r\n                colWidth = ((totalWidth - totalColumnWidths) / (totalColumnCount - count))\r\n              }\r\n              widths.push(colWidth)\r\n              totalColumnWidths += colWidth\r\n            } else {\r\n              widths.push(100)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (totalWidth > totalColumnWidths) {\r\n        for (let i = 0; i < widths.length; i++) {\r\n          if (widths.length - 1 !== i) {\r\n            lastColumWidth = totalWidth - widths[i]!\r\n            finalWidths.push(widths[i])\r\n            totalWidth = lastColumWidth\r\n          } else {\r\n            finalWidths.push(lastColumWidth)\r\n          }\r\n        }\r\n      } else if (totalWidth <= totalColumnWidths) {\r\n        for (let j = 0; j < widths.length; j++) {\r\n          finalWidths.push(widths[j])\r\n        }\r\n      }\r\n    }\r\n    return finalWidths\r\n  }\r\n  get getDisableValue () {\r\n    if (this.isRunMode || this.isEditMode) {\r\n      return this.properties.Enabled === false || this.properties.Locked\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  get emptyColHeads () {\r\n    return {\r\n      height: '15px'\r\n    }\r\n  }\r\n  updateColumnValue (index: number) {\r\n    return this.updateColumnWidths(index, this.tempHeight)\r\n  }\r\n\r\n  get selectionStyle () {\r\n    const controlProp = this.properties\r\n    return {\r\n      borderLeft:\r\n        controlProp.BorderStyle === 1\r\n          ? '1px solid ' + controlProp.BorderColor\r\n          : controlProp.SpecialEffect === 2\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 3\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 4\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      borderTop:\r\n        controlProp.BorderStyle === 1\r\n          ? '0.25px solid ' + controlProp.BorderColor\r\n          : controlProp.SpecialEffect === 2\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 3\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 4\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      borderBottom: controlProp.BorderStyle === 1\r\n        ? '0.25px solid ' + controlProp.BorderColor : ''\r\n\r\n    }\r\n  }\r\n\r\n  toFocus () {\r\n    if (this.isEditMode) {\r\n      this.isVisible = true\r\n    } else {\r\n      this.isVisible = false\r\n    }\r\n  }\r\n  tableClick (e: Event) {\r\n    this.tempListBoxComboBoxEvent = e\r\n  }\r\n\r\n  @Watch('properties.Font.FontSize', { deep: true })\r\n  autoSizeValidateOnFontChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n\r\n  @Watch('properties.RowSource')\r\n  rowSourceValidate () {\r\n    if (this.properties.RowSource !== '') {\r\n      Vue.nextTick(() => {\r\n        this.updateColumns()\r\n      })\r\n      const initialRowSourceData = this.extraDatas.RowSourceData!\r\n      if (initialRowSourceData) {\r\n        this.tempArray = initialRowSourceData\r\n      }\r\n      this.updateDataModel({ propertyName: 'ControlSource', value: '' })\r\n      if (initialRowSourceData && initialRowSourceData.length === 0) {\r\n        this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\r\n      } else {\r\n        this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\r\n      }\r\n    } else {\r\n      this.headWidth = '100%'\r\n    }\r\n  }\r\n\r\n  handleTextInput (e: Event) {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n    if (e.target instanceof HTMLTextAreaElement) {\r\n      const tempEvent = e.target\r\n      this.eTargetValue = e.target.value\r\n      this.updateDataModel({ propertyName: 'Value', value: this.eTargetValue })\r\n      this.updateDataModel({ propertyName: 'Text', value: this.eTargetValue })\r\n      if (this.properties.RowSource !== '') {\r\n        if (this.properties.MatchEntry !== 0) {\r\n          this.textareaRef.focus()\r\n        }\r\n        if (this.properties.MatchEntry === 0) {\r\n          for (let i = 0; i < this.tempArray.length; i++) {\r\n            if (this.tempArray[i][0][0] === this.textareaRef.value[0]) {\r\n              this.textareaRef.value = this.tempArray[i][0]\r\n              this.updateDataModel({\r\n                propertyName: 'Text',\r\n                value: this.tempArray[i][0]\r\n              })\r\n              break\r\n            }\r\n          }\r\n          this.textareaRef.setSelectionRange(\r\n            0,\r\n            this.textareaRef.value.length,\r\n            'forward'\r\n          )\r\n        }\r\n      } else {\r\n        this.tempArray = []\r\n      }\r\n    } else {\r\n      throw new Error('target is not instance of div element')\r\n    }\r\n  }\r\n\r\n  setSelection () {\r\n    const setSelectionRef = this.textareaRef\r\n    setSelectionRef.focus()\r\n    setSelectionRef.select()\r\n  }\r\n  clearMatchEntry () {\r\n    this.updateDataModelExtraData({ propertyName: 'MatchData', value: '' })\r\n  }\r\n\r\n  protected get selectionSpanObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      backgroundColor: controlProp.BackStyle\r\n        ? controlProp.BackColor\r\n        : 'transparent'\r\n    }\r\n  }\r\n\r\n  protected get colHeadsStyle (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      backgroundColor: controlProp.BackColor,\r\n      width: '100%'\r\n    }\r\n  }\r\n\r\n  scrollingOnListItems (e: Event) {\r\n    this.isScrolling = true\r\n  }\r\n  /**\r\n   * @description  show selection when TextBox loses focus\r\n   * when HideSelection is false selection is show if user selects any text\r\n   * @function handleBlur\r\n   * @event blur\r\n   *\r\n   */\r\n  handleBlur (\r\n    event: TextEvent,\r\n    textareaRef: HTMLTextAreaElement,\r\n    hideSelectionDiv: HTMLDivElement\r\n  ) {\r\n    this.inBlur = false\r\n    if (this.isScrolling) {\r\n      this.open = true\r\n      this.textareaRef.focus()\r\n    } else if (this.open) {\r\n      this.inBlur = true\r\n      this.open = false\r\n    }\r\n    this.isScrolling = false\r\n    if (this.properties.ShowDropButtonWhen === 1) {\r\n      this.isVisible = false\r\n    }\r\n    if (\r\n      this.properties.EnterFieldBehavior === 1 &&\r\n      event.target instanceof HTMLTextAreaElement\r\n    ) {\r\n      const eventTarget = event.target\r\n      let tempField = this.tempInputValue.slice(\r\n        eventTarget.selectionStart - eventTarget.selectionEnd\r\n      )\r\n      this.selectionStart = eventTarget.selectionStart\r\n      this.selectionEnd = eventTarget.selectionEnd\r\n    }\r\n    if (\r\n      !this.properties.HideSelection &&\r\n      textareaRef &&\r\n      event.target instanceof HTMLTextAreaElement\r\n    ) {\r\n      const eventTarget = event.target\r\n\r\n      hideSelectionDiv.style.display = 'block'\r\n      hideSelectionDiv.style.height = this.properties.Height! + 'px'\r\n      hideSelectionDiv.style.width = this.properties.Width! + 'px'\r\n      textareaRef.style.display = 'none'\r\n      let textarea = eventTarget.value\r\n      let firstPart =\r\n        textarea.slice(0, eventTarget.selectionEnd) +\r\n        '</span>' +\r\n        textarea.slice(eventTarget.selectionEnd + Math.abs(0))\r\n      let text =\r\n        firstPart.slice(0, eventTarget.selectionStart) +\r\n        \"<span style='background-color:lightblue'>\" +\r\n        firstPart.slice(eventTarget.selectionStart + Math.abs(0))\r\n      hideSelectionDiv.innerHTML = text\r\n    }\r\n    if (this.properties.MatchRequired && textareaRef) {\r\n      const arrayCheck = this.extraDatas.RowSourceData!.findIndex(\r\n        (element) => element[0] === this.tempInputValue\r\n      )\r\n      if (arrayCheck === -1) {\r\n        this.textareaRef.focus()\r\n      } else {\r\n        return undefined\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   *@description hides the div when focus comes to textarea when hideSelection\r\n   * properties is false\r\n   * @function handleClick\r\n   * @param event its of FocusEvent\r\n   * @event click\r\n   */\r\n  handleClick (\r\n    event: TextEvent,\r\n    textareaRef: HTMLTextAreaElement,\r\n    hideSelectionDiv: HTMLDivElement\r\n  ) {\r\n    if (!this.properties.HideSelection) {\r\n      hideSelectionDiv.style.display = 'none'\r\n    } else {\r\n      return undefined\r\n    }\r\n    if (this.properties.EnterFieldBehavior === 0) {\r\n      this.textareaRef.focus()\r\n      this.textareaRef.select()\r\n    } else if (this.properties.EnterFieldBehavior === 1) {\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n  /**\r\n   * @description hides div instead of textarea when hideSelection is false\r\n   * when hideSelection properties is true textarea is shown\r\n   * when hideSelection properties is false div is shown\r\n   * @function divHide\r\n   * @param event its of type MouseEvent\r\n   * @event click\r\n   */\r\n  divHide (event: MouseEvent, textareaRef: HTMLTextAreaElement) {\r\n    if (\r\n      event.target instanceof HTMLSpanElement ||\r\n      event.target instanceof HTMLDivElement\r\n    ) {\r\n      event.target.style.display = 'none'\r\n      textareaRef.style.display = 'block'\r\n      if (\r\n        event.target.tagName === 'SPAN' &&\r\n        event.target.parentNode!.nodeName === 'DIV'\r\n      ) {\r\n        (event.target.parentNode as HTMLElement).style.display = 'none'\r\n      }\r\n      textareaRef.focus()\r\n      textareaRef.selectionStart = textareaRef.selectionEnd\r\n    } else {\r\n      throw new Error('event.target is not an instance of Span or Div Element')\r\n    }\r\n  }\r\n  /**\r\n   * @description dragBehavior - if true when dragging\r\n   *  if false the cursor remains in same place\r\n   * @function dragBehavior\r\n   * @param event its of type KeyboardEvent\r\n   * @event dragStart\r\n   */\r\n  dragBehavior (e: Event) {\r\n    if (this.properties.DragBehavior) {\r\n      return true\r\n    }\r\n    e.preventDefault()\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  @Watch('properties.AutoSize', { deep: true })\r\n  updateAutoSize () {\r\n    if (this.properties.AutoSize === true) {\r\n      this.updateDataModel({ propertyName: 'SelectionMargin', value: false })\r\n      this.$nextTick(() => {\r\n        const textareaRef: HTMLTextAreaElement = this.textareaRef\r\n        // replication of stype attribute to Label tag for autoSize property to work\r\n        let tempLabel: HTMLLabelElement = this.autoSizeTextarea\r\n        tempLabel.style.display = 'inline'\r\n        tempLabel.style.fontStyle = textareaRef.style.fontStyle\r\n        tempLabel.style.fontSize = parseInt(textareaRef.style.fontSize) + 'px'\r\n        tempLabel.style.whiteSpace = textareaRef.style.whiteSpace\r\n        tempLabel.style.wordBreak = textareaRef.style.wordBreak\r\n        tempLabel.style.fontWeight = textareaRef.style.fontWeight\r\n        tempLabel.style.width =\r\n          (this.textareaRef.value.length + 1) *\r\n            parseInt(textareaRef.style.fontSize) +\r\n          'px'\r\n        tempLabel.style.height = textareaRef.style.height\r\n        tempLabel.innerText = textareaRef.value\r\n        this.updateDataModel({\r\n          propertyName: 'Width',\r\n          value:\r\n            tempLabel.offsetWidth > 20\r\n              ? tempLabel.offsetWidth + 21\r\n              : tempLabel.offsetWidth + 25\r\n        })\r\n        this.updateDataModel({\r\n          propertyName: 'Height',\r\n          value: tempLabel.offsetHeight + 15\r\n        })\r\n        tempLabel.innerText = ''\r\n        tempLabel.style.display = 'none'\r\n        this.selectionData[0] = this.eTargetValue\r\n      })\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  protected get listStyleObj () {\r\n    const controlProp = this.properties\r\n    if (this.properties.RowSource !== '') {\r\n      return {\r\n        height: !controlProp.ColumnHeads\r\n          ? controlProp.ListRows! > 0 &&\r\n            controlProp.ListRows! < this.extraDatas.RowSourceData!.length\r\n            ? controlProp.ListRows! * (controlProp.Font!.FontSize! + 9) + 'px'\r\n            : ''\r\n          : controlProp.ListRows! > 0 &&\r\n            controlProp.ListRows! < this.extraDatas.RowSourceData!.length\r\n            ? (controlProp.ListRows! + 1) * (controlProp.Font!.FontSize! + 9) +\r\n            'px'\r\n            : '',\r\n        backgroundColor: controlProp.BackColor\r\n      }\r\n    } else {\r\n      return {\r\n        backgroundColor: controlProp.BackColor,\r\n        border: '1px solid black',\r\n        width: 'calc(100% - 2px)',\r\n        height: 'calc(100% - 2px)',\r\n        minWidth: '100px'\r\n      }\r\n    }\r\n  }\r\n\r\n  protected get tableStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 20,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true\r\n      }\r\n    return {\r\n      borderCollapse: 'collapse',\r\n      tableLayout: 'fixed',\r\n      backgroundColor: controlProp.BackStyle\r\n        ? controlProp.BackColor\r\n        : 'transparent',\r\n      color: controlProp.ForeColor,\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      textUnderlinePosition: 'under',\r\n      fontWeight: font.FontBold\r\n        ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\r\n      width: 'calc(100% - 2px)',\r\n      outline: 'none'\r\n    }\r\n  }\r\n\r\n  protected get cssStyleProperty (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 20,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true\r\n      }\r\n    return {\r\n      left: `${controlProp.Left}px`,\r\n      width:\r\n        controlProp.ShowDropButtonWhen === 0\r\n          ? `${controlProp.Width! - 4}px`\r\n          : controlProp.ShowDropButtonWhen === 1 && this.isVisible === false\r\n            ? `${controlProp.Width! - 4}px`\r\n            : controlProp.SelectionMargin\r\n              ? `${controlProp.Width! - 30}px`\r\n              : `${controlProp.Width! - 25}px`,\r\n      height: `${controlProp.Height! - 5}px`,\r\n      top: `${controlProp.Top}px`,\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      textUnderlinePosition: 'under',\r\n      fontWeight: font.FontBold\r\n        ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\r\n      backgroundColor: controlProp.BackStyle\r\n        ? controlProp.BackColor\r\n        : 'transparent',\r\n      color: controlProp.ForeColor,\r\n      textAlign:\r\n        controlProp.TextAlign === 0\r\n          ? 'left'\r\n          : controlProp.TextAlign === 1\r\n            ? 'center'\r\n            : 'right',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.isEditMode || !this.isActivated\r\n            ? this.getMouseCursorData\r\n            : 'default'\r\n          : 'default'\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on cssStyleProperty of\r\n   * textarea\r\n   * @function divcssStyleProperty\r\n   *\r\n   */\r\n  get divcssStyleProperty () {\r\n    const styleObject = this.cssStyleProperty\r\n    return {\r\n      ...styleObject,\r\n      display: 'none',\r\n      whiteSpace: 'break-spaces',\r\n      width: `${this.properties.Width! - 10}px`,\r\n      height: `${this.properties.Height!}px`\r\n    }\r\n  }\r\n\r\n  protected get customSelectObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'inline-block' : 'none'\r\n    } else {\r\n      display = 'inline-block'\r\n    }\r\n    return {\r\n      display: display\r\n    }\r\n  }\r\n  protected get tdStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      textAlign:\r\n        controlProp.TextAlign === 0\r\n          ? 'left'\r\n          : controlProp.TextAlign === 2\r\n            ? 'right'\r\n            : 'center',\r\n      display: 'inline-block',\r\n      marginRight: controlProp.ListStyle === 1 ? '5px' : ''\r\n    }\r\n  }\r\n  setWidth () {\r\n    this.tempWidth = `${this.properties.Width! + 20}px`\r\n    return this.tempWidth\r\n  }\r\n  @Watch('properties.Value', { deep: true })\r\n  textAndValueUpdateProp (newVal: string, oldVal: string) {\r\n    if (this.properties.RowSource !== '') {\r\n      if (\r\n        this.properties.BoundColumn! > 0 &&\r\n        this.properties.BoundColumn! < this.extraDatas.RowSourceData!.length\r\n      ) {\r\n        let tempData = [...this.extraDatas.RowSourceData!]\r\n        if (tempData![0][this.properties.BoundColumn! - 1] === newVal) {\r\n          this.updateDataModel({ propertyName: 'Value', value: newVal })\r\n        } else {\r\n          if (newVal !== '' && this.properties.Value) {\r\n            this.updateDataModel({ propertyName: 'Text', value: newVal })\r\n          }\r\n        }\r\n      }\r\n      if (newVal !== '' && this.properties.Value) {\r\n        this.selectionData[0] = newVal\r\n        this.updateDataModel({ propertyName: 'Text', value: newVal })\r\n      }\r\n    } else {\r\n      if (newVal !== '') {\r\n        this.updateDataModel({ propertyName: 'Text', value: newVal })\r\n      }\r\n    }\r\n  }\r\n\r\n  @Watch('properties.SelectionMargin', { deep: true })\r\n  checkSelectionMargin (newVal: boolean, oldVal: boolean) {\r\n    this.selectionData[0] = this.eTargetValue\r\n  }\r\n  releaseEditMode (event: KeyboardEvent) {\r\n    this.$el.focus()\r\n    this.setContentEditable(event, false)\r\n  }\r\n\r\n  @Watch('properties.ListStyle')\r\n  listStyleValidate () {\r\n    this.updateColumns()\r\n  }\r\n\r\n  @Watch('data.extraDatas.zIndex')\r\n  setLocalZIndex () {\r\n    this.controlZIndex = this.data.extraDatas!.zIndex!\r\n  }\r\n\r\n  mounted () {\r\n    this.controlZIndex = this.data.extraDatas!.zIndex!\r\n    this.$el.focus()\r\n    if (this.properties.RowSource !== '') {\r\n      const initialRowSourceData = this.extraDatas.RowSourceData!\r\n      if (initialRowSourceData) {\r\n        this.tempArray = initialRowSourceData\r\n      }\r\n      this.updateDataModel({ propertyName: 'ControlSource', value: '' })\r\n      if (initialRowSourceData && initialRowSourceData.length === 0) {\r\n        this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\r\n      } else {\r\n        this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\r\n      }\r\n    }\r\n  }\r\n\r\n  @Watch('properties.ControlSource', { deep: true })\r\n  updateControlSourceValue (newVal: string, oldVal: string) {\r\n    const propData: controlData = this.data\r\n    if (propData.properties.ControlSource !== '') {\r\n      const controlSourceValue = propData.extraDatas!.ControlSourceValue\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: controlSourceValue\r\n      })\r\n      this.updateDataModel({ propertyName: 'Text', value: controlSourceValue })\r\n    } else {\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: ''\r\n      })\r\n      this.updateDataModel({ propertyName: 'Text', value: '' })\r\n    }\r\n  }\r\n  expandWidth () {\r\n    if (this.properties.ShowDropButtonWhen === 0) {\r\n      return 'hidden'\r\n    } else if (this.properties.ShowDropButtonWhen === 1) {\r\n      if (this.isVisible) {\r\n        return 'visible'\r\n      } else {\r\n        return 'hidden'\r\n      }\r\n    }\r\n  }\r\n\r\n  protected get labelStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 20,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true\r\n      }\r\n    return {\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      fontWeight: font.FontBold\r\n        ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : ''\r\n    }\r\n  }\r\n\r\n  protected get boxStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\r\n      borderRight:\r\n        controlProp.BorderStyle === 1\r\n          ? 'none'\r\n          : controlProp.SpecialEffect === 1\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 4\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 3\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      borderBottom:\r\n        controlProp.BorderStyle === 1\r\n          ? 'none'\r\n          : controlProp.SpecialEffect === 1\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 4\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 3\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      display: 'grid',\r\n      gridTemplateColumns: `${controlProp.Width! - 20}px` + ' 21px',\r\n      gridTemplateRows: `${controlProp.Height! + 1}px`,\r\n      outline: 'none'\r\n    }\r\n  }\r\n\r\n  protected get itemsStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      width:\r\n        parseInt(controlProp.ListWidth!) > 0\r\n          ? parseInt(controlProp.ListWidth!) + 'px'\r\n          : this.setdropDownWidth,\r\n      height:\r\n        controlProp.RowSource !== ''\r\n          ? ''\r\n          : controlProp.ColumnHeads\r\n            ? '30px'\r\n            : '15px',\r\n      border: controlProp.RowSource !== '' ? '1px solid black' : 'none',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.isEditMode || !this.isActivated\r\n            ? this.getMouseCursorData\r\n            : 'default'\r\n          : 'default',\r\n      position: 'relative',\r\n      zIndex: '999'\r\n    }\r\n  }\r\n\r\n  get setdropDownWidth () {\r\n    if (this.properties.Width! < 100) {\r\n      return '100px'\r\n    } else {\r\n      return `${this.properties.Width!}px`\r\n    }\r\n  }\r\n\r\n  protected get selectedStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      visibility:\r\n        controlProp.ShowDropButtonWhen === 2 ? 'visible' : this.expandWidth(),\r\n      backgroundPosition:\r\n        controlProp.DropButtonStyle === 1 ? 'center' : 'bottom',\r\n      backgroundSize:\r\n        controlProp.DropButtonStyle === 1\r\n          ? '12px 12px'\r\n          : controlProp.DropButtonStyle === 2\r\n            ? '8px 8px'\r\n            : controlProp.DropButtonStyle === 3\r\n              ? '9px 14px'\r\n              : '',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.isEditMode || !this.isActivated\r\n            ? this.getMouseCursorData\r\n            : 'default'\r\n          : 'default',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: controlProp.DropButtonStyle === 1 ? 'center' : 'flex-end',\r\n      borderTop: '1px solid' + controlProp.BorderColor,\r\n      borderRight: '1px solid' + controlProp.BorderColor,\r\n      borderBottom: '1px solid' + controlProp.BorderColor\r\n    }\r\n  }\r\n  enabledCheck (e: MouseEvent) {\r\n    if (this.isRunMode || this.isActivated || this.isEditMode) {\r\n      if (this.open) {\r\n        this.textareaRef.focus()\r\n        this.open = false\r\n      } else if (this.inBlur) {\r\n        this.open = false\r\n      } else {\r\n        this.open = true\r\n        this.textareaRef.focus()\r\n      }\r\n    }\r\n    this.inBlur = false\r\n  }\r\n\r\n  eventStoppers () {\r\n    const eventStop = (event: Event) => event.stopPropagation()\r\n    return this.isEditMode === false\r\n      ? null\r\n      : {\r\n        keydown: eventStop\r\n      }\r\n  }\r\n  comBoxClick (event: MouseEvent) {\r\n    if (this.toolBoxSelectControl === 'Select') {\r\n      event.stopPropagation()\r\n      this.selectedItem(event)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.custom-select {\r\n  position: relative;\r\n  text-align: left;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n}\r\n.selectionSpan {\r\n  width: 5px;\r\n}\r\n.selectionDiv {\r\n  display: grid;\r\n  grid-template-columns: 5px auto;\r\n}\r\n.selected {\r\n  background-color: rgb(238, 238, 238);\r\n  border: 1px solid #858586;\r\n  border-left: 0px;\r\n  color: black;\r\n  background-size: 40%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n  width: 20px;\r\n  height: calc(100% - 2px);\r\n}\r\n\r\n.items {\r\n  color: black;\r\n  background-color: white;\r\n  overflow: hidden;\r\n  left: 0;\r\n  right: 0;\r\n  width: calc(100% + 20px);\r\n  cursor: context-menu;\r\n}\r\n.item {\r\n  color: black;\r\n  cursor: pointer;\r\n  border-left: 1px solid black;\r\n  border-right: 1px solid black;\r\n}\r\n.item:hover {\r\n  background-color: #0380fc;\r\n  color: white;\r\n  border: 1px dotted black;\r\n}\r\n.selectHide {\r\n  display: none;\r\n}\r\n.combobox {\r\n  display: grid;\r\n  grid-template-columns: auto 20px;\r\n}\r\n.columnHeads {\r\n  height: 19.2px;\r\n  border: 1px solid black;\r\n  border-top: 0px;\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n}\r\n.listStyle {\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: lightgray;\r\n  border: 1px solid gray;\r\n  overflow: auto;\r\n}\r\n.list-outer {\r\n  border: 0.1px solid lightgray;\r\n  width: 164px;\r\n  height: 130px;\r\n  overflow-y: auto;\r\n  box-shadow: -1px -1px grey;\r\n}\r\n.tr {\r\n  outline: none;\r\n  display: inline-flex;\r\n}\r\n.tr:hover:not([disabled]) {\r\n  background-color: rgb(59, 122, 231);\r\n}\r\n.ul {\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n  list-style-type: none;\r\n  margin-block-start: 0em;\r\n  margin-block-end: 0em;\r\n  margin-inline-start: 0px;\r\n  margin-inline-end: 0px;\r\n  padding-inline-start: 0px;\r\n}\r\n.li {\r\n  margin: 1px;\r\n  text-align: left;\r\n  font-size: 14px;\r\n  height: 16px;\r\n  border: 0.5px solid white;\r\n  cursor: pointer;\r\n}\r\n.li:hover {\r\n  margin: 1px;\r\n  border-color: rgb(52, 52, 255);\r\n  border-radius: 2px;\r\n  background-color: rgb(59, 122, 231);\r\n}\r\n.fa {\r\n  margin-left: 4px;\r\n  margin-top: 3px;\r\n}\r\n.span {\r\n  margin-left: 7px;\r\n  margin-top: 0px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n.labelStyle {\r\n  white-space: nowrap;\r\n}\r\n.div {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n}\r\n.listbox {\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n  height: 100px;\r\n  width: 300px;\r\n  background-color: lightgray;\r\n  border: 1px solid gray;\r\n}\r\n.columnHeads {\r\n  height: 19.2px;\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n}\r\n.optionsItems {\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n}\r\n.text-box-design {\r\n  resize: none;\r\n  overflow: hidden;\r\n  border: none;\r\n  font-family: monospace;\r\n}\r\n.text-box-design:focus {\r\n  outline: none;\r\n}\r\n.text-box-design::selection {\r\n  background: lightblue;\r\n}\r\n.table-style {\r\n  width: calc(100% - 2px);\r\n}\r\n.thClass {\r\n  position: sticky;\r\n  top: 0;\r\n  overflow: hidden;\r\n  text-decoration: underline;\r\n  white-space: nowrap;\r\n}\r\n.tdClass {\r\n  width: 15px;\r\n  border-right: 1px solid;\r\n}\r\n.tdClassIn {\r\n  width: 10px;\r\n  max-width: 10px !important;\r\n  min-width: 0px !important;\r\n}\r\n.inputClass {\r\n  margin: 0;\r\n}\r\n.hrStyle {\r\n  display: block !important;\r\n  margin: 0px;\r\n  width: 100% !important;\r\n}\r\n.forPlain {\r\n  background-image: none;\r\n}\r\n.tHeadStyle {\r\n  position: sticky;\r\n  top: 0px;\r\n  z-index: 1;\r\n}\r\n.column-item {\r\n  display: flex;\r\n}\r\n.colHeadsClass {\r\n  display: inline-block;\r\n}\r\n.bar {\r\n  font-size: 13px;\r\n  color: black;\r\n}\r\n</style>\r\n"]}]}