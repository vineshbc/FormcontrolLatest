{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDMultiPage/index.vue?vue&type=style&index=0&id=032be1c4&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDMultiPage/index.vue","mtime":1612288570000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5vdXRlci1wYWdlIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzOCwgMjM4LCAyMzgpOw0KICBvdmVyZmxvdy15OiBoaWRkZW47DQogIG92ZXJmbG93LXg6IGhpZGRlbjsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgd2lkdGg6IDBweDsNCiAgaGVpZ2h0OiAwcHg7DQogIGxlZnQ6IDBweDsNCiAgdG9wOiAwcHg7DQogIGN1cnNvcjogZGVmYXVsdDsNCiAgcG9zaXRpb246IHN0aWNreTsNCn0NCi5wYWdlcyB7DQogIC8qIGRpc3BsYXk6IGdyaWQ7ICovDQogIG1hcmdpbjogMDsNCiAgLyogd2lkdGg6IGNhbGMoMTAwJSk7DQogIGhlaWdodDogY2FsYygxMDAlKTsgKi8NCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsNCiAgb3ZlcmZsb3cteDogaGlkZGVuOw0KICBvdmVyZmxvdy15OiBoaWRkZW47DQp9DQoubGVmdC1idXR0b24gew0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIG91dGxpbmU6IG5vbmU7DQogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vLi4vLi4vLi4vYXNzZXRzL2xlZnQtYXJyb3ctaW1nLnBuZyIpOw0KICBiYWNrZ3JvdW5kLXNpemU6IDMwJTsNCiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOw0KICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTsNCiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiBncmF5Ow0KICBib3JkZXItYm90dG9tLWNvbG9yOiBncmF5Ow0KICB0b3A6IDNweDsNCiAgcmlnaHQ6IDE1cHg7DQogIHdpZHRoOiAyMnB4Ow0KICBoZWlnaHQ6IDE4cHg7DQogIHBhZGRpbmc6IDA7DQogIG1hcmdpbjogMDsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgei1pbmRleDogNTsNCn0NCi5yaWdodC1idXR0b24gew0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIG91dGxpbmU6IG5vbmU7DQogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vLi4vLi4vLi4vYXNzZXRzL3JpZ2h0LWFycm93LWltZy5wbmciKTsNCiAgYmFja2dyb3VuZC1zaXplOiAzMCU7DQogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsNCiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsNCiAgYm9yZGVyOiAycHggc29saWQgd2hpdGU7DQogIGJvcmRlci1yaWdodC1jb2xvcjogZ3JheTsNCiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogZ3JheTsNCiAgdG9wOiAzcHg7DQogIHJpZ2h0OiAxNXB4Ow0KICB3aWR0aDogMjJweDsNCiAgaGVpZ2h0OiAxOHB4Ow0KICBwYWRkaW5nOiAwOw0KICBtYXJnaW46IDA7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIHotaW5kZXg6IDU7DQp9DQoubW92ZSB7DQogIGRpc3BsYXk6IGdyaWQ7DQp9DQoucGFnZSB7DQogIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogIHotaW5kZXg6IDE7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQouc2Nyb2xsLXBhZ2Ugew0KICB6LWluZGV4OiAyOw0KfQ0KLnBhZ2UgbGFiZWwgew0KICBib3JkZXI6IDAuMXB4IHNvbGlkIHdoaXRlOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM4LCAyMzgsIDIzOCk7DQogIC8qIGRpc3BsYXk6IGlubGluZS1ibG9jazsgKi8NCiAgcGFkZGluZzogNXB4IDVweCA1cHggNXB4Ow0KICBtYXJnaW46IDA7DQogIGN1cnNvcjogcG9pbnRlcjsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICB0b3A6IDBweDsNCn0NCi5wYWdlIFt0eXBlPSJyYWRpbyJdIHsNCiAgZGlzcGxheTogbm9uZTsNCn0NCjo6LXdlYmtpdC1zY3JvbGxiYXIubW92ZSB7DQogIGRpc3BsYXk6IG5vbmU7DQogIHdpZHRoOiAwOw0KICBoZWlnaHQ6IDFlbTsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzOCwgMjM4LCAyMzgpOw0KfQ0KOjotd2Via2l0LXNjcm9sbGJhci5jb250ZW50IHsNCiAgd2lkdGg6IDA7DQogIGhlaWdodDogMWVtOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM4LCAyMzgsIDIzOCk7DQp9DQoNCjo6LXdlYmtpdC1zY3JvbGxiYXItYnV0dG9uIHsNCiAgYmFja2dyb3VuZDogcmdiKDIzOCwgMjM4LCAyMzgpOw0KICBoZWlnaHQ6IDIwcHg7DQogIGJvcmRlcjogMXB4IHNvbGlkIGxpZ2h0Z3JheTsNCiAgYm9yZGVyLXJpZ2h0LWNvbG9yOiBncmF5Ow0KICBib3JkZXItYm90dG9tLWNvbG9yOiBncmF5Ow0KfQ0KDQovKiBVcCAqLw0KOjotd2Via2l0LXNjcm9sbGJhci1idXR0b246c2luZ2xlLWJ1dHRvbjpob3Jpem9udGFsOmRlY3JlbWVudCB7DQogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vLi4vLi4vLi4vYXNzZXRzL3RyaWFuZ2xlLXVwLWltZy5wbmciKTsNCiAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOw0KICBiYWNrZ3JvdW5kLXNpemU6IDEwcHg7DQogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsNCiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsNCiAgLyogYm9yZGVyLWNvbG9yOiBsaWdodGdyZXk7ICovDQp9DQoNCi8qIERvd24gKi8NCjo6LXdlYmtpdC1zY3JvbGxiYXItYnV0dG9uOnNpbmdsZS1idXR0b246aG9yaXpvbnRhbDppbmNyZW1lbnQgew0KICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoIi4uLy4uLy4uLy4uL2Fzc2V0cy90cmlhbmdsZS1kb3duLWltZy5wbmciKTsNCiAgYmFja2dyb3VuZC1zaXplOiAxMHB4Ow0KICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7DQogIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7DQogIC8qIGJvcmRlci1jb2xvcjogbGlnaHRncmV5OyAqLw0KfQ0KDQo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrLXBpZWNlIHsNCiAgd2lkdGg6IDBweDsNCn0NCg0KOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7DQogIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmV5Ow0KICBvdXRsaW5lOiAxcHggc29saWQgc2xhdGVncmV5Ow0KICBoZWlnaHQ6IDVweDsNCn0NCg0KLnBhZ2UgLmNvbnRlbnQgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHdoaXRlLXNwYWNlOiBub3JtYWw7DQogIHRvcDogMjNweDsNCiAgbGVmdDogMHB4Ow0KICAvKiBiYWNrZ3JvdW5kOiByZ2IoMjM4LCAyMzgsIDIzOCk7ICovDQogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KICBiYWNrZ3JvdW5kLXNpemU6IDlweCAxMHB4Ow0KICBiYWNrZ3JvdW5kLWltYWdlOiByYWRpYWwtZ3JhZGllbnQoDQogICAgY2lyY2xlLA0KICAgIHJnYigwLCAwLCAwKSAwLjVweCwNCiAgICByZ2JhKDAsIDAsIDAsIDApIDAuMnB4DQogICk7DQogIGhlaWdodDogMTAwcHg7DQogIHJpZ2h0OiAwOw0KICBib3R0b206IDA7DQogIHBhZGRpbmc6IDIwcHg7DQogIHBhZGRpbmctcmlnaHQ6IDEwcHg7DQogIHdpZHRoOiBjYWxjKDEwMCUgLSAzNXB4KTsNCiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA4OXB4KTsNCiAgYm9yZGVyOiAwLjFweCBzb2xpZCB3aGl0ZTsNCiAgYm94LXNoYWRvdzogMnB4IDFweCBncmF5Ow0KfQ0KDQoucGFnZSBbdHlwZT0icmFkaW8iXTpjaGVja2VkIH4gbGFiZWwgfiAuY29udGVudCB7DQogIHotaW5kZXg6IDE7DQp9DQouY29udGVudCB7DQogIG92ZXJmbG93OiBhdXRvOw0KfQ0KLnNwYW5DbGFzcyB7DQogIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOw0KICB0ZXh0LXVuZGVybGluZS1wb3NpdGlvbjogdW5kZXI7DQp9DQo6Zm9jdXMgew0KICBvdXRsaW5lOiBub25lOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingssufile":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDMultiPage","sourcesContent":["<template>\r\n  <div>\r\n    <div\r\n      class=\"outer-page\"\r\n      :style=\"pageStyleObj\"\r\n      :title=\"properties.ControlTipText\"\r\n      @mousedown=\"multiPageMouseDown\"\r\n      @contextmenu.stop=\"handleContextMenu\"\r\n      @keydown.delete.stop.exact=\"deleteMultiPage\"\r\n      @keyup.stop=\"selectMultipleCtrl($event, false)\"\r\n      :tabindex=\"properties.TabIndex\"\r\n    >\r\n      <div\r\n        class=\"pages\"\r\n        :style=\"styleTabsObj\"\r\n        :title=\"properties.ControlTipText\"\r\n        v-if=\"controls.length > 0\"\r\n      >\r\n        <div class=\"move\" ref=\"scrolling\" :style=\"styleMoveObj\">\r\n          <div\r\n            ref=\"controlTabsRef\"\r\n            class=\"page\"\r\n            v-for=\"(value, key) in controls\"\r\n            :key=\"key\"\r\n            :style=\"getTabStyle\"\r\n          >\r\n            <FDControlTabs\r\n              @setValue=\"setValue\"\r\n              @isChecked=\"isChecked\"\r\n              :setFontStyle=\"setFontStyle\"\r\n              @tempStretch=\"tempStretch\"\r\n              @deleteMultiPageControl=\"\r\n                (event) => {\r\n                  deleteMultiPageControl(event);\r\n                }\r\n              \"\r\n              :data=\"data\"\r\n              :pageValue=\"value\"\r\n              :indexValue=\"key\"\r\n              :pageData=\"pageData(value).properties\"\r\n              :isRunMode=\"isRunMode\"\r\n              :isEditMode=\"isEditMode\"\r\n              :isItalic=\"isItalic\"\r\n              :tempStretch=\"tempStretch\"\r\n              :tempWeight=\"tempWeight\"\r\n              :tempWidth=\"tempWidth\"\r\n              ref=\"controlTab\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"content\"\r\n          :style=\"styleContentObj\"\r\n          ref=\"contentRef\"\r\n          :title=\"properties.ControlTipText\"\r\n        >\r\n          <div\r\n            v-if=\"controls.includes(selectedPageID)\"\r\n            :style=\"containerDivStyle\"\r\n            :title=\"properties.ControlTipText\"\r\n            :tabindex=\"properties.TabIndex\"\r\n            @keydown.delete.exact=\"deleteMultiPageControl\"\r\n            @keydown.ctrl.exact.stop=\"selectMultipleCtrl($event, true)\"\r\n            @keydown.ctrl.stop=\"handleKeyDown\"\r\n            @keydown.enter.exact=\"setContentEditable($event, true)\"\r\n            @keydown.shift.exact.stop=\"selectMultipleCtrl($event, true)\"\r\n            @contextmenu.stop=\"\r\n              showContextMenu($event, selectedPageID, selectedPageID, 'container', isEditMode)\r\n            \"\r\n          >\r\n            <Container\r\n              :userFormId=\"userFormId\"\r\n              :controlId=\"selectedPageID\"\r\n              :containerId=\"selectedPageID\"\r\n              :isEditMode=\"isEditMode\"\r\n              :getScrollBarX=\"getScrollBarPage.overflowX\"\r\n              :getScrollBarY=\"getScrollBarPage.overflowY\"\r\n              :title=\"properties.ControlTipText\"\r\n              :width=\"properties.Width\"\r\n              :height=\"properties.Height\"\r\n              :getSampleDotPattern=\"getSampleDotPattern\"\r\n              ref=\"containerRef\"\r\n              :createBackgroundString=\"getPicture\"\r\n              :getSizeMode=\"getSizeMode\"\r\n              :getRepeatData=\"getRepeatData\"\r\n              :getPosition=\"getPosition\"\r\n             @deActiveControl=\"deActControl\"\r\n             @dragSelectorControl=\"dragSelectorControl\"\r\n             @addControlObj=\"addContainerControl\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div></div>\r\n        <div :style=\"getScrollButtonStyleObj\" ref=\"buttonStyleRef\">\r\n          <button class=\"left-button\" @click=\"leftmove\"></button>\r\n          <button class=\"right-button\" @click=\"rightmove\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Mixins, Prop, Ref, Watch } from 'vue-property-decorator'\r\nimport { State, Action } from 'vuex-class'\r\nimport FdContainerVue from '@/api/abstract/FormDesigner/FdContainerVue'\r\nimport { controlProperties } from '@/FormDesigner/controls-properties'\r\nimport ContextMenu from '../FDContextMenu/index.vue'\r\nimport { tabsContextMenu } from '../../../models/tabsContextMenu'\r\nimport Vue from 'vue'\r\nimport FDControlTabs from '@/FormDesigner/components/atoms/FDControlTabs/index.vue'\r\nimport Container from '@/FormDesigner/components/organisms/FDContainer/index.vue'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\n\r\n@Component({\r\n  name: 'FDMultiPage',\r\n  components: {\r\n    ContextMenu,\r\n    FDControlTabs,\r\n    Container: () =>\r\n      import('@/FormDesigner/components/organisms/FDContainer/index.vue')\r\n  }\r\n})\r\nexport default class FDMultiPage extends Mixins(FdContainerVue) {\r\n  @State((state) => state.fd.userformData) userformData!: userformData;\r\n  @Prop({ required: true, type: String }) public userFormId!: string;\r\n  @Ref('scrolling') scrolling: HTMLDivElement;\r\n  @Ref('contentRef') contentRef: HTMLDivElement;\r\n  @Ref('containerRef') readonly containerRef!: Container;\r\n  @Ref('multipage') multipage: HTMLDivElement;\r\n  @Ref('controlTabsRef') controlTabsRef: HTMLDivElement[];\r\n  @Ref('controlTab') controlTab: FDControlTabs[];\r\n  @Ref('buttonStyleRef') buttonStyleRef: HTMLDivElement;\r\n\r\n  viewMenu: boolean = false;\r\n  top: string = '0px';\r\n  left: string = '0px';\r\n  contextMenuValue: Array<IcontextMenu> = tabsContextMenu;\r\n  updatedValue: number = 0;\r\n  selectedPageID: string = '';\r\n  multiPageContextMenu: boolean = false;\r\n  tempWidth: number = 0;\r\n  tempHeight: number = 0;\r\n  multiRowCount: number = 1;\r\n  isScrollVisible = false;\r\n  topValue: number = 0;\r\n  widthValue: number = 40;\r\n  rowsCount: string = '';\r\n\r\n  /**\r\n   * @description sets scrollbar left and top position\r\n   * @function scrollLeftTop\r\n   * @param controlData propControlData passed as input\r\n   */\r\n  scrollLeftTop (controlData: controlData) {\r\n    if (this.selectedPageData) {\r\n      const scrollLeft: number = controlData!.properties.ScrollLeft!\r\n      const scrollTop: number = controlData!.properties.ScrollTop!\r\n      if (scrollLeft > 0) {\r\n        (this.contentRef as IScrollRef).scrollLeft = scrollLeft\r\n      }\r\n      if (scrollTop > 0) {\r\n        (this.contentRef as IScrollRef).scrollTop = scrollTop\r\n      }\r\n    }\r\n  }\r\n  focusPage () {\r\n    if (typeof this.properties.Value === 'number' && this.controls.length > 0) {\r\n      const value: number = this.properties.Value as number;\r\n      (this.controlTab[value].$el.children[1] as HTMLSpanElement).focus()\r\n    } else {\r\n      (this.$el.children[0] as HTMLDivElement).focus()\r\n    }\r\n  }\r\n  closeContextMenu () {\r\n    this.multiPageContextMenu = false\r\n    this.focusPage()\r\n  }\r\n  /**\r\n   * @description takes a single page value based on the value of the control\r\n   * @function pageData\r\n   *\r\n   */\r\n  pageData (value: string): controlData {\r\n    return this.userformData[this.userFormId][value]\r\n  }\r\n\r\n  get outerDivStyleObj () {\r\n    return {\r\n      width: `${this.properties.Width!}px`,\r\n      height: `${this.properties.Height!}px`\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on data\r\n   * @function pageStyleObj\r\n   *\r\n   */\r\n  get pageStyleObj () {\r\n    const controlProp = this.properties\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'inline-block' : 'none'\r\n    } else {\r\n      display = 'inline-block'\r\n    }\r\n    return {\r\n      left: `${controlProp.Left}px`,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      top: `${controlProp.Top}px`,\r\n      backgroundColor: controlProp.BackColor,\r\n      display: display,\r\n      borderLeft: '2px solid whitesmoke',\r\n      borderBottom: controlProp.TabOrientation === 0 ? '1px solid gray' : ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on data\r\n   * @function styleTabsObj\r\n   *\r\n   */\r\n  protected get styleTabsObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      overflow: 'hidden',\r\n      display: 'flex',\r\n      justifyContent: controlProp.TabOrientation === 3 ? 'flex-end' : '',\r\n      height: `${controlProp.Height!}px`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on data\r\n   * @function styleMoveObj\r\n   *\r\n   */\r\n  protected get styleMoveObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      alignSelf: controlProp.TabOrientation === 1 ? 'flex-end' : '',\r\n      float: controlProp.TabOrientation === 3 ? 'right' : '',\r\n      whiteSpace: controlProp.MultiRow === true ? 'break-spaces' : 'nowrap',\r\n      zIndex: controlProp.MultiRow === true ? '100' : '',\r\n      direction: (controlProp.MultiRow && controlProp.TabOrientation === 3) ? 'rtl' : 'ltr',\r\n      display: controlProp.Style === 2 ? 'none' : (controlProp.MultiRow && controlProp.TabOrientation === 2) || (controlProp.MultiRow && controlProp.TabOrientation === 3) ? 'grid' : 'inline-block',\r\n      gridAutoFlow: (controlProp.MultiRow && controlProp.TabOrientation === 2) || (controlProp.MultiRow && controlProp.TabOrientation === 3) ? 'column' : '',\r\n      gridTemplateRows: (controlProp.MultiRow && controlProp.TabOrientation === 2) || (controlProp.MultiRow && controlProp.TabOrientation === 3) ? this.rowsCount : '',\r\n      height:\r\n        controlProp.TabOrientation === 2 || controlProp.TabOrientation === 3\r\n          ? this.isScrollVisible\r\n            ? `${controlProp.Height! - 54}px`\r\n            : `${controlProp.Height}px`\r\n          : 'fit-content',\r\n      width:\r\n        controlProp.TabOrientation === 2 || controlProp.TabOrientation === 3\r\n          ? ''\r\n          : !this.isScrollVisible\r\n            ? `${controlProp.Width}px`\r\n            : `${controlProp.Width! - 60}px`,\r\n      overflow: 'hidden',\r\n      gridAutoColumns: (controlProp.MultiRow && controlProp.TabOrientation === 2) || (controlProp.MultiRow && controlProp.TabOrientation === 3) ? 'max-content' : ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on data\r\n   * @function containerDivStyle\r\n   *\r\n   */\r\n  get containerDivStyle () {\r\n    if (this.selectedPageData) {\r\n      let zoomVal = this.selectedPageData\r\n        ? this.selectedPageData.properties.Zoom! / 100\r\n        : ''\r\n      return {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'relative'\r\n        // zoom: zoomVal + ''\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in button tags\r\n   * dynamically changing the styles of the component based on data\r\n   * @function getScrollButtonStyleObj\r\n   *\r\n   */\r\n  protected get getScrollButtonStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    const tabsLength =\r\n      this.properties.TabFixedWidth! > 0\r\n        ? this.controls.length * this.properties.TabFixedWidth! +\r\n          10 * this.controls!.length\r\n        : this.properties.Font!.FontSize! < 36\r\n          ? this.properties.Font!.FontSize! * 3.5 * this.controls!.length\r\n          : this.properties.Font!.FontSize! * 2.3 * this.controls!.length\r\n    const tabsHeight =\r\n      this.properties.TabFixedHeight! > 0\r\n        ? this.controls.length * this.properties.TabFixedHeight! +\r\n          this.properties.Font!.FontSize! * this.controls!.length\r\n        : this.properties.Font!.FontSize! * 2.3 * this.controls!.length\r\n    return {\r\n      position: 'absolute',\r\n      zIndex: '3',\r\n      marginTop:\r\n        controlProp.TabOrientation === 2 || controlProp.TabOrientation === 3\r\n          ? `${controlProp.Height! - 30}px`\r\n          : controlProp.TabOrientation === 1\r\n            ? `${controlProp.Height! - 22}px`\r\n            : '0px',\r\n      transform:\r\n        controlProp.TabOrientation === 2\r\n          ? 'rotate(90deg)'\r\n          : this.transformScrollButtonStyle,\r\n      display: !this.properties.MultiRow\r\n        ? this.isScrollVisible\r\n          ? 'block'\r\n          : 'none'\r\n        : 'none',\r\n      right:\r\n        controlProp.TabOrientation === 3\r\n          ? '-14px'\r\n          : controlProp.TabOrientation === 2\r\n            ? `${controlProp.Width! - 40}px`\r\n            : '0px',\r\n      top: '0px'\r\n    }\r\n  }\r\n\r\n  scrollDisabledValidate () {\r\n    if (this.properties.TabOrientation === 0 || this.properties.TabOrientation === 1) {\r\n      if (this.scrolling) {\r\n        const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n        const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n        if (this.scrolling.scrollLeft >= (this.scrolling.scrollWidth - this.scrolling.clientWidth - 30)) {\r\n          rightButton.style.opacity = '0.4'\r\n          leftButton.style.opacity = '1'\r\n        } else if (this.scrolling.scrollLeft === 0) {\r\n          leftButton.style.opacity = '0.4'\r\n          rightButton.style.opacity = '1'\r\n        } else {\r\n          leftButton.style.opacity = '1'\r\n          rightButton.style.opacity = '1'\r\n        }\r\n      }\r\n    } else {\r\n      if (this.scrolling) {\r\n        const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n        const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n        if (this.scrolling.scrollTop >= (this.scrolling.scrollHeight - this.scrolling.clientHeight)) {\r\n          rightButton.style.opacity = '0.4'\r\n          leftButton.style.opacity = '1'\r\n        } else if (this.scrolling.scrollTop === 0) {\r\n          leftButton.style.opacity = '0.4'\r\n          rightButton.style.opacity = '1'\r\n        } else {\r\n          leftButton.style.opacity = '1'\r\n          rightButton.style.opacity = '1'\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  scrollButtonVerify () {\r\n    let sum = 0\r\n    Vue.nextTick(() => {\r\n      this.isScrollVisible = false\r\n      if (\r\n        this.properties.TabOrientation === 0 ||\r\n        this.properties.TabOrientation === 1\r\n      ) {\r\n        if (this.scrolling && !this.properties.MultiRow) {\r\n          for (let i = 0; i < this.scrolling.children.length; i++) {\r\n            const a = this.scrolling.children[i] as HTMLDivElement\r\n            sum += a.offsetWidth\r\n          }\r\n          const tabsLength = sum\r\n          if (tabsLength > this.properties.Width!) {\r\n            this.isScrollVisible = true\r\n          } else {\r\n            this.isScrollVisible = false\r\n          }\r\n        }\r\n      } else {\r\n        if (this.scrolling && !this.properties.MultiRow) {\r\n          for (let i = 0; i < this.scrolling.children.length; i++) {\r\n            const a = this.scrolling.children[i] as HTMLDivElement\r\n            sum += a.offsetHeight\r\n          }\r\n          const tabsHeight = sum\r\n          if (tabsHeight > this.properties.Height!) {\r\n            this.isScrollVisible = true\r\n          } else {\r\n            this.isScrollVisible = false\r\n          }\r\n        }\r\n      }\r\n      this.setScrollLeft()\r\n      this.scrollDisabledValidate()\r\n      this.updateMultiRowforLeftAndRight()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @description takes the index Value and pageValue and set the Value property\r\n   * @function isChecked\r\n   *\r\n   */\r\n  isChecked (value: selectedTab) {\r\n    if (this.isEditMode) {\r\n      this.updatedValue = value.indexValue\r\n      this.selectedPageID = value.pageValue\r\n      this.updateDataModel({ propertyName: 'Value', value: value.indexValue })\r\n      this.selectControl({\r\n        userFormId: this.userFormId,\r\n        select: {\r\n          container: this.getContainerList(this.selectedPageID),\r\n          selected: [this.selectedPageID]\r\n        }\r\n      })\r\n      this.focusPage()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description takes the ref of the div and determines the scrollLeft and scrollTop\r\n   * @function leftmove\r\n   *\r\n   */\r\n  leftmove () {\r\n    const scrollRef = this.scrolling\r\n    if (\r\n      this.properties.TabOrientation === 0 ||\r\n      this.properties.TabOrientation === 1\r\n    ) {\r\n      scrollRef.scrollLeft! -= 50\r\n      if (this.scrolling) {\r\n        const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n        const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n        if (this.scrolling.scrollLeft >= (this.scrolling.scrollWidth - this.scrolling.clientWidth)) {\r\n          rightButton.style.opacity = '0.4'\r\n          leftButton.style.opacity = '1'\r\n        } else if (this.scrolling.scrollLeft === 0) {\r\n          leftButton.style.opacity = '0.4'\r\n          rightButton.style.opacity = '1'\r\n        } else {\r\n          leftButton.style.opacity = '1'\r\n          rightButton.style.opacity = '1'\r\n        }\r\n      }\r\n    } else {\r\n      scrollRef.scrollTop! -= 50\r\n      if (this.scrolling) {\r\n        const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n        const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n        if (this.scrolling.scrollTop >= (this.scrolling.scrollHeight - this.scrolling.clientHeight)) {\r\n          rightButton.style.opacity = '0.4'\r\n          leftButton.style.opacity = '1'\r\n        } else if (this.scrolling.scrollTop === 0) {\r\n          leftButton.style.opacity = '0.4'\r\n          rightButton.style.opacity = '1'\r\n        } else {\r\n          leftButton.style.opacity = '1'\r\n          rightButton.style.opacity = '1'\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description takes the ref of the div and determines the scrollLeft and scrollTop\r\n   * @function rightmove\r\n   *\r\n   */\r\n  rightmove () {\r\n    const scrollRef = this.scrolling\r\n    let tempScrollTop = scrollRef.scrollTop!\r\n    if (\r\n      this.properties.TabOrientation === 0 ||\r\n      this.properties.TabOrientation === 1\r\n    ) {\r\n      scrollRef.scrollLeft! += 50\r\n      if (this.scrolling) {\r\n        const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n        const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n        if (this.scrolling.scrollLeft >= (this.scrolling.scrollWidth - this.scrolling.clientWidth - 1)) {\r\n          rightButton.style.opacity = '0.4'\r\n          leftButton.style.opacity = '1'\r\n        } else if (this.scrolling.scrollLeft === 0) {\r\n          leftButton.style.opacity = '0.4'\r\n          rightButton.style.opacity = '1'\r\n        } else {\r\n          leftButton.style.opacity = '1'\r\n          rightButton.style.opacity = '1'\r\n        }\r\n      }\r\n    } else {\r\n      tempScrollTop += 50\r\n      scrollRef.scrollTop = tempScrollTop\r\n      if (this.scrolling) {\r\n        const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n        const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n        if (this.scrolling.scrollTop >= (this.scrolling.scrollHeight - this.scrolling.clientHeight - 1)) {\r\n          rightButton.style.opacity = '0.4'\r\n          leftButton.style.opacity = '1'\r\n        } else if (this.scrolling.scrollTop === 0) {\r\n          leftButton.style.opacity = '0.4'\r\n          rightButton.style.opacity = '1'\r\n        } else {\r\n          leftButton.style.opacity = '1'\r\n          rightButton.style.opacity = '1'\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description takes the index Value and sets the Value property\r\n   * @function setValue\r\n   *\r\n   */\r\n  setValue (value: number) {\r\n    this.updatedValue = value\r\n    this.updateDataModel({ propertyName: 'Value', value: value })\r\n    return true\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on data\r\n   * @function getTabStyle\r\n   *\r\n   */\r\n  protected get getTabStyle (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      display:\r\n        controlProp.TabOrientation === 0 || controlProp.TabOrientation === 1\r\n          ? 'inline-block'\r\n          : 'block',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description getRepeat returns string value from\r\n   * controlProperties.extraDataRepeatProp\r\n   * @function getRepeat\r\n   */\r\n  protected get getRepeatData (): string {\r\n    if (this.selectedPageData) {\r\n      const picture = this.selectedPageData.properties.Picture!\r\n      const pictureTiling = this.selectedPageData.properties.PictureTiling!\r\n      const pictureSizeMode = this.selectedPageData.properties.PictureSizeMode!\r\n      return controlProperties.getRepeatDataProp(\r\n        picture,\r\n        pictureTiling,\r\n        pictureSizeMode\r\n      )\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on data\r\n   * @function styleContentObj\r\n   *\r\n   */\r\n  protected get styleContentObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n    return {\r\n      position: 'absolute',\r\n      display:\r\n      controlProp.MultiRow ? 'block' : controlProp.Height! < controlProp.TabFixedHeight!\r\n        ? 'none'\r\n        : controlProp.Width! < controlProp.TabFixedWidth!\r\n          ? 'none'\r\n          : controlProp.Width! < 30 || controlProp.Height! < 30\r\n            ? 'none'\r\n            : controlProp.TabOrientation === 3 ? controlProp.Width! < (this.widthValue + 12) ? 'none' : 'block' : 'block',\r\n      top:\r\n        controlProp.Style !== 2\r\n          ? controlProp.Style === 1\r\n            ? controlProp.TabOrientation === 0\r\n              ? controlProp.MultiRow\r\n                ? this.topValue + 'px'\r\n                : controlProp.TabFixedHeight! > 0\r\n                  ? controlProp.TabFixedHeight! + 13 + 'px'\r\n                  : controlProp.TabFixedHeight! === 0\r\n                    ? this.tempHeight + 19 + 'px'\r\n                    : '36px'\r\n              : '3px'\r\n            : controlProp.TabOrientation === 0\r\n              ? controlProp.MultiRow\r\n                ? this.topValue + 'px'\r\n                : controlProp.TabFixedHeight! > 0\r\n                  ? controlProp.TabFixedHeight! + 10 + 'px'\r\n                  : controlProp.TabFixedHeight! === 0\r\n                    ? this.tempHeight + 16 + 'px'\r\n                    : '33px'\r\n              : '0px'\r\n          : '0px',\r\n      height:\r\n        controlProp.Style !== 2\r\n          ? controlProp.Style === 1 ? controlProp.TabOrientation === 0 || controlProp.TabOrientation === 1\r\n            ? controlProp.MultiRow\r\n              ? (controlProp.Height! -\r\n                this.topValue + 5) + 'px'\r\n              : controlProp.TabFixedHeight! > 0\r\n                ? controlProp.TabOrientation === 0\r\n                  ? controlProp.Height! - controlProp.TabFixedHeight! - 19 + 'px'\r\n                  : controlProp.Height! - controlProp.TabFixedHeight! - 14 + 'px'\r\n                : controlProp.TabFixedHeight! === 0\r\n                  ? controlProp.Font!.FontSize! === 72\r\n                    ? controlProp.Height! - controlProp.Font!.FontSize! - 27 + 'px'\r\n                    : controlProp.Height! - controlProp.Font!.FontSize! - 25 + 'px'\r\n                  : controlProp.TabOrientation === 1\r\n                    ? `${controlProp.Height! - 30}px`\r\n                    : `${controlProp.Height! - 44}px`\r\n            : `${controlProp.Height! - 10}px`\r\n            : controlProp.TabOrientation === 0 || controlProp.TabOrientation === 1\r\n              ? controlProp.MultiRow\r\n                ? (controlProp.Height! -\r\n                this.topValue + 5) + 'px'\r\n                : controlProp.TabFixedHeight! > 0\r\n                  ? controlProp.TabOrientation === 0\r\n                    ? controlProp.Height! - controlProp.TabFixedHeight! - 10 + 'px'\r\n                    : controlProp.Height! - controlProp.TabFixedHeight! - 5 + 'px'\r\n                  : controlProp.TabFixedHeight! === 0\r\n                    ? controlProp.Font!.FontSize! === 72\r\n                      ? controlProp.Height! - controlProp.Font!.FontSize! - 18 + 'px'\r\n                      : controlProp.Height! - controlProp.Font!.FontSize! - 16 + 'px'\r\n                    : controlProp.TabOrientation === 1\r\n                      ? `${controlProp.Height! - 21}px`\r\n                      : `${controlProp.Height! - 35}px`\r\n              : `${controlProp.Height! - 1}px`\r\n          : `${controlProp.Height! - 1}px`,\r\n      width:\r\n        controlProp.Style !== 2\r\n          ? controlProp.Style === 1 ? controlProp.TabOrientation === 0 || controlProp.TabOrientation === 1 ? `${controlProp.Width! - 9}px` : controlProp.TabFixedWidth! > 0 ? controlProp.Width! - controlProp.TabFixedWidth! - 16 + 'px' : controlProp.TabFixedWidth! === 0 ? controlProp.TabOrientation === 2 || controlProp.TabOrientation === 3 ? `${controlProp.Width! - this.tempWidth - 19}px` : controlProp.Width! - controlProp.Font!.FontSize! - 26 + 'px' : 'calc(100% - 50px)'\r\n            : controlProp.TabOrientation === 0 || controlProp.TabOrientation === 1\r\n              ? `${controlProp.Width! - 3}px`\r\n              : controlProp.TabFixedWidth! > 0\r\n                ? controlProp.TabOrientation === 3 ? (controlProp.Width! - this.widthValue) + 'px' : controlProp.Width! - controlProp.TabFixedWidth! - 10 + 'px'\r\n                : controlProp.TabFixedWidth! === 0\r\n                  ? controlProp.TabOrientation === 2 ||\r\n              controlProp.TabOrientation === 3\r\n                    ? controlProp.MultiRow ? (controlProp.Width! - this.widthValue) + 'px' : `${controlProp.Width! - this.tempWidth - 13}px`\r\n                    : controlProp.Width! - controlProp.Font!.FontSize! - 20 + 'px'\r\n                  : 'calc(100% - 44px)'\r\n          : `${controlProp.Width! - 3}px`,\r\n      left:\r\n        controlProp.Style !== 2\r\n          ? controlProp.Style === 1 ? controlProp.TabOrientation === 2\r\n            ? controlProp.MultiRow ? this.widthValue + 'px' : controlProp.TabFixedWidth! > 0\r\n              ? controlProp.TabFixedWidth! + 13 + 'px'\r\n              : controlProp.TabFixedWidth! === 0\r\n                ? controlProp.TabOrientation === 2 ||\r\n                controlProp.TabOrientation === 3\r\n                  ? `${this.tempWidth + 13}px`\r\n                  : controlProp.Font!.FontSize! + 23 + 'px'\r\n                : '43px'\r\n            : '3px'\r\n            : controlProp.TabOrientation === 2\r\n              ? controlProp.MultiRow ? this.widthValue + 'px' : controlProp.TabFixedWidth! > 0\r\n                ? controlProp.TabFixedWidth! + 12 + 'px'\r\n                : controlProp.TabFixedWidth! === 0\r\n                  ? controlProp.TabOrientation === 2 ||\r\n                controlProp.TabOrientation === 3\r\n                    ? `${this.tempWidth + 12}px`\r\n                    : controlProp.Font!.FontSize! + 20 + 'px'\r\n                  : '40px'\r\n              : '0px'\r\n          : '0px',\r\n      padding: controlProp.MultiRow ? '0px' : '0px',\r\n      boxShadow:\r\n        controlProp.TabOrientation === 0 ? '1px 0px gray' : '1px 1px gray'\r\n    }\r\n  }\r\n  /**\r\n   * @description Returns string value for CSS background style for dotted patten\r\n   * @function getSampleDotPattern\r\n   */\r\n  protected get getSampleDotPattern () {\r\n    const dotSize = 13\r\n    const dotSpace = 9\r\n    return {\r\n      backgroundPosition: `${dotSize}px ${dotSize}px`,\r\n      backgroundImage: `radial-gradient(${this.properties.ForeColor} 11%, transparent 10%)`,\r\n      backgroundSize: `${dotSpace}px ${dotSpace}px`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description getPosition returns string value from\r\n   * controlProperties.picturePositionProp\r\n   * @function getPosition\r\n   * @returns string value\r\n   */\r\n  protected get getPosition () {\r\n    if (this.selectedPageData) {\r\n      const picture = this.selectedPageData.properties.Picture!\r\n      const pictureAlignment = this.selectedPageData.properties\r\n        .PictureAlignment!\r\n      const pictureSizeMode = this.selectedPageData.properties.PictureSizeMode!\r\n      return controlProperties.getPositionProp(\r\n        picture,\r\n        pictureAlignment,\r\n        pictureSizeMode\r\n      )\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description getSizeMode returns string value from\r\n   * controlProperties.pictureSizeModeProp\r\n   * @function getSizeMode\r\n   * @returns string value\r\n   */\r\n  protected get getSizeMode (): string {\r\n    if (this.selectedPageData) {\r\n      const index: number = this.selectedPageData.properties.PictureSizeMode!\r\n      return controlProperties.getSizeModeProp(index)\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description getScrollBarPage returns propData based on keepScrollBar and scrollBar values\r\n   * @function getScrollBarPage\r\n   */\r\n  get getScrollBarPage () {\r\n    if (this.selectedPageData) {\r\n      const keepScrollBar: number = this.selectedPageData.properties\r\n        .KeepScrollBarsVisible!\r\n      const scrollBar: number = this.selectedPageData.properties.ScrollBars!\r\n      return controlProperties.setScrollBarProp(keepScrollBar, scrollBar)\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description returns the selected page\r\n   * dynamically based on the selectedPageID\r\n   * @function selectedPageData\r\n   *\r\n   */\r\n  get selectedPageData () {\r\n    if (this.selectedPageID) {\r\n      return this.userformData[this.userFormId][this.selectedPageID]\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  updateMultiRowforLeftAndRight () {\r\n    if (this.properties.MultiRow) {\r\n      this.rowsCount = ''\r\n      if (this.properties.TabOrientation === 2 || this.properties.TabOrientation === 3) {\r\n        const totalHeight = this.properties.Height!\r\n        this.widthValue = this.scrolling.clientWidth\r\n        const k = this.properties.Value\r\n        let sum = 0\r\n        let count = this.scrolling.children.length\r\n        const a = this.scrolling.children[0].children[0].children[1].clientHeight + 5 + 'px'\r\n        for (let i = 0; i < this.scrolling.children.length; i++) {\r\n          sum += (this.scrolling.children[i].children[0].children[1].clientHeight + 5)\r\n        }\r\n        if (totalHeight < sum) {\r\n          count = totalHeight / (this.scrolling.children[0].children[0].children[1].clientHeight + 5)\r\n        }\r\n        if (count < this.scrolling.children.length) {\r\n          for (let j = 0; j < Math.trunc(count); j++) {\r\n            this.rowsCount = this.rowsCount + (parseInt(a) + 5 + 'px') + ' '\r\n          }\r\n        } else {\r\n          for (let j = 0; j < Math.trunc(count); j++) {\r\n            if (j === k) {\r\n              this.rowsCount = this.rowsCount + (parseInt(a) + 5 + 'px') + ' '\r\n            } else {\r\n              this.rowsCount = this.rowsCount + a + ' '\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description watches changes in propControlData to set autoset when true\r\n   * @function isScrollUsed\r\n   * @param oldVal previous propControlData data\r\n   * @param newVal  new/changed propControlData data\r\n   */\r\n  @Watch('properties.Width')\r\n  isScrollUsed (newVal: number, oldVal: number) {\r\n    this.scrollDisabledValidate()\r\n    if (this.properties.MultiRow) {\r\n      this.updateMultiRowforLeftAndRight()\r\n      this.widthValue = this.scrolling.clientWidth\r\n      if (this.scrolling) {\r\n        Vue.nextTick(() => {\r\n          this.topValue = this.scrolling.offsetHeight\r\n          this.widthValue = this.scrolling.clientWidth\r\n        })\r\n      }\r\n      const initialLength = this.controls.length!\r\n      const len = (this.tempWidth + 12) * initialLength\r\n      if (len - this.properties.Width! >= 0) {\r\n        if (this.multiRowCount <= this.controls.length!) {\r\n          const a = Math.ceil(len / this.properties.Width!)\r\n          this.multiRowCount = a\r\n          if (this.properties.Width! <= (this.tempWidth + 12) * 2) {\r\n            this.multiRowCount = a + 2\r\n          }\r\n        } else if (newVal > oldVal) {\r\n          this.multiRowCount = this.controls.length!\r\n          const a = Math.ceil(len / this.properties.Width!)\r\n          this.multiRowCount = a\r\n        }\r\n      } else {\r\n        this.multiRowCount = 1\r\n      }\r\n    } else {\r\n      this.scrollButtonVerify()\r\n    }\r\n  }\r\n\r\n  @Watch('tempWidth')\r\n  tempWidthValidate () {\r\n    if (this.tempWidth < 30) {\r\n      this.tempWidth = 30\r\n    }\r\n  }\r\n\r\n  @Watch('properties.TabOrientation')\r\n  orientValidate () {\r\n    this.scrollButtonVerify()\r\n    this.scrollDisabledValidate()\r\n    this.updateMultiRowforLeftAndRight()\r\n    this.widthValue = this.scrolling.clientWidth\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Height')\r\n  heightValidate () {\r\n    this.scrollButtonVerify()\r\n    this.scrollDisabledValidate()\r\n    this.updateMultiRowforLeftAndRight()\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.TabFixedWidth')\r\n  tabFixedWidthValidate () {\r\n    this.scrollButtonVerify()\r\n    this.scrollDisabledValidate()\r\n    this.updateMultiRowforLeftAndRight()\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! + 1 })\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! - 1 })\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.TabFixedHeight')\r\n  tabFixedHeightValidate () {\r\n    this.scrollButtonVerify()\r\n    this.scrollDisabledValidate()\r\n    this.updateMultiRowforLeftAndRight()\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! + 1 })\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! - 1 })\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.MultiRow')\r\n  multiRowValidate () {\r\n    this.updateMultiRowforLeftAndRight()\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description watches changes in FontSize of Font\r\n   * @function checkFontValue\r\n   * @param oldVal previous properties data\r\n   * @param newVal  new/changed properties data\r\n   */\r\n  @Watch('properties.Font.FontSize')\r\n  checkFontValue (newVal: number, oldVal: number) {\r\n    this.calculateWidthHeight()\r\n    this.scrollButtonVerify()\r\n    this.scrollDisabledValidate()\r\n    this.updateMultiRowforLeftAndRight()\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! + 1 })\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! - 1 })\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('topValue')\r\n  topValueValidate () {\r\n    this.topValue = this.scrolling.offsetHeight\r\n  }\r\n\r\n  /**\r\n   * @description watches changes in selectedPageData to set the caption\r\n   * @function captionValue\r\n   * @param oldVal previous selectedPageData data\r\n   * @param newVal  new/changed selectedPageData data\r\n   */\r\n  @Watch('selectedPageData.properties.Caption')\r\n  captionValue (newVal: string, oldVal: string) {\r\n    this.setScrollLeft()\r\n    if (newVal === '') {\r\n      this.tempWidth = 30\r\n    }\r\n    this.calculateWidthHeight()\r\n    this.scrollButtonVerify()\r\n    this.scrollDisabledValidate()\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! + 1 })\r\n        this.updateDataModel({ propertyName: 'Height', value: this.properties.Height! - 1 })\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n  }\r\n\r\n  setScrollLeft () {\r\n    if (this.scrolling) {\r\n      let totalSiblingWidth = 0\r\n      for (let i = 0; i < this.properties.Value!; i++) {\r\n        const a = this.scrolling.children[i] as HTMLDivElement\r\n        totalSiblingWidth += a.clientWidth\r\n      }\r\n      this.scrolling.scrollLeft = totalSiblingWidth\r\n    }\r\n  }\r\n\r\n  calculateWidthHeight () {\r\n    const that = this\r\n    if (this.controlTabsRef) {\r\n      const divElement = this.controlTabsRef\r\n      let tempWidth = 0\r\n      let tempHeight = 0\r\n      let maxWidth = 0\r\n      Vue.nextTick(function () {\r\n        for (let i = 0; i < divElement.length; i++) {\r\n          const ele = divElement[i].children[0].children[1]\r\n            .children[0] as HTMLInputElement\r\n          if (ele.offsetWidth > maxWidth) {\r\n            maxWidth = ele.offsetWidth\r\n          }\r\n          if (maxWidth > 30) {\r\n            tempWidth = maxWidth\r\n          } else {\r\n            tempWidth = 30\r\n          }\r\n          if (ele.offsetHeight > tempHeight) {\r\n            tempHeight = ele.offsetHeight\r\n          }\r\n        }\r\n        that.tempWidth = tempWidth\r\n        that.tempHeight = tempHeight\r\n      })\r\n    }\r\n  }\r\n  mounted () {\r\n    this.scrollButtonVerify()\r\n    this.scrollLeftTop(this.data)\r\n    this.selectedPageID = this.controls[0]\r\n    this.calculateWidthHeight()\r\n    // this.focusPage()\r\n  }\r\n  dragSelectorControl (event: MouseEvent) {\r\n    this.selectedControlArray = []\r\n    if (\r\n      this.selectedPageData &&\r\n      this.controls.length > 0 &&\r\n      this.controls.includes(this.selectedPageID)\r\n    ) {\r\n      this.selectedAreaStyle = this.containerRef.dragSelector.selectAreaStyle\r\n      this.calSelectedAreaStyle(event, this.selectedPageData)\r\n    }\r\n  }\r\n  deActControl (event: MouseEvent) {\r\n    this.multiPageMouseDown(event)\r\n  }\r\n\r\n  multiPageMouseDown (e: MouseEvent) {\r\n    this.selectedItem(e)\r\n    if (this.selMultipleCtrl === false && this.activateCtrl === false) {\r\n      const selContainer = this.selectedControls[this.userFormId].container[0]\r\n      const selected = this.selectedControls[this.userFormId].selected\r\n      if (this.controls.length > 0 && selected.length === 1) {\r\n        this.selectControl({\r\n          userFormId: this.userFormId,\r\n          select: {\r\n            container: this.getContainerList(this.selectedPageID),\r\n            selected: [this.selectedPageID]\r\n          }\r\n        })\r\n      }\r\n      if (selContainer === this.controlId) {\r\n        if (this.selMultipleCtrl === false && this.activateCtrl === false) {\r\n          this.selectControl({\r\n            userFormId: this.userFormId,\r\n            select: {\r\n              container: this.getContainerList(this.selectedPageID),\r\n              selected: [this.selectedPageID]\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n  showContextMenu (\r\n    e: MouseEvent,\r\n    parentID: string,\r\n    controlID: string,\r\n    type: string,\r\n    mode: boolean\r\n  ) {\r\n    e.preventDefault()\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    if (selected.length === 1 && selected[0] === this.controlId && this.controls.length > 0) {\r\n      this.changeSelect(this.controls[0])\r\n    }\r\n    EventBus.$emit('contextMenuDisplay', event, parentID, controlID, type, mode)\r\n  }\r\n  handleKeyDown (event: KeyboardEvent) {\r\n    EventBus.$emit('handleKeyDown', event, this.selectedPageID)\r\n  }\r\n  changeSelect (control: string) {\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: this.getContainerList(control),\r\n        selected: [control]\r\n      }\r\n    })\r\n  }\r\n  handleContextMenu (e: MouseEvent) {\r\n    EventBus.$emit('editModeContextMenu', e, this.controlId, this.data, this.isEditMode, this.updatedValue)\r\n  }\r\n  deleteMultiPage (event: KeyboardEvent) {\r\n    if (this.controlId === this.selectedControls[this.userFormId].selected[0]) {\r\n      this.deleteItem(event)\r\n    } else {\r\n      this.handleKeyDown(event)\r\n    }\r\n  }\r\n  updateScrollingLeftTop (e: MouseEvent) {\r\n    const refName = this.contentRef\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: this.selectedPageID,\r\n      propertyName: 'ScrollLeft',\r\n      value: refName.scrollLeft\r\n    })\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: this.selectedPageID,\r\n      propertyName: 'ScrollTop',\r\n      value: refName.scrollTop\r\n    })\r\n  }\r\n  selectMultipleCtrl (event: KeyboardEvent, val: boolean) {\r\n    if (event.key === 'Control' && event.keyCode === 17) {\r\n      this.selMultipleCtrl = val\r\n      EventBus.$emit('selectMultipleCtrl', val)\r\n    } else if (event.key === 'Shift' && event.keyCode === 16) {\r\n      this.activateCtrl = val\r\n      EventBus.$emit('actMultipleCtrl', val)\r\n    }\r\n  }\r\n\r\n  created () {\r\n    EventBus.$on('updateMultiPageValue', this.updateValue)\r\n    EventBus.$on('focusTabStrip', () => {\r\n      this.focusPage()\r\n    })\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('updateMultiPageValue')\r\n    EventBus.$off('focusTabStrip')\r\n  }\r\n  updateValue () {\r\n    {\r\n      const userData = this.userformData[this.userFormId]\r\n      let selectedPage = -1\r\n      if (this.controls.length > 0) {\r\n        selectedPage = this.controls.findIndex(\r\n          (val) => this.properties.Value === userData[val].properties.Index\r\n        )\r\n      }\r\n      if (this.data.controls.length > 0 && selectedPage !== -1) {\r\n        this.selectedPageID = this.controls[selectedPage]\r\n        this.changeSelect(this.controls[selectedPage])\r\n      } else {\r\n        this.changeSelect(this.controlId)\r\n      }\r\n    }\r\n  }\r\n  deleteMultiPageControl (event: KeyboardEvent) {\r\n    const userData = this.userformData[this.userFormId]\r\n    if (\r\n      this.selectedPageID &&\r\n      this.userformData[this.userFormId][this.selectedPageID].controls.length <=\r\n        0\r\n    ) {\r\n      event.stopPropagation()\r\n      this.deleteItem(event)\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Value')\r\n  valueValidate () {\r\n    this.focusPage()\r\n    this.updateMultiRowforLeftAndRight()\r\n    let sum = 0\r\n    if (this.scrolling) {\r\n      Vue.nextTick(() => {\r\n        this.topValue = this.scrolling.offsetHeight!\r\n        this.widthValue = this.scrolling.clientWidth\r\n      })\r\n    }\r\n    Vue.nextTick(() => {\r\n      if (this.properties.TabOrientation === 0 || this.properties.TabOrientation === 1) {\r\n        for (let i = 0; i < this.properties.Value!; i++) {\r\n          sum += this.controlTabsRef[i].clientWidth\r\n        }\r\n        if (this.properties.Width! - this.scrolling.offsetWidth > sum) {\r\n          this.scrolling.scrollLeft = sum\r\n        } else {\r\n          const valueAsNumber = this.properties.Value! as number\r\n          if (sum > this.controlTabsRef[valueAsNumber].clientWidth) {\r\n            const sL = sum - this.controlTabsRef[valueAsNumber].clientWidth\r\n            this.scrolling.scrollLeft = sL\r\n          } else {\r\n            this.scrolling.scrollLeft = sum\r\n          }\r\n        }\r\n        if (this.scrolling) {\r\n          const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n          const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n          if (this.scrolling.scrollLeft >= (this.scrolling.scrollWidth - this.scrolling.clientWidth - 30)) {\r\n            rightButton.style.opacity = '0.4'\r\n            leftButton.style.opacity = '1'\r\n          } else if (this.scrolling.scrollLeft === 0) {\r\n            leftButton.style.opacity = '0.4'\r\n            rightButton.style.opacity = '1'\r\n          } else {\r\n            leftButton.style.opacity = '1'\r\n            rightButton.style.opacity = '1'\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < this.properties.Value!; i++) {\r\n          sum += this.controlTabsRef[i].clientHeight\r\n        }\r\n        if (this.properties.Height! - this.scrolling.offsetHeight > sum) {\r\n          this.scrolling.scrollTop = sum\r\n        } else {\r\n          const valueAsNumber = this.properties.Value! as number\r\n          if (sum > this.controlTabsRef[valueAsNumber].clientHeight) {\r\n            const sL = sum - this.controlTabsRef[valueAsNumber].clientHeight\r\n            this.scrolling.scrollTop = sL\r\n          } else {\r\n            this.scrolling.scrollTop = sum\r\n          }\r\n        }\r\n        if (this.scrolling) {\r\n          const rightButton = this.buttonStyleRef.children[1] as HTMLButtonElement\r\n          const leftButton = this.buttonStyleRef.children[0] as HTMLButtonElement\r\n          if (this.scrolling.scrollTop >= (this.scrolling.scrollHeight - this.scrolling.clientHeight)) {\r\n            rightButton.style.opacity = '0.4'\r\n            leftButton.style.opacity = '1'\r\n          } else if (this.scrolling.scrollTop === 0) {\r\n            leftButton.style.opacity = '0.4'\r\n            rightButton.style.opacity = '1'\r\n          } else {\r\n            leftButton.style.opacity = '1'\r\n            rightButton.style.opacity = '1'\r\n          }\r\n        }\r\n      }\r\n      this.focusPage()\r\n    })\r\n  }\r\n  addContainerControl (event: MouseEvent) {\r\n    if (!this.isEditMode) {\r\n      this.selectedItem(event)\r\n    } else {\r\n      this.addControlObj(event, this.selectedPageID)\r\n    }\r\n  }\r\n  get getPicture () {\r\n    if (this.selectedPageData) {\r\n      return `url(${this.selectedPageData.properties!.Picture!})`\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.outer-page {\r\n  background-color: rgb(238, 238, 238);\r\n  overflow-y: hidden;\r\n  overflow-x: hidden;\r\n  box-sizing: border-box;\r\n  width: 0px;\r\n  height: 0px;\r\n  left: 0px;\r\n  top: 0px;\r\n  cursor: default;\r\n  position: sticky;\r\n}\r\n.pages {\r\n  /* display: grid; */\r\n  margin: 0;\r\n  /* width: calc(100%);\r\n  height: calc(100%); */\r\n  white-space: nowrap;\r\n  overflow-x: hidden;\r\n  overflow-y: hidden;\r\n}\r\n.left-button {\r\n  position: relative;\r\n  outline: none;\r\n  background-image: url(\"../../../../assets/left-arrow-img.png\");\r\n  background-size: 30%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  border: 2px solid white;\r\n  border-right-color: gray;\r\n  border-bottom-color: gray;\r\n  top: 3px;\r\n  right: 15px;\r\n  width: 22px;\r\n  height: 18px;\r\n  padding: 0;\r\n  margin: 0;\r\n  overflow: hidden;\r\n  z-index: 5;\r\n}\r\n.right-button {\r\n  position: relative;\r\n  outline: none;\r\n  background-image: url(\"../../../../assets/right-arrow-img.png\");\r\n  background-size: 30%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  border: 2px solid white;\r\n  border-right-color: gray;\r\n  border-bottom-color: gray;\r\n  top: 3px;\r\n  right: 15px;\r\n  width: 22px;\r\n  height: 18px;\r\n  padding: 0;\r\n  margin: 0;\r\n  overflow: hidden;\r\n  z-index: 5;\r\n}\r\n.move {\r\n  display: grid;\r\n}\r\n.page {\r\n  vertical-align: top;\r\n  z-index: 1;\r\n  overflow: hidden;\r\n}\r\n.scroll-page {\r\n  z-index: 2;\r\n}\r\n.page label {\r\n  border: 0.1px solid white;\r\n  background-color: rgb(238, 238, 238);\r\n  /* display: inline-block; */\r\n  padding: 5px 5px 5px 5px;\r\n  margin: 0;\r\n  cursor: pointer;\r\n  position: relative;\r\n  top: 0px;\r\n}\r\n.page [type=\"radio\"] {\r\n  display: none;\r\n}\r\n::-webkit-scrollbar.move {\r\n  display: none;\r\n  width: 0;\r\n  height: 1em;\r\n  background-color: rgb(238, 238, 238);\r\n}\r\n::-webkit-scrollbar.content {\r\n  width: 0;\r\n  height: 1em;\r\n  background-color: rgb(238, 238, 238);\r\n}\r\n\r\n::-webkit-scrollbar-button {\r\n  background: rgb(238, 238, 238);\r\n  height: 20px;\r\n  border: 1px solid lightgray;\r\n  border-right-color: gray;\r\n  border-bottom-color: gray;\r\n}\r\n\r\n/* Up */\r\n::-webkit-scrollbar-button:single-button:horizontal:decrement {\r\n  background-image: url(\"../../../../assets/triangle-up-img.png\");\r\n  transform: rotate(90deg);\r\n  background-size: 10px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  /* border-color: lightgrey; */\r\n}\r\n\r\n/* Down */\r\n::-webkit-scrollbar-button:single-button:horizontal:increment {\r\n  background-image: url(\"../../../../assets/triangle-down-img.png\");\r\n  background-size: 10px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  /* border-color: lightgrey; */\r\n}\r\n\r\n::-webkit-scrollbar-track-piece {\r\n  width: 0px;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background-color: darkgrey;\r\n  outline: 1px solid slategrey;\r\n  height: 5px;\r\n}\r\n\r\n.page .content {\r\n  position: absolute;\r\n  white-space: normal;\r\n  top: 23px;\r\n  left: 0px;\r\n  /* background: rgb(238, 238, 238); */\r\n  background-color: white;\r\n  background-size: 9px 10px;\r\n  background-image: radial-gradient(\r\n    circle,\r\n    rgb(0, 0, 0) 0.5px,\r\n    rgba(0, 0, 0, 0) 0.2px\r\n  );\r\n  height: 100px;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 20px;\r\n  padding-right: 10px;\r\n  width: calc(100% - 35px);\r\n  height: calc(100% - 89px);\r\n  border: 0.1px solid white;\r\n  box-shadow: 2px 1px gray;\r\n}\r\n\r\n.page [type=\"radio\"]:checked ~ label ~ .content {\r\n  z-index: 1;\r\n}\r\n.content {\r\n  overflow: auto;\r\n}\r\n.spanClass {\r\n  text-decoration: underline;\r\n  text-underline-position: under;\r\n}\r\n:focus {\r\n  outline: none;\r\n}\r\n</style>\r\n"]}]}