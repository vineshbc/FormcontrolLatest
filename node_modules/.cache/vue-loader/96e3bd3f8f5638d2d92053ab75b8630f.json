{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDResizeUserForm/index.vue?vue&type=style&index=0&id=19eea0a4&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDResizeUserForm/index.vue","mtime":1611296898000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5pbm5lci13aW5kb3ctYm9yZGVyIHsNCiAgd2lkdGg6IDYxMHB4Ow0KICBoZWlnaHQ6IDMxMHB4Ow0KICAtLWJvcmRlci13aWR0aDogODsNCiAgLS1zdHJpcGUtZGlzdGFuY2U6IDFweDsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICBib3JkZXI6IGNhbGModmFyKC0tYm9yZGVyLXdpZHRoKSAqIDFweCkgc29saWQgdHJhbnNwYXJlbnQ7DQogIGJvcmRlci1pbWFnZTogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgNCiAgICAgIC0xOGRlZywNCiAgICAgIGJsYWNrLA0KICAgICAgdHJhbnNwYXJlbnQgMC4xcHgsDQogICAgICB0cmFuc3BhcmVudCB2YXIoLS1zdHJpcGUtZGlzdGFuY2UpLA0KICAgICAgYmxhY2sgY2FsYyh2YXIoLS1zdHJpcGUtZGlzdGFuY2UpICsgMC45cHgpDQogICAgKQ0KICAgIHZhcigtLWJvcmRlci13aWR0aCk7DQp9DQouaW5uZXItd2luZG93LWJvcmRlcjEgew0KICB3aWR0aDogNjEwcHg7DQogIGhlaWdodDogMzEwcHg7DQogIHBhZGRpbmc6IDBweDsNCiAgLS1ib3JkZXItd2lkdGg6IDg7DQogIC0tc3RyaXBlLWRpc3RhbmNlOiAxcHg7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYm9yZGVyOiBjYWxjKHZhcigtLWJvcmRlci13aWR0aCkgKiAxcHgpIHNvbGlkIHRyYW5zcGFyZW50Ow0KfQ0KOmZvY3VzIHsNCiAgb3V0bGluZTogbm9uZTsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDResizeUserForm","sourcesContent":["<template>\r\n  <div\r\n    @keydown.ctrl=\"handleKeyDown\"\r\n    @keydown.delete.exact=\"handleKeyDown\"\r\n    @keydown.tab.exact=\"tabAction\"\r\n    @keydown.ctrl.exact=\"selectMultipleCtrl($event,true)\"\r\n    @keydown.shift.exact=\"selectMultipleCtrl($event,true)\"\r\n    @keyup=\"selectMultipleCtrl($event,false)\"\r\n    tabindex=\"0\"\r\n  >\r\n    <div\r\n      :class=\"[\r\n        isInnerWindowClicked ? 'inner-window-border' : 'inner-window-border1',\r\n      ]\"\r\n      :style=\"resizeUserformStyle\"\r\n    >\r\n      <ResizeHandler\r\n        v-if=\"isInnerWindowClicked\"\r\n        :controlId=\"controlId\"\r\n        :userFormId=\"userFormId\"\r\n        controlType=\"userform\"\r\n        @updateUserFormResize=\"updateUserFormResize\"\r\n      />\r\n      <Userform\r\n        :userFormId=\"userFormId\"\r\n        :controlId=\"controlId\"\r\n        :containerId=\"controlId\"\r\n        :data=\"propControlData\"\r\n        :isRunMode=\"isRunMode\"\r\n        :isEditMode=\"isEditMode\"\r\n        ref=\"userFormRef\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Emit, Prop, Vue, Ref } from 'vue-property-decorator'\r\nimport { State, Action } from 'vuex-class'\r\n\r\nimport Userform from '@/FormDesigner/components/molecules/FDUserform/index.vue'\r\nimport ResizeHandler from '@/FormDesigner/components/molecules/FDResizeHandler/index.vue'\r\nimport FdSelectVue from '@/api/abstract/FormDesigner/FdSelectVue'\r\nimport FdContainerVue from '@/api/abstract/FormDesigner/FdContainerVue'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\n\r\n@Component({\r\n  name: 'ResizeUserForm',\r\n  components: {\r\n    Userform,\r\n    ResizeHandler\r\n  }\r\n})\r\nexport default class ResizeUserForm extends FdSelectVue {\r\n  @Prop({ required: true, type: String }) public containerId!: string;\r\n  @Ref('userFormRef') readonly userFormRef!: Userform;\r\n  $el: HTMLDivElement\r\n\r\n  containerEditMode: boolean = false\r\n  /**\r\n   * @description To perform ContextMenu actions(for example: selectAll, paste etc.) on UserForm  and Control\r\n   * @function handleKeyDown\r\n   * @param event  - it is of type MouseEvent\r\n   * @event keydown\r\n   */\r\n  handleKeyDown (event: KeyboardEvent) {\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    let container = this.selectedControls[this.userFormId].container[0]\r\n    if (selected.length === 1 && !selected[0].startsWith('group')) {\r\n      const type = this.userformData[this.userFormId][selected[0]].type\r\n      if (type === 'Frame' || type === 'Page') {\r\n        container = selected[0]\r\n      }\r\n    }\r\n    EventBus.$emit('handleKeyDown', event, container)\r\n  }\r\n\r\n  /**\r\n   * @description propControlData is abstract class providing implementation in FDResizeUserForm by passing\r\n   * userFormId and controlId which is taken as props from parent Component\r\n   * @function propControlData\r\n   *\r\n   */\r\n  get propControlData (): controlData {\r\n    return this.userformData[this.userFormId][this.controlId]\r\n  }\r\n\r\n  /**\r\n   * @description style object to dynamically changing the styles to resize the useform  based on propControlData\r\n   * @function resizeUserformStyle\r\n   *\r\n   */\r\n  get resizeUserformStyle () {\r\n    return {\r\n      width: `${this.propControlData!.properties!.Width! + 10}px`,\r\n      height: `${this.propControlData!.properties!.Height! + 10}px`\r\n    }\r\n  }\r\n  get isInnerWindowClicked () {\r\n    return this.selectedControls[this.userFormId].selected.includes(\r\n      this.controlId\r\n    )\r\n  }\r\n  created () {\r\n    EventBus.$on('focusUserForm', () => {\r\n      this.$el.focus()\r\n    })\r\n    EventBus.$on('isEditMode', (isEditMode: boolean) => { this.containerEditMode = isEditMode })\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('isEditMode')\r\n    EventBus.$off('focusUserForm')\r\n  }\r\n  tabAction (event: KeyboardEvent) {\r\n    event.preventDefault()\r\n    let cycleForm: boolean = false\r\n    const userData = this.userformData[this.userFormId]\r\n    let selected = this.getSelectedControlsDatas![0]\r\n    let container = this.selectedControls[this.userFormId].container[0]\r\n    const selectType = userData[selected].type\r\n    if ((selectType === 'Frame' || selectType === 'Page') && this.containerEditMode) {\r\n      container = selected\r\n      selected = userData[container].controls[0]\r\n      this.selectControl({\r\n        userFormId: this.userFormId,\r\n        select: {\r\n          container: this.getContainerList(selected),\r\n          selected: [selected]\r\n        }\r\n      })\r\n    } else {\r\n      let containerControls = userData[container].controls\r\n      if (containerControls.length > 0) {\r\n        let type = selected ? userData[selected].type : userData[container].type\r\n        let selectedTab = -1\r\n        if (type === 'Userform') {\r\n          selectedTab = 0\r\n        } else if (type === 'FDImage') {\r\n          selectedTab = userData[selected].extraDatas!.TabIndex! + 1\r\n        } else {\r\n          selectedTab = userData[selected].properties!.TabIndex! + 1\r\n        }\r\n        if (selectedTab > containerControls.length - 1) {\r\n          const continerType = userData[container].type\r\n          if (continerType === 'Userform') {\r\n            selectedTab = 0\r\n          } else if (continerType === 'Frame' || continerType === 'Page') {\r\n            if (userData[container].properties.Cycle === 0) {\r\n              cycleForm = true\r\n              this.containerEditMode = false\r\n            } else {\r\n              selectedTab = 0\r\n            }\r\n          }\r\n        }\r\n        if (cycleForm) {\r\n          if (userData[container].type === 'Frame') {\r\n            this.selectControl({\r\n              userFormId: this.userFormId,\r\n              select: {\r\n                container: this.getContainerList(container),\r\n                selected: [container]\r\n              }\r\n            })\r\n          } else if (userData[container].type === 'Page') {\r\n            this.selectControl({\r\n              userFormId: this.userFormId,\r\n              select: {\r\n                container: this.getContainerList(this.getContainerList(container)[0]),\r\n                selected: [this.getContainerList(container)[0]]\r\n              }\r\n            })\r\n          }\r\n        } else {\r\n          const nextControlId = containerControls.findIndex((val) => {\r\n            const type = userData[val].type\r\n            if (type === 'FDImage') {\r\n              return userData[val].extraDatas!.TabIndex! === selectedTab\r\n            } else {\r\n              return userData[val].properties!.TabIndex! === selectedTab\r\n            }\r\n          })\r\n          this.selectControl({\r\n            userFormId: this.userFormId,\r\n            select: {\r\n              container: this.getContainerList(containerControls[nextControlId]),\r\n              selected: [containerControls[nextControlId]]\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n  selectMultipleCtrl (event: KeyboardEvent, val: boolean) {\r\n    if (event.key === 'Control' && event.keyCode === 17) {\r\n      EventBus.$emit('selectMultipleCtrl', val)\r\n    } else if (event.key === 'Shift' && event.keyCode === 16) {\r\n      EventBus.$emit('actMultipleCtrl', val)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.inner-window-border {\r\n  width: 610px;\r\n  height: 310px;\r\n  --border-width: 8;\r\n  --stripe-distance: 1px;\r\n  position: absolute;\r\n  border: calc(var(--border-width) * 1px) solid transparent;\r\n  border-image: repeating-linear-gradient(\r\n      -18deg,\r\n      black,\r\n      transparent 0.1px,\r\n      transparent var(--stripe-distance),\r\n      black calc(var(--stripe-distance) + 0.9px)\r\n    )\r\n    var(--border-width);\r\n}\r\n.inner-window-border1 {\r\n  width: 610px;\r\n  height: 310px;\r\n  padding: 0px;\r\n  --border-width: 8;\r\n  --stripe-distance: 1px;\r\n  position: absolute;\r\n  border: calc(var(--border-width) * 1px) solid transparent;\r\n}\r\n:focus {\r\n  outline: none;\r\n}\r\n</style>\r\n"]}]}