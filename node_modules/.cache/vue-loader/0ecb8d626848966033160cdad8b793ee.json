{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/pages/FDPage/index.vue?vue&type=style&index=0&id=2f82412d&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/pages/FDPage/index.vue","mtime":1611296898000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCiNhcHAgew0KICBmb250LWZhbWlseTogVGFob21hOw0KICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsNCiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsNCiAgY29sb3I6ICMyYzNlNTA7DQogIGZvbnQtc2l6ZTogMTRweDsNCn0NCg0KLnNwbGl0bGVmdCB7DQogIHdpZHRoOiBhdXRvOw0KICB6LWluZGV4OiAxOw0KICB0b3A6IDU7DQogIGxlZnQ6IDU7DQogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KICBvdmVyZmxvdy14OiBoaWRkZW47DQogIGJvcmRlcjogMnB4IHNvbGlkIGdyZXk7DQp9DQoub3V0ZXJzcGxpdCB7DQogIGhlaWdodDogODMlOw0KICB3aWR0aDogODUlOw0KICBwb3NpdGlvbjogZml4ZWQ7DQp9DQouaW5uZXJzcGxpdCB7DQogIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCi5zaWRlaGVhZGVyMSB7DQogIGRpc3BsYXk6IGdyaWQ7DQogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDI1cHg7DQogIC8qIHdpZHRoOiAyNTBweDsgKi8NCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0MiwgMTkxLCAyMzEpOw0KICBtYXJnaW4tYm90dG9tOiA4cHg7DQogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOw0KICBvdmVyZmxvdzogaGlkZGVuOw0KICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KfQ0KLnNpZGVoZWFkZXIgew0KICBoZWlnaHQ6IDIycHg7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYigxNDIsIDE5MSwgMjMxKTsNCn0NCg0KLnJpZ2h0IHsNCiAgcmlnaHQ6IDA7DQogIGJhY2tncm91bmQtY29sb3I6ICM4MDg4OGU7DQogIGhlaWdodDogMTAwJTsNCiAgd2lkdGg6IDc1JTsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB6LWluZGV4OiAxOw0KICBvdmVyZmxvdy14OiBoaWRkZW47DQogIC8qIHBhZGRpbmctdG9wOiAyMHB4OyAqLw0KfQ0KLmNvbnRhaW5lciB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDYwMHB4Ow0KICBtYXgtaGVpZ2h0OiA1MDBweDsNCn0NCi5oZWFkZXIgew0KICAvKiBoZWlnaHQ6IDQwcHg7ICovDQogIGhlaWdodDogMTAlOw0KICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsNCn0NCiNtZGl2IHsNCiAgZmxvYXQ6IHJpZ2h0Ow0KICBtYXJnaW46IGF1dG87DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgdG9wOiAwcHg7DQogIGxlZnQ6IDBweDsNCiAgd2lkdGg6IDIwcHg7DQogIGhlaWdodDogMTZweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5Ow0KICBib3JkZXI6IG91dHNldDsNCn0NCg0KLm1kaXYgew0KICBoZWlnaHQ6IDE3cHg7DQogIHdpZHRoOiAycHg7DQogIG1hcmdpbi1sZWZ0OiA2MHB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsNCiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOw0KICB6LWluZGV4OiAxOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHJpZ2h0OiA4cHg7DQp9DQoNCi5tZCB7DQogIGhlaWdodDogMTdweDsNCiAgd2lkdGg6IDJweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7DQogIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTsNCiAgei1pbmRleDogMjsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICByaWdodDogMHB4Ow0KfQ0KLmNvbW1hbmRidXR0b24tZWxlbWVudCB7DQogIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7DQogIGJvcmRlci1yYWRpdXM6IDNweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogIG1pbi13aWR0aDogNTBweDsNCiAgbWF4LXdpZHRoOiAxMTJweDsNCiAgd2lkdGg6IGZpdC1jb250ZW50Ow0KICBoZWlnaHQ6IGZpdC1jb250ZW50Ow0KICBtaW4taGVpZ2h0OiAyMHB4Ow0KICBwYWRkaW5nOiAwcHggNXB4IDBweCA1cHg7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQouZGlhbG9nLWFjdGlvbi1idXR0b24gew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJlZGVkOw0KICB3aWR0aDogNzlweDsNCiAgaGVpZ2h0OiAzNXB4Ow0KICBwYWRkaW5nLWxlZnQ6IDVweDsNCiAgcGFkZGluZy1yaWdodDogNXB4Ow0KICBwYWRkaW5nLXRvcDogOHB4Ow0KICBwYWRkaW5nLWJvdHRvbTogOHB4Ow0KICBib3JkZXI6IDFweCBzb2xpZCBncmF5Ow0KICBib3JkZXItcmFkaXVzOiAzcHg7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQo6Zm9jdXMgew0KICBvdXRsaW5lOiBub25lOw0KfQ0KLm1haW5ib2R5IHsNCiAgbWFyZ2luLXRvcDogMzdweDsNCn0NCi5maXhlZFNpZGUgew0KICAvKiAgcG9zaXRpb246IHJlbGF0aXZlOyAqLw0KICB3aWR0aDogMTMlOw0KICBmbG9hdDogcmlnaHQ7DQp9DQouaWNvbi1zdHlsZSB7DQogIG1hcmdpbi10b3A6IDdweDsNCiAgbWFyZ2luLWxlZnQ6IDVweDsNCn0NCi5zcGxpdEFyZWFDbGFzcyB7DQogIGJhY2tncm91bmQ6IGdyYXk7DQogIG92ZXJmbG93OiBhdXRvOw0KfQ0KLnNwbGl0QXJlYURpdiB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgcGFkZGluZzogNXB4Ow0KfQ0KI3JpZ2h0LWNsaWNrLW1lbnUgew0KICBiYWNrZ3JvdW5kOiAjZmFmYWZhOw0KICBib3JkZXI6IDFweCBzb2xpZCAjYmRiZGJkOw0KICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDNweCAxcHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMiksDQogICAgMCAxcHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKTsNCiAgbGlzdC1zdHlsZTogbm9uZTsNCiAgbWFyZ2luOiAwOw0KICBwYWRkaW5nOiAwOw0KICAvKiBsZWZ0OjEwMHB4Ow0KICB0b3A6MjAwcHg7ICovDQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgd2lkdGg6IDEwMHB4Ow0KICB6LWluZGV4OiA5OTk5OTk7DQp9DQoNCiNyaWdodC1jbGljay1tZW51IGxpIHsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMGUwZTA7DQogIG1hcmdpbjogMDsNCiAgcGFkZGluZzogNXB4IDVweDsNCn0NCg0KI3JpZ2h0LWNsaWNrLW1lbnUgbGk6bGFzdC1jaGlsZCB7DQogIGJvcmRlci1ib3R0b206IG5vbmU7DQp9DQoNCiNyaWdodC1jbGljay1tZW51IGxpOmhvdmVyIHsNCiAgYmFja2dyb3VuZDogIzFlODhlNTsNCiAgY29sb3I6ICNmYWZhZmE7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsiBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/pages/FDPage","sourcesContent":["<template>\r\n  <div id=\"app\" tabindex=\"0\" @focus=\"updatefocus\">\r\n    <div\r\n      id=\"right-click-menu\"\r\n      :style=\"contextMenuStyle\"\r\n      ref=\"contextmenu\"\r\n      tabindex=\"0\"\r\n      @blur.stop=\"closeMenu\"\r\n    >\r\n      <ContextMenu\r\n        ref=\"mainConextMenu\"\r\n        :userFormId=\"userFormId\"\r\n        :containerId=\"containerId\"\r\n        :controlId=\"controlId\"\r\n        :values=\"contextMenuValue\"\r\n        @closeMenu=\"closeMenu\"\r\n        :selectedTab=\"updatedValue\"\r\n        :data=\"tabData !== undefined ? tabData : '' \"\r\n        :groupStyleArray=\"groupStyleArray\"\r\n         @createGroup=\"createGroup\"\r\n        :editTextRef=\"labelArea\"\r\n        :copiedText=\"copiedText\"\r\n        :textMenu=\"textMenu\"\r\n      />\r\n    </div>\r\n    <div class=\"container\">\r\n      <div class=\"header\">\r\n        <Header :userFormId=\"userFormId\" />\r\n      </div>\r\n      <div class=\"mainbody\">\r\n        <Split class=\"outersplit\" @onDrag=\"onDrag\">\r\n          <SplitArea :size=\"20\" class=\"splitleft\">\r\n            <Split :direction=\"vertical\" @onDrag=\"onDrag\">\r\n              <SplitArea class=\"innersplit\">\r\n                <div v-if=\"hideShowTree === false\">\r\n                  <div class=\"sideheader\">\r\n                    <span class=\"sideheader1\">\r\n                      <span>Project - VBAProject</span>\r\n                      <div id=\"mdiv\" v-on:click=\"hideShowTreeBrowser\">\r\n                        <div class=\"mdiv\">\r\n                          <div class=\"md\"></div>\r\n                        </div>\r\n                      </div>\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <ViewCodeLogo class=\"icon-style\" />\r\n                    <ViewObject class=\"icon-style\" />\r\n                    <CloseFolderLogo class=\"icon-style\" />\r\n                  </div>\r\n                  <hr />\r\n                  <div>\r\n                    <div\r\n                      v-for=\"(userform, userformId) in userformData\"\r\n                      :key=\"userformId\"\r\n                      @click=\"setUserForm(userformId)\"\r\n                    >\r\n                      <p>{{ userformId }}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </SplitArea>\r\n              <SplitArea class=\"innersplit\">\r\n                <PropertiesList\r\n                :userFormId=\"userFormId\"/>\r\n                <!-- <label>Prop Name</label>\r\n                <input type=\"text\" v-model=\"testPropName\" />\r\n                <br />\r\n                <label>Prop Value</label>\r\n                <input type=\"text\" v-model=\"testPropValue\" />\r\n                <br />\r\n                <button @click=\"clickUpdate\">Update selected Control</button>\r\n                <br /><br />\r\n                <button @click=\"clickDelete\">Delete selected Control</button> -->\r\n              </SplitArea>\r\n            </Split>\r\n          </SplitArea>\r\n          <SplitArea :size=\"80\" class=\"splitAreaClass\">\r\n            <div class=\"splitAreaDiv\">\r\n              <ResizeUserForm\r\n                :userFormId=\"userFormId\"\r\n                :controlId=\"userFormId\"\r\n                :containerId=\"userFormId\"\r\n              />\r\n            </div>\r\n          </SplitArea>\r\n        </Split>\r\n      </div>\r\n      <div class=\"fixedSide\">\r\n        <ToolBox />\r\n      </div>\r\n      <div>\r\n        <UserformTabOrder @getFocusElement=\"getFocusElement\" ref=\"userformTabOrderRef\"/>\r\n        <TabStripTabOrder @getFocusElement=\"getFocusElement\" ref=\"tabstripTabOrderRef\"/>\r\n        <RenameMultiPageDialog @getFocusElement=\"getFocusElement\" ref=\"renameDialogRef\"/>\r\n        <ErrorPopup />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Ref, Vue } from 'vue-property-decorator'\r\nimport ToolBox from '@/FormDesigner/components/organisms/FDToolBox/index.vue'\r\nimport ResizeUserForm from '@/FormDesigner/components/organisms/FDResizeUserForm/index.vue'\r\nimport PropertiesList from '@/FormDesigner/components/organisms/FDPropertyList/index.vue'\r\nimport TreeBrowser from '@/FormDesigner/components/organisms/FDTreeBrowser/index.vue'\r\nimport Header from '@/FormDesigner/components/organisms/FDHeader/index.vue'\r\nimport UserformTabOrder from '@/FormDesigner/components/molecules/FDUserformTabOrder/index.vue'\r\nimport TabStripTabOrder from '@/FormDesigner/components/organisms/FDTabStripTabOrderModal/index.vue'\r\nimport RenameMultiPageDialog from '@/FormDesigner/components/organisms/FDRenameMultiPageDialog/index.vue'\r\nimport ErrorPopup from '@/FormDesigner/components/atoms/FDErrorPopup/index.vue'\r\nimport ContextMenu from '@/FormDesigner/components/atoms/FDContextMenu/index.vue'\r\n\r\nimport ViewCodeLogo from '../../../../assets/view-code.svg'\r\nimport ViewObject from '../../../../assets/view-object.svg'\r\nimport CloseFolderLogo from '../../../../assets/close-folder.svg'\r\nimport { State, Action } from 'vuex-class'\r\nimport { Payload } from 'vuex'\r\nimport {\r\n  IupdateControl,\r\n  IdeleteControl,\r\n  IupdateControlExtraData,\r\n  IselectControl\r\n} from '../../../../storeModules/fd/actions'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\r\nimport { userformContextMenu } from '@/FormDesigner/models/userformContextMenuData'\r\nimport { controlContextMenu } from '@/FormDesigner/models/controlContextMenuData'\r\nimport { tabsContextMenu } from '../../../models/tabsContextMenu'\r\ninterface IDialog\r\n{\r\n  dialogType: string\r\n  val: boolean\r\n}\r\n@Component({\r\n  name: 'FDPage',\r\n  components: {\r\n    ToolBox,\r\n    ResizeUserForm,\r\n    TreeBrowser,\r\n    PropertiesList,\r\n    Header,\r\n    ViewCodeLogo,\r\n    ViewObject,\r\n    CloseFolderLogo,\r\n    UserformTabOrder,\r\n    TabStripTabOrder,\r\n    RenameMultiPageDialog,\r\n    ErrorPopup,\r\n    ContextMenu\r\n  }\r\n})\r\nexport default class FDPage extends Vue {\r\n  @State((state) => state.fd.userformData) userformData!: userformData;\r\n  @State((state) => state.fd.copiedControl) copiedControl!: userformData;\r\n  @Ref('contextmenu') contextmenu: HTMLDivElement\r\n  @Ref('mainConextMenu') mainConextMenu: ContextMenu\r\n  @Ref('renameDialogRef') renameDialogRef: RenameMultiPageDialog\r\n  @Ref('userformTabOrderRef') userformTabOrderRef: UserformTabOrder\r\n  @Ref('tabstripTabOrderRef') tabstripTabOrderRef: TabStripTabOrder\r\n  containerId: string = ''\r\n  controlId: string = ''\r\n  copiedText = ''\r\n  labelArea: any = {}\r\n  textMenu: boolean = false\r\n\r\n  vertical: string = 'vertical';\r\n  renameDialog: boolean = false\r\n  tabstripTabOrder: boolean = false\r\n  display: string = '';\r\n  hideShowTree: boolean = false;\r\n  viewContextMenu: boolean = false\r\n  hideShowTreeBrowser () {\r\n    this.hideShowTree = true\r\n  }\r\n  userFormId: string = 'ID_USERFORM1';\r\n  @State((state: rootState) => state.fd.selectedControls)\r\n  selectedControls!: fdState['selectedControls'];\r\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void;\r\n  @Action('fd/updateControlExtraData') updateControlExtraData!: (payload: IupdateControlExtraData) => void;\r\n  @Action('fd/deleteControl') deleteControl!: (payload: IdeleteControl) => void;\r\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void;\r\n  testPropName: keyof controlProperties = 'Width';\r\n  testPropValue = '100';\r\n  top = 0;\r\n  left = 0;\r\n  userformTabOrder: boolean = false\r\n  contextMenuType: boolean = false;\r\n  viewMenu: boolean = false\r\n  controlContextMenu: Array<IcontextMenu> = controlContextMenu;\r\n  userformContextMenu: Array<IcontextMenu> = userformContextMenu;\r\n  contextMenuValue: Array<IcontextMenu> = tabsContextMenu;\r\n  contextMenuHeight: number = 84\r\n  groupStyleArray: Array<IGroupStyle> = []\r\n  updatedValue: number = 0\r\n  tabData: controlData\r\n  tabstripContextMenu: boolean = false\r\n\r\n  closeMenu (event: MouseEvent) {\r\n    this.textMenu = false\r\n    this.viewMenu = false\r\n    EventBus.$emit('focusUserForm')\r\n  }\r\n  onDrag () {\r\n    (this.$el as HTMLDivElement).focus()\r\n    console.log('dragging')\r\n  }\r\n  created () {\r\n    this.tabData = this.userformData[this.userFormId][this.userFormId]\r\n    EventBus.$on('contextMenuDisplay', (event: MouseEvent, containerId: string, controlId: string, type: string, mode: boolean) => {\r\n      this.containerId = containerId\r\n      this.controlId = controlId\r\n      this.openMenu(event, containerId, controlId, type, mode)\r\n    })\r\n    EventBus.$on('groupArray', (array: Array<IGroupStyle>) => {\r\n      this.groupStyleArray = [...array]\r\n    })\r\n    EventBus.$on('editModeContextMenu', (e:MouseEvent, controlId: string, data: controlData, mode: boolean, selected: number) => {\r\n      this.controlId = controlId\r\n      this.tabData = data\r\n      this.updatedValue = selected\r\n      this.tabstripContextMenu = true\r\n      this.editModeContextMenu(e, mode, data)\r\n    })\r\n    EventBus.$on('openTextContextMenu', (event: MouseEvent, controlId: string) => {\r\n      this.labelArea = (event.target as HTMLSpanElement)\r\n      this.controlId = controlId\r\n      this.openTextContextMenu(event)\r\n    })\r\n    EventBus.$on('handleKeyDown', (event: KeyboardEvent, containerId: string) => {\r\n      this.containerId = containerId\r\n      this.handleKeyDown(event)\r\n    })\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('contextMenuDisplay')\r\n    EventBus.$off('groupArray')\r\n    EventBus.$off('editModeContextMenu')\r\n    EventBus.$off('openTextContextMenu')\r\n    EventBus.$off('handleKeyDown')\r\n  }\r\n\r\n  editModeContextMenu (e: MouseEvent, mode: boolean, data: controlData) {\r\n    if (mode) {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n      this.top = e.y\r\n      this.left = e.x\r\n      this.contextMenuValue = tabsContextMenu\r\n      this.contextMenuHeight = 84\r\n      if (data.type === 'TabStrip') {\r\n        for (const val of this.contextMenuValue) {\r\n          if (val.id === 'ID_DELETEPAGE' || val.id === 'ID_RENAME') {\r\n            val.disabled = data.extraDatas!.Tabs!.length === 0\r\n          } else if (val.id === 'ID_MOVE') {\r\n            val.disabled = data.extraDatas!.Tabs!.length <= 1\r\n          }\r\n        }\r\n      }\r\n      if (data.type === 'MultiPage') {\r\n        for (const val of this.contextMenuValue) {\r\n          if (val.id === 'ID_DELETEPAGE' || val.id === 'ID_RENAME') {\r\n            val.disabled = data.controls.length === 0\r\n          } else if (val.id === 'ID_MOVE') {\r\n            val.disabled = data.controls.length <= 1\r\n          }\r\n        }\r\n      }\r\n      this.viewMenu = true\r\n      Vue.nextTick(() => this.contextmenu.focus())\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  clickUpdate () {\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    for (let i = 0; i < selected.length; i++) {\r\n      this.updateControl({\r\n        userFormId: this.userFormId,\r\n        controlId: selected[i],\r\n        propertyName: this.testPropName,\r\n        value: this.testPropValue\r\n      })\r\n    }\r\n  }\r\n  clickDelete () {\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    for (let i = 0; i < selected.length; i++) {\r\n      this.deleteControl({\r\n        userFormId: this.userFormId,\r\n        parentId: this.selectedControls[this.userFormId].container[0],\r\n        targetId: selected[i]\r\n      })\r\n    }\r\n  }\r\n  setUserForm (userformId: string) {\r\n    this.userFormId = userformId\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: [this.userFormId],\r\n        selected: [this.userFormId]\r\n      }\r\n    })\r\n  }\r\n  mounted () {\r\n    this.setUserForm(this.userFormId)\r\n  }\r\n  get contextMenuStyle () {\r\n    const contextMenuTop = window.innerHeight > (this.top + this.contextMenuHeight) ? this.top : this.top - this.contextMenuHeight\r\n    return {\r\n      top: `${contextMenuTop}px`,\r\n      left: `${this.left}px`,\r\n      display: this.viewMenu ? 'block' : 'none'\r\n    }\r\n  }\r\n  openMenu (e: MouseEvent, parentID: string, controlID: string, type: string, mode: boolean) {\r\n    e.preventDefault()\r\n    const id = (e.target! as HTMLDivElement).id ? (e.target! as HTMLDivElement).id : ''\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    const userData = this.userformData[this.userFormId]\r\n    let groupId = ''\r\n    if (!selected.includes(controlID)) {\r\n      groupId = userData[controlID].type === 'MultiPage' ? selected[0] : controlID\r\n      if ('GroupID' in userData[controlID].properties && userData[controlID].properties.GroupID !== '') {\r\n        groupId = this.userformData[this.userFormId][controlID].properties.GroupID!\r\n      }\r\n      if (groupId && !selected.includes(groupId)) {\r\n        this.selectControl({\r\n          userFormId: this.userFormId,\r\n          select: { container: this.getContainerList(groupId), selected: [groupId] }\r\n        })\r\n      }\r\n    }\r\n    const controlType = this.userformData[this.userFormId][controlID].type\r\n    const containerType = this.userformData[this.userFormId][this.containerId].type\r\n    if (type === 'container' && !groupId.startsWith('group') && selected.length <= 1) {\r\n      this.contextMenuType = true\r\n    } else {\r\n      this.contextMenuType = false\r\n    }\r\n    const targetElement = (e.target! as HTMLDivElement).style\r\n    const controlLeft: number | undefined = this.userformData[this.userFormId][controlID].properties.Left!\r\n    const controlTop: number | undefined = this.userformData[this.userFormId][controlID].properties.Top!\r\n    this.top = e.y\r\n    this.left = e.x\r\n    this.contextMenuValue = this.contextMenuType ? userformContextMenu : controlContextMenu\r\n    this.contextMenuHeight = this.contextMenuType ? 145 : 276\r\n    this.viewMenu = true\r\n    const controlLength = selected[0].startsWith('group') ? this.userformData[this.userFormId][this.controlId].controls.length : this.userformData[this.userFormId][selected[0]].controls.length\r\n    const contextMenuData = (type === 'container' && !groupId.startsWith('group') && selected.length <= 1)\r\n      ? this.userformContextMenu\r\n      : this.controlContextMenu\r\n    if ((controlType === 'SpinButton' || controlType === 'ScrollBar' || controlType === 'ListBox') && mode) {\r\n      for (const val of contextMenuData) {\r\n        if (val.id === 'ID_OBJECTPROP') {\r\n          val.disabled = false\r\n        } else if (val.id === 'ID_ALIGN' || val.id === 'ID_MAKESAMESIZE') {\r\n          for (let index = 0; index < val.values.length; index++) {\r\n            val.values[index].disabled = true\r\n          }\r\n        } else {\r\n          val.disabled = true\r\n        }\r\n      }\r\n    } else {\r\n      for (const val of contextMenuData) {\r\n        if (val.id === 'ID_SELECTALL') {\r\n          val.disabled = controlLength === 0\r\n        }\r\n        if (val.id === 'ID_DELETE') {\r\n          if (this.contextMenuType) {\r\n            val.disabled = !(selected.length === 1 && !selected[0].startsWith('group') &&\r\n            (userData[controlID].type === 'Frame' || userData[selected[0]].type === 'Page'))\r\n          } else {\r\n            val.disabled = !(selected.length >= 1)\r\n          }\r\n        }\r\n        if (val.id === 'ID_PASTE') {\r\n          val.disabled = Object.keys(this.copiedControl[this.userFormId]).length === 1\r\n        }\r\n        if (val.id === 'ID_CUT' || val.id === 'ID_COPY' || val.id === 'ID_OBJECTPROP' || val.id === 'ID_VIEWCODE') {\r\n          val.disabled = false\r\n        }\r\n        if (val.id === 'ID_GROUP' || val.id === 'ID_UNGROUP') {\r\n          const selected = this.selectedControls[this.userFormId].selected\r\n          let groupId: boolean = false\r\n          for (const key of selected) {\r\n            if (!key.startsWith('group') && !key.startsWith('ID_USERFORM')) {\r\n              groupId =\r\n                  this.userformData[this.userFormId][key].properties.GroupID === ''\r\n            }\r\n          }\r\n          const selectedGroupArray = selected.filter(\r\n            (val: string) => val.startsWith('group') && val\r\n          )\r\n          if (!groupId && selectedGroupArray.length <= 1) {\r\n            val.text = '<u>U</u>ngroup'\r\n            val.id = 'ID_UNGROUP'\r\n          } else {\r\n            val.text = '<u>G</u>roup'\r\n            val.id = 'ID_GROUP'\r\n            val.disabled =\r\n                this.selectedControls[this.userFormId].selected.length <= 1\r\n          }\r\n        }\r\n        if (val.id === 'ID_CONTROLFORWARD' || val.id === 'ID_CONTROLBACKWARD') {\r\n          const selectedConatiner = this.selectedControls[this.userFormId].container[0]\r\n          val.disabled = userData[selectedConatiner].controls.length <= 1\r\n        }\r\n        if (val.id === 'ID_ALIGN' || val.id === 'ID_MAKESAMESIZE') {\r\n          for (let index = 0; index < val.values.length; index++) {\r\n            if (val.values[index].id === 'ID_GRID') {\r\n              val.values[index].disabled = !(this.selectedControls[this.userFormId].selected.length > 0)\r\n            } else {\r\n              val.values[index].disabled = this.selectedControls[this.userFormId].selected.length <= 1\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Vue.nextTick(() => this.contextmenu.focus())\r\n  }\r\n  getContainerList (selectTarget: string) {\r\n    const containerList: string[] = []\r\n    const controlContainer = (selectTarget: string) => {\r\n      if (this.userformData[this.userFormId][selectTarget].type !== 'Userform') {\r\n        for (let i in this.userformData[this.userFormId]) {\r\n          const controlData = this.userformData[this.userFormId][i]\r\n          if (controlData.controls.length > 0 && controlData.controls.includes(selectTarget)) {\r\n            containerList.push(i)\r\n            controlContainer(i)\r\n            if (this.userformData[this.userFormId][i].type !== 'Userform') {\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const getControlId = (selectTarget: string) => {\r\n      const userData = this.userformData[this.userFormId]\r\n      for (let i in userData) {\r\n        const controlData = userData[i]\r\n        if (controlData.properties.GroupID === selectTarget) {\r\n          return i\r\n        }\r\n      }\r\n    }\r\n    if (selectTarget) {\r\n      const controlId = selectTarget.startsWith('group') ? getControlId(selectTarget) : selectTarget\r\n      if (controlId) {\r\n        controlContainer(controlId)\r\n      }\r\n    }\r\n    return containerList.length > 0 ? containerList : [this.userFormId]\r\n  }\r\n  createGroup (groupId: string) {\r\n    EventBus.$emit('createGroup', groupId)\r\n  }\r\n  openTextContextMenu (event: MouseEvent) {\r\n    this.textMenu = true\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    navigator.clipboard.readText()\r\n      .then(text => {\r\n        this.copiedText = text\r\n        this.contextMenuValue = controlContextMenu\r\n        this.contextMenuHeight = 276\r\n        for (const val of controlContextMenu) {\r\n          if (val.id === 'ID_DELETE') {\r\n            val.disabled = this.getCursorPos(event)\r\n          } else if (val.id === 'ID_PASTE') {\r\n            val.disabled = this.copiedText === ''\r\n          } else if (val.id === 'ID_CUT') {\r\n            val.disabled = this.getCursorPos(event)\r\n          } else if (val.id === 'ID_COPY') {\r\n            val.disabled = this.getCursorPos(event)\r\n          } else if (val.id === 'ID_ALIGN' || val.id === 'ID_MAKESAMESIZE') {\r\n            for (let index = 0; index < val.values.length; index++) {\r\n              val.values[index].disabled = true\r\n            }\r\n          } else if (val.id === 'ID_OBJECTPROP') {\r\n            val.disabled = false\r\n          } else {\r\n            val.disabled = true\r\n          }\r\n        }\r\n        Vue.nextTick(() => this.contextmenu.focus())\r\n        this.top = event.y\r\n        this.left = event.x\r\n        this.viewMenu = true\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to read clipboard contents: ', err)\r\n      })\r\n  }\r\n  getCursorPos (event: MouseEvent) {\r\n    const controlType = this.userformData[this.userFormId][this.controlId].type\r\n    if (controlType === 'ComboBox' || controlType === 'TextBox') {\r\n      const eventTarget = event.target as HTMLTextAreaElement\r\n      const difference = eventTarget.selectionEnd - eventTarget.selectionStart\r\n      if (difference > 0) {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    } else {\r\n      const isSupported = typeof window.getSelection !== 'undefined'\r\n      if (isSupported) {\r\n        const selection = window.getSelection()!\r\n        if (selection.anchorOffset === selection.focusOffset) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    }\r\n  }\r\n  handleKeyDown (event: KeyboardEvent) {\r\n    this.mainConextMenu.updateAction(event)\r\n  }\r\n  getFocusElement (dialogData: IDialog) {\r\n    this.tabstripContextMenu = false\r\n    if (dialogData.dialogType === 'userformTaborder') {\r\n      this.userformTabOrder = dialogData.val\r\n    } else if (dialogData.dialogType === 'renameDialog') {\r\n      this.renameDialog = dialogData.val\r\n    } else if (dialogData.dialogType === 'tabstripTabOrder') {\r\n      this.tabstripTabOrder = dialogData.val\r\n    }\r\n    if (!dialogData.val) {\r\n      this.updatefocus()\r\n    }\r\n  }\r\n  updatefocus () {\r\n    if (this.renameDialog) {\r\n      Vue.nextTick(() => { (this.renameDialogRef.$el as HTMLDivElement).focus() })\r\n    } else if (this.tabstripContextMenu && !this.tabstripTabOrder) {\r\n      EventBus.$emit('focusTabStrip')\r\n    } else if (this.userformTabOrder) {\r\n      Vue.nextTick(() => { (this.userformTabOrderRef.$el as HTMLDivElement).focus() })\r\n    } else if (this.tabstripTabOrder) {\r\n      Vue.nextTick(() => { (this.tabstripTabOrderRef.$el as HTMLDivElement).focus() })\r\n    } else {\r\n      EventBus.$emit('focusUserForm')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#app {\r\n  font-family: Tahoma;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  color: #2c3e50;\r\n  font-size: 14px;\r\n}\r\n\r\n.splitleft {\r\n  width: auto;\r\n  z-index: 1;\r\n  top: 5;\r\n  left: 5;\r\n  background-color: white;\r\n  overflow-x: hidden;\r\n  border: 2px solid grey;\r\n}\r\n.outersplit {\r\n  height: 83%;\r\n  width: 85%;\r\n  position: fixed;\r\n}\r\n.innersplit {\r\n  border: 1px solid grey;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n.sideheader1 {\r\n  display: grid;\r\n  grid-template-columns: 1fr 25px;\r\n  /* width: 250px; */\r\n  background-color: rgb(142, 191, 231);\r\n  margin-bottom: 8px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n}\r\n.sideheader {\r\n  height: 22px;\r\n  text-align: left;\r\n  background-color: rgb(142, 191, 231);\r\n}\r\n\r\n.right {\r\n  right: 0;\r\n  background-color: #80888e;\r\n  height: 100%;\r\n  width: 75%;\r\n  position: absolute;\r\n  z-index: 1;\r\n  overflow-x: hidden;\r\n  /* padding-top: 20px; */\r\n}\r\n.container {\r\n  width: 100%;\r\n  height: 600px;\r\n  max-height: 500px;\r\n}\r\n.header {\r\n  /* height: 40px; */\r\n  height: 10%;\r\n  border-bottom: 1px solid #eee;\r\n  background-color: #ffffff;\r\n}\r\n#mdiv {\r\n  float: right;\r\n  margin: auto;\r\n  position: relative;\r\n  top: 0px;\r\n  left: 0px;\r\n  width: 20px;\r\n  height: 16px;\r\n  background-color: lightgray;\r\n  border: outset;\r\n}\r\n\r\n.mdiv {\r\n  height: 17px;\r\n  width: 2px;\r\n  margin-left: 60px;\r\n  background-color: black;\r\n  transform: rotate(45deg);\r\n  z-index: 1;\r\n  position: absolute;\r\n  right: 8px;\r\n}\r\n\r\n.md {\r\n  height: 17px;\r\n  width: 2px;\r\n  background-color: black;\r\n  transform: rotate(90deg);\r\n  z-index: 2;\r\n  position: absolute;\r\n  right: 0px;\r\n}\r\n.commandbutton-element {\r\n  border: 1px solid gray;\r\n  border-radius: 3px;\r\n  background-color: white;\r\n  min-width: 50px;\r\n  max-width: 112px;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  min-height: 20px;\r\n  padding: 0px 5px 0px 5px;\r\n  overflow: hidden;\r\n}\r\n.dialog-action-button {\r\n  background-color: #f2eded;\r\n  width: 79px;\r\n  height: 35px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  border: 1px solid gray;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n}\r\n:focus {\r\n  outline: none;\r\n}\r\n.mainbody {\r\n  margin-top: 37px;\r\n}\r\n.fixedSide {\r\n  /*  position: relative; */\r\n  width: 13%;\r\n  float: right;\r\n}\r\n.icon-style {\r\n  margin-top: 7px;\r\n  margin-left: 5px;\r\n}\r\n.splitAreaClass {\r\n  background: gray;\r\n  overflow: auto;\r\n}\r\n.splitAreaDiv {\r\n  position: relative;\r\n  padding: 5px;\r\n}\r\n#right-click-menu {\r\n  background: #fafafa;\r\n  border: 1px solid #bdbdbd;\r\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  /* left:100px;\r\n  top:200px; */\r\n  position: absolute;\r\n  width: 100px;\r\n  z-index: 999999;\r\n}\r\n\r\n#right-click-menu li {\r\n  border-bottom: 1px solid #e0e0e0;\r\n  margin: 0;\r\n  padding: 5px 5px;\r\n}\r\n\r\n#right-click-menu li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n#right-click-menu li:hover {\r\n  background: #1e88e5;\r\n  color: #fafafa;\r\n}\r\n</style>\r\n"]}]}