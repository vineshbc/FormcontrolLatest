{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDFrame/index.vue?vue&type=style&index=0&id=10f3d463&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDFrame/index.vue","mtime":1611581366000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmZpZWxkc2V0IHsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgbWFyZ2luOiAwcHg7DQogIHVzZXItc2VsZWN0OiBub25lOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoWA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDFrame","sourcesContent":["<template>\r\n<div :style=\"outerDivStyle\" class=\"outerDivClass\">\r\n  <fieldset\r\n    class=\"fieldset\"\r\n    :style=\"cssStyleProperty\"\r\n    :title=\"properties.ControlTipText\"\r\n    :tabindex=\"properties.TabIndex\"\r\n    @keydown.ctrl.exact.stop=\"selectMultipleCtrl($event,true)\"\r\n    @keydown.ctrl.stop=\"handleKeyDown\"\r\n    @keydown.shift.exact.stop=\"selectMultipleCtrl($event,true)\"\r\n    @keydown.delete.stop.exact=\"deleteFrame\"\r\n    @keydown.enter.exact=\"setContentEditable($event, true)\"\r\n    @click.stop=\"!isEditMode ? selectedItem : addControlObj($event)\"\r\n    @contextmenu.stop=\"showContextMenu($event, controlId, controlId, 'container', isEditMode)\"\r\n    @mousedown=\"frameMouseDown\"\r\n    @mouseup=\"dragSelectorControl($event)\"\r\n    @keyup.stop=\"selectMultipleCtrl($event, false)\"\r\n  >\r\n    <legend ref=\"fieldsetRef\" :style=\"legendCssStyleProperty\">{{ properties.Caption }}</legend>\r\n    <div :style=\"scrollSize\" ref=\"frame\" @scroll=\"updateScrollingLeftTop\">\r\n      <div v-if=\"properties.Picture!==''\" class=\"pictureDiv\" :style=\"pictureDivObj\">\r\n    <Container\r\n      :userFormId=\"userFormId\"\r\n      :controlId=\"controlId\"\r\n      :containerId=\"controlId\"\r\n      :isEditMode=\"isEditMode\"\r\n      ref=\"containerRef\"\r\n      :getSampleDotPattern=\"getSampleDotPattern\"\r\n    />\r\n      </div>\r\n      <div  v-else :style=\"scrollStyle\">\r\n      <Container\r\n      :userFormId=\"userFormId\"\r\n      :controlId=\"controlId\"\r\n      :containerId=\"controlId\"\r\n      :isEditMode=\"isEditMode\"\r\n      :getSampleDotPattern=\"getSampleDotPattern\"\r\n      ref=\"containerRef\"\r\n      />\r\n      </div>\r\n  </div>\r\n  </fieldset>\r\n</div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Emit, Prop, Ref, Watch } from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { Action } from 'vuex-class'\r\nimport Vue from 'vue'\r\nimport FdContainerVue from '@/api/abstract/FormDesigner/FdContainerVue'\r\nimport Container from '@/FormDesigner/components/organisms/FDContainer/index.vue'\r\nimport { controlProperties } from '@/FormDesigner/controls-properties'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\n@Component({\r\n  name: 'FDFrame',\r\n  components: {\r\n    Container: () =>\r\n      import('@/FormDesigner/components/organisms/FDContainer/index.vue')\r\n  }\r\n})\r\nexport default class FDFrame extends FdContainerVue {\r\n  @Ref('containerRef') readonly containerRef!: Container;\r\n  @Ref('frame') readonly frame!: HTMLDivElement;\r\n  @Ref('fieldsetRef') fieldsetRef: HTMLLegendElement;\r\n  @Prop({ required: true, type: Boolean }) public readonly isEditMode: boolean;\r\n  mode: boolean = false;\r\n  captionHeight: number = 0;\r\n\r\n  /**\r\n   * @description Returns string value for CSS background style\r\n   * @function createBackgroundString\r\n   */\r\n  protected get createBackgroundString () {\r\n    return `url(${this.properties.Picture})`\r\n  }\r\n  /**\r\n   * @description Returns string value for CSS background style for dotted patten\r\n   * @function getSampleDotPattern\r\n   */\r\n  protected get getSampleDotPattern () {\r\n    const dotSize = 10\r\n    const dotSpace = 9\r\n    return {\r\n      backgroundPosition: `${dotSize}px ${dotSize}px`,\r\n      backgroundImage: `radial-gradient(${this.properties.ForeColor} 11%, transparent 10%)`,\r\n      backgroundSize: `${dotSpace}px ${dotSpace}px`\r\n    }\r\n  }\r\n\r\n  mounted () {\r\n    this.scrollLeftTop(this.data)\r\n    if (this.fieldsetRef) {\r\n      this.captionHeight = this.fieldsetRef.offsetHeight!\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Caption')\r\n  captionValidate () {\r\n    Vue.nextTick(() => {\r\n      if (this.properties.Caption === '') {\r\n        this.captionHeight = 0\r\n      } else {\r\n        this.captionHeight = this.fieldsetRef.offsetHeight!\r\n      }\r\n    })\r\n  }\r\n\r\n  @Watch('properties.Font', { deep: true })\r\n  updateFont () {\r\n    Vue.nextTick(() => {\r\n      this.captionHeight = this.fieldsetRef.offsetHeight!\r\n    })\r\n  }\r\n\r\n  @Watch('properties.ScrollLeft')\r\n  updateScrollLeft () {\r\n    this.scrollLeftTop(this.data)\r\n  }\r\n\r\n  @Watch('properties.ScrollTop')\r\n  updateScrollTop () {\r\n    this.scrollLeftTop(this.data)\r\n  }\r\n\r\n  @Watch('properties.Visible')\r\n  updateViisible () {\r\n    this.updateEditMode(false)\r\n  }\r\n\r\n  @Emit('updateEditMode')\r\n  updateEditMode (val: boolean) {\r\n    return val\r\n  }\r\n\r\n  /**\r\n   * @description sets scrollbar left and top position\r\n   * @function scrollLeftTop\r\n   * @param controlData propControlData passed as input\r\n   */\r\n  scrollLeftTop (controlData: controlData) {\r\n    const scrollLeft: number = this.properties.ScrollLeft!\r\n    const scrollTop: number = this.properties.ScrollTop!\r\n    if (scrollLeft > 0) {\r\n      (this.frame as IScrollRef).scrollLeft = scrollLeft\r\n    }\r\n    if (scrollTop > 0) {\r\n      (this.frame as IScrollRef).scrollTop = scrollTop\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on propControlData\r\n   * @function outerDivStyle\r\n   *\r\n   */\r\n  protected get outerDivStyle (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.data.properties\r\n    return {\r\n      backgroundColor: controlProp.BackColor,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      overflow: 'hidden'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in fieldset tag\r\n   * dynamically changing the styles of the component based on propControlData\r\n   * @function cssStyleProperty\r\n   *\r\n   */\r\n  protected get cssStyleProperty (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.data.properties\r\n    const font: font = this.properties.Font\r\n      ? this.properties.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 10,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true,\r\n        FontStyle: 'Arial'\r\n      }\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'block' : 'none'\r\n    } else {\r\n      display = 'block'\r\n    }\r\n    return {\r\n      position: 'relative',\r\n      width: `${controlProp.Width! - 4}px`,\r\n      height: `${controlProp.Height}px`,\r\n      padding: '0px',\r\n      outline: 'none',\r\n      cursor: controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n        ? `${this.getMouseCursorData} !important`\r\n        : 'default !important',\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration: font.FontStrikethrough === true && font.FontUnderline === true\r\n        ? 'underline line-through'\r\n        : font.FontUnderline\r\n          ? 'underline'\r\n          : font.FontStrikethrough\r\n            ? 'line-through'\r\n            : '',\r\n      fontWeight: font.FontBold ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\r\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\r\n      borderLeft: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : 'none',\r\n      borderRight: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 1 ? '2px solid gray' : controlProp.SpecialEffect === 4 ? '1.5px solid gray' : controlProp.SpecialEffect === 3 ? '0.5px solid gray' : 'none',\r\n      borderTop: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : 'none',\r\n      borderBottom: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 1 ? '2px solid gray' : controlProp.SpecialEffect === 4 ? '1.5px solid gray' : controlProp.SpecialEffect === 3 ? '0.5px solid gray' : 'none',\r\n      backgroundColor: controlProp.BackColor,\r\n      backgroundPosition: this.getPosition,\r\n      display: display,\r\n      zoom: `${controlProp.Zoom}%`,\r\n      whiteSpace: 'nowrap',\r\n      textOverflow: 'ellipsis',\r\n      maxWidth: `${controlProp.Width!}px`\r\n    }\r\n  }\r\n\r\n  get pictureDivObj () {\r\n    const controlProp = this.properties\r\n    return {\r\n      height: controlProp.ScrollHeight === 0 || controlProp.ScrollHeight! < controlProp.Height! ? controlProp.Height! + 'px' : controlProp.ScrollHeight! + 'px',\r\n      width: controlProp.ScrollWidth === 0 || controlProp.ScrollWidth! < controlProp.Width! ? controlProp.Width! + 'px' : controlProp.ScrollWidth! + 'px',\r\n      backgroundImage: controlProp.Picture === ''\r\n        ? ''\r\n        : this.createBackgroundString,\r\n      backgroundSize: controlProp.Picture === ''\r\n        ? this.getSampleDotPattern.backgroundSize\r\n        : this.getSizeMode,\r\n      backgroundColor: controlProp.Picture !== '' ? '' : controlProp.BackColor,\r\n      backgroundRepeat: this.getRepeatData,\r\n      backgroundPosition: controlProp.Picture !== ''\r\n        ? this.getPosition\r\n        : this.getSampleDotPattern.backgroundPosition,\r\n      opactity: controlProp.Picture === '' ? '0' : '1'\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in legend tag\r\n   * dynamically changing the styles of the component based on propControlData\r\n   * @function legendCssStyleProperty\r\n   *\r\n   */\r\n  protected get legendCssStyleProperty (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.data.properties\r\n    return {\r\n      position: 'sticky',\r\n      top: '0px',\r\n      color:\r\n        controlProp.Enabled === true ? controlProp.ForeColor : this.getEnabled,\r\n      background: controlProp.BackColor,\r\n      whiteSpace: 'pre',\r\n      wordBreak: 'normal',\r\n      overflow: 'hidden',\r\n      maxWidth: `${controlProp.Width! - 20}px`,\r\n      zIndex: '1'\r\n    }\r\n  }\r\n  get scrollSize () {\r\n    const controlProp = this.data.properties!\r\n    return {\r\n      width: `${controlProp.Width! - 3}px`,\r\n      height: this.fieldsetRef ? (controlProp.Height! - (this.captionHeight / 2) - 2) + 'px' : '100%',\r\n      overflowX: this.getScrollBarX,\r\n      overflowY: this.getScrollBarY,\r\n      position: 'relative',\r\n      top: this.fieldsetRef && this.properties.Caption !== '' ? '-' + ((this.captionHeight / 2) - 1) + 'px' : ''\r\n    }\r\n  }\r\n  get scrollStyle () {\r\n    const controlProp = this.data.properties!\r\n    return {\r\n      height: controlProp.ScrollHeight + 'px',\r\n      width: controlProp.ScrollWidth + 'px'\r\n    }\r\n  }\r\n\r\n  showContextMenu (e: MouseEvent, parentID: string, controlID: string, type: string, mode: boolean) {\r\n    EventBus.$emit('contextMenuDisplay', event, parentID, controlID, type, mode)\r\n  }\r\n\r\n  dragSelectorControl (event: MouseEvent) {\r\n    this.selectedControlArray = []\r\n    this.selectedAreaStyle = this.containerRef.dragSelector.selectAreaStyle\r\n    this.calSelectedAreaStyle(event, this.data)\r\n  }\r\n\r\n  frameMouseDown (e: MouseEvent) {\r\n    EventBus.$emit('isEditMode', this.isEditMode)\r\n    this.selectedItem(e)\r\n    const selContainer = this.selectedControls[this.userFormId].container[0]\r\n    if (selContainer === this.controlId) {\r\n      this.deActiveControl()\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description To perform ContextMenu actions(for example: selectAll, paste etc.) on UserForm  and Control\r\n   * @function handleKeyDown\r\n   * @param event  - it is of type MouseEvent\r\n   * @event keydown\r\n   */\r\n  handleKeyDown (event: KeyboardEvent) {\r\n    EventBus.$emit('handleKeyDown', event, this.controlId)\r\n  }\r\n\r\n  deleteFrame (event: KeyboardEvent) {\r\n    if (this.controlId === this.selectedControls[this.userFormId].selected[0]) {\r\n      this.deleteItem(event)\r\n    } else {\r\n      this.handleKeyDown(event)\r\n    }\r\n  }\r\n  updateScrollingLeftTop (e: MouseEvent) {\r\n    const refName = this.frame\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: this.controlId,\r\n      propertyName: 'ScrollLeft',\r\n      value: refName.scrollLeft\r\n    })\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: this.controlId,\r\n      propertyName: 'ScrollTop',\r\n      value: refName.scrollTop\r\n    })\r\n  }\r\n  selectMultipleCtrl (event: KeyboardEvent, val: boolean) {\r\n    if (event.key === 'Control' && event.keyCode === 17) {\r\n      this.selMultipleCtrl = val\r\n      EventBus.$emit('selectMultipleCtrl', val)\r\n    } else if (event.key === 'Shift' && event.keyCode === 16) {\r\n      this.activateCtrl = val\r\n      EventBus.$emit('actMultipleCtrl', val)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.fieldset {\r\n  box-sizing: border-box;\r\n  margin: 0px;\r\n  user-select: none;\r\n}\r\n</style>\r\n"]}]}