{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/molecules/FDResizeHandler/index.vue?vue&type=style&index=0&id=41e95b57&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/molecules/FDResizeHandler/index.vue","mtime":1612247696000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm1vdmUtYm9yZGVyIHsNCiAgei1pbmRleDogOTk5OTsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICBib3JkZXI6IDFweCByZ2IoNTksIDU4LCA1OCkgZGFzaGVkOw0KfQ0KLm0tdG9wLWIsIC5tLWJvdHRvbS1iew0KICB3aWR0aDogMTAwJTsNCn0NCi5tLWxlZnQtYiwgLm0tcmlnaHQtYnsNCiAgaGVpZ2h0OiAxMDAlOw0KfQ0KLnJlc2l6ZS1hcmVhIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAxMDAlOw0KfQ0KLmhhbmRsZSB7DQogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgd2lkdGg6IDZweDsNCiAgaGVpZ2h0OiA2cHg7DQoNCiAgYmFja2dyb3VuZDogd2hpdGU7DQogIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7DQp9DQouaGFuZGxlQWN0aXZhdGUgew0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHdpZHRoOiA2cHg7DQogIGhlaWdodDogNnB4Ow0KDQogIGJhY2tncm91bmQ6IGJsYWNrOw0KICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsNCn0NCi5oYW5kbGUtdGwgew0KICB0b3A6IC01cHg7DQogIGxlZnQ6IC01cHg7DQogIGN1cnNvcjogbnctcmVzaXplOw0KfQ0KLmhhbmRsZS10bSB7DQogIHRvcDogLTVweDsNCiAgbGVmdDogNTAlOw0KICBtYXJnaW4tbGVmdDogLTVweDsNCiAgY3Vyc29yOiBuLXJlc2l6ZTsNCn0NCi5oYW5kbGUtdHIgew0KICB0b3A6IC01cHg7DQogIHJpZ2h0OiAtNXB4Ow0KICBjdXJzb3I6IG5lLXJlc2l6ZTsNCn0NCi5oYW5kbGUtbWwgew0KICB0b3A6IDUwJTsNCiAgbWFyZ2luLXRvcDogLTVweDsNCiAgbGVmdDogLTVweDsNCiAgY3Vyc29yOiB3LXJlc2l6ZTsNCn0NCi5oYW5kbGUtbXIgew0KICB0b3A6IDUwJTsNCiAgbWFyZ2luLXRvcDogLTVweDsNCiAgcmlnaHQ6IC01cHg7DQogIGN1cnNvcjogZS1yZXNpemU7DQp9DQouaGFuZGxlLWJsIHsNCiAgYm90dG9tOiAtNXB4Ow0KICBsZWZ0OiAtNXB4Ow0KICBjdXJzb3I6IHN3LXJlc2l6ZTsNCn0NCi5oYW5kbGUtYm0gew0KICBib3R0b206IC01cHg7DQogIGxlZnQ6IDUwJTsNCiAgbWFyZ2luLWxlZnQ6IC01cHg7DQogIGN1cnNvcjogcy1yZXNpemU7DQp9DQouaGFuZGxlLWJyIHsNCiAgYm90dG9tOiAtNXB4Ow0KICByaWdodDogLTVweDsNCiAgY3Vyc29yOiBzZS1yZXNpemU7DQp9DQoudXNlckZvcm1IYW5kbGUgew0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHdpZHRoOiA4cHg7DQogIGhlaWdodDogOHB4Ow0KICBiYWNrZ3JvdW5kOiB3aGl0ZTsNCiAgYm9yZGVyOiAxcHggc29saWQgIzMzMzsNCn0NCi51c2VyRm9ybUhhbmRsZS10bCB7DQogIHRvcDogLThweDsNCiAgbGVmdDogLThweDsNCiAgY3Vyc29yOiBudy1yZXNpemU7DQogIGJhY2tncm91bmQ6IGJsYWNrOw0KICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsNCiAgY3Vyc29yOiBkZWZhdWx0Ow0KfQ0KLnVzZXJGb3JtSGFuZGxlLXRtIHsNCiAgdG9wOiAtOXB4Ow0KICBsZWZ0OiA1MCU7DQogIG1hcmdpbi1sZWZ0OiAtOHB4Ow0KICBjdXJzb3I6IG4tcmVzaXplOw0KICBiYWNrZ3JvdW5kOiBibGFjazsNCiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7DQogIGN1cnNvcjogZGVmYXVsdDsNCn0NCi51c2VyRm9ybUhhbmRsZS10ciB7DQogIHRvcDogLThweDsNCiAgcmlnaHQ6IC04cHg7DQogIGN1cnNvcjogbmUtcmVzaXplOw0KICBiYWNrZ3JvdW5kOiBibGFjazsNCiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7DQogIGN1cnNvcjogZGVmYXVsdDsNCn0NCi51c2VyRm9ybUhhbmRsZS1tbCB7DQogIHRvcDogNTAlOw0KICBtYXJnaW4tdG9wOiAtOHB4Ow0KICBsZWZ0OiAtOXB4Ow0KICBiYWNrZ3JvdW5kOiBibGFjazsNCiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7DQogIGN1cnNvcjogZGVmYXVsdDsNCn0NCi51c2VyRm9ybUhhbmRsZS1tciB7DQogIHRvcDogNTAlOw0KICBtYXJnaW4tdG9wOiAtOHB4Ow0KICByaWdodDogLTlweDsNCiAgY3Vyc29yOiBlLXJlc2l6ZTsNCn0NCi51c2VyRm9ybUhhbmRsZS1ibCB7DQogIGJvdHRvbTogLThweDsNCiAgbGVmdDogLThweDsNCiAgY3Vyc29yOiBzdy1yZXNpemU7DQogIGJhY2tncm91bmQ6IGJsYWNrOw0KICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsNCiAgY3Vyc29yOiBkZWZhdWx0Ow0KfQ0KLnVzZXJGb3JtSGFuZGxlLWJtIHsNCiAgYm90dG9tOiAtOXB4Ow0KICBsZWZ0OiA1MCU7DQogIG1hcmdpbi1sZWZ0OiAtOHB4Ow0KICBjdXJzb3I6IHMtcmVzaXplOw0KfQ0KLnVzZXJGb3JtSGFuZGxlLWJyIHsNCiAgYm90dG9tOiAtOHB4Ow0KICByaWdodDogLThweDsNCiAgY3Vyc29yOiBzZS1yZXNpemU7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingswkfile":"index.vue","sourceRoot":"src/FormDesigner/components/molecules/FDResizeHandler","sourcesContent":["<template>\r\n  <div>\r\n    <div v-for=\"handlerName in handlers\" :key=\"handlerName\">\r\n      <div\r\n        v-if=\"controlType === 'control'\"\r\n        :class=\"[getMainSelected ? `handle handle-${handlerName}`: null]\"\r\n        :style=\"handlerStyle\"\r\n        @mousedown.stop=\"handleMouseDown($event, handlerName, controlType, controlId)\"\r\n      ></div>\r\n\r\n      <div\r\n        v-else-if=\"controlType === 'userform'\"\r\n        :class=\"[`userFormHandle userFormHandle-${handlerName}`]\"\r\n        @mousedown.stop=\"handleMouseDown($event, handlerName, controlType, userFormId)\"\r\n      ></div>\r\n    </div>\r\n    <div v-show=\"isMove\" class=\"m-top-b move-border\" :style=\"getTStyle\" />\r\n    <div v-show=\"isMove\" class=\"m-right-b move-border\" :style=\"getRStyle\"/>\r\n    <div v-show=\"isMove\" class=\"m-bottom-b move-border\" :style=\"getBStyle\"/>\r\n    <div v-show=\"isMove\" class=\"m-left-b move-border\" :style=\"getLStyle\"/>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue, Prop, Emit, Watch } from 'vue-property-decorator'\r\nimport { State } from 'vuex-class'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\r\n@Component({\r\n  name: 'Resizehandler',\r\n  components: {}\r\n})\r\nexport default class Resizehandler extends FDCommonMethod {\r\n  $el: HTMLDivElement\r\n  @State((state) => state.fd.selectedControls) selectedControls!: fdState['selectedControls'];\r\n  @State((state) => state.fd.userformData) userformData!: userformData;\r\n\r\n  @Prop({ required: true, type: String }) public controlId!: string;\r\n  @Prop({ required: true, type: String }) public userFormId: string;\r\n  @Prop({ required: true, type: String }) public controlType: string;\r\n  @Prop() public size: {width: number, height: number, left: number, top: number}\r\n  isGroupControl: boolean = false\r\n\r\n  positions: IMousePosition = {\r\n    clientX: 0,\r\n    clientY: 0,\r\n    movementX: 0,\r\n    movementY: 0,\r\n    offsetX: 0,\r\n    offsetY: 0\r\n  };\r\n  resizeDiv: string = '';\r\n  handlerPosition: IMouseHandler = {\r\n    top: 0,\r\n    left: 0,\r\n    width: 0,\r\n    height: 0,\r\n    movementX: 0,\r\n    movementY: 0\r\n  }\r\n\r\n  handlers: Array<String> = ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'];\r\n\r\n  isGroupActivated: number = -1\r\n  currentMouseDownEvent: CustomMouseEvent | null = null\r\n  @Emit('updateResize')\r\n  private updateResize (value: IResizeValue) {\r\n    return value\r\n  }\r\n  @Emit('muldragControl')\r\n  private muldragControl (event: MouseEvent, handler: string) {\r\n    return { event: event, handler: handler }\r\n  }\r\n  @Emit('updateModel')\r\n  updateDataModel (updateData: IupdateDataModel) {\r\n    return updateData\r\n  }\r\n\r\n  @Emit('updateUserFormResize')\r\n  private updateUserFormResize (value: IResizeValue) {\r\n    return value\r\n  }\r\n  @Emit('createGroup')\r\n  createGroup (groupId: string) {\r\n    return groupId\r\n  }\r\n\r\n  @Emit('updateIsMove')\r\n  updateIsMove (val: boolean) {\r\n    return val\r\n  }\r\n\r\n  isMove = false\r\n  isMainSelect = false\r\n  isSelctedControl: string = ''\r\n  currentELPosition: any = null\r\n  created () {\r\n    EventBus.$on('getMoveValue', this.getMoveValue)\r\n    EventBus.$on('startMoveControl', this.startMoveControl)\r\n    EventBus.$on('moveControl', this.moveControl)\r\n    EventBus.$on('elementDrag', this.elementDrag)\r\n    EventBus.$on('endMoveControl', this.endMoveControl)\r\n    EventBus.$on('resizeGroupControl', this.resizeGroupControl)\r\n    EventBus.$on('startResizeGroupControl', this.startResizeGroupControl)\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('getMoveValue', this.getMoveValue)\r\n    EventBus.$off('startMoveControl', this.startMoveControl)\r\n    EventBus.$off('moveControl', this.moveControl)\r\n    EventBus.$off('elementDrag', this.elementDrag)\r\n    EventBus.$off('endMoveControl', this.endMoveControl)\r\n    EventBus.$off('resizeGroupControl', this.resizeGroupControl)\r\n    EventBus.$off('startResizeGroupControl', this.startResizeGroupControl)\r\n  }\r\n  getMoveValue (callBack: Function) {\r\n    if (this.isMainSelect) {\r\n      if (this.userformData[this.userFormId][this.controlId].type === 'Frame' || this.userformData[this.userFormId][this.controlId].type === 'MultiPage') {\r\n        callBack(this.positions.offsetX, this.positions.offsetY, this.isSelctedControl, this.getContainerList(this.isSelctedControl)[0])\r\n      } else {\r\n        callBack(this.positions.offsetX, this.positions.offsetY, this.controlId)\r\n      }\r\n    }\r\n  }\r\n  startResizeGroupControl (event: MouseEvent, handler: string) {\r\n    const control = this.userformData[this.userFormId][this.controlId]\r\n    if (control.type !== 'Userform') {\r\n      this.positions.clientX = event.clientX\r\n      this.positions.clientY = event.clientY\r\n      this.handlerPosition.left = 0\r\n      this.handlerPosition.top = 0\r\n      this.handlerPosition.width = this.size.width\r\n      this.handlerPosition.height = this.size.height\r\n      this.resizeDiv = handler\r\n    }\r\n  }\r\n  startMoveControl (event: MouseEvent, handler: string) {\r\n    EventBus.$emit('handleName', 'notDrag')\r\n    if (this.getIsMoveTarget) {\r\n      this.resizeDiv = handler\r\n      this.handlerPosition.left = 0\r\n      this.handlerPosition.top = 0\r\n      this.positions.clientX = event.clientX\r\n      this.positions.clientY = event.clientY\r\n      this.handlerPosition.width = this.size.width\r\n      this.handlerPosition.height = this.size.height\r\n    }\r\n  }\r\n\r\n  moveControl (event: MouseEvent, controltype: string) {\r\n    if (controltype === 'groupControlDrag' && this.getSelectedControlsDatas!.includes(this.controlId)) {\r\n      this.moveGroupControlBorder(event)\r\n      this.isMove = true\r\n    } else {\r\n      if (this.getIsMoveTarget) {\r\n        this.moveBorder(event)\r\n        if (event.movementX !== 0 && event.movementY !== 0) {\r\n          const containerType = this.userformData[this.userFormId][this.controlId].type\r\n          if (containerType === 'Frame' || containerType === 'MultiPage') {\r\n            EventBus.$emit('handleName', 'frameDrag')\r\n            if (controltype === containerType) {\r\n              this.isMove = true\r\n            }\r\n          } else {\r\n            EventBus.$emit('handleName', 'drag')\r\n            this.isMove = true\r\n            this.updateIsMove(true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  endMoveControl (val: string) {\r\n    if (val === 'groupEndMove') {\r\n      this.positions.movementX = 0\r\n      this.positions.movementY = 0\r\n      this.isMove = false\r\n    } else {\r\n      if (this.getIsMoveTarget) {\r\n        this.positions.movementX = 0\r\n        this.positions.movementY = 0\r\n        this.isMove = false\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @description Implementation  of Logic for resize and drag the control and userform, it preserve initial position of control/userform position\r\n   * @function handleMouseDown\r\n   * @param event it is type of  MouseEvent\r\n   * @param handler specifies handlerName(for example topLeft, BottomRight etc)\r\n   * @param controlType To differentiate between userform and control resize logic\r\n   */\r\n  handleMouseDown (event: CustomMouseEvent, handler: string, controlType: string, controlID: string) {\r\n    this.isSelctedControl = controlID\r\n    this.updateIsMove(false)\r\n    EventBus.$emit('handleName', 'notDrag')\r\n    const controlGroup = this.userformData[this.userFormId][this.controlId].properties.GroupID\r\n    this.isGroupActivated = this.selectedControls[this.userFormId].selected.findIndex((val: string) => val.startsWith('group'))\r\n    if (this.isGroupActivated === -1 || (controlGroup === '' && !this.selectedControl.includes(this.controlId))) {\r\n      this.resizeDiv = handler\r\n      this.positions.clientX = event.clientX\r\n      this.positions.clientY = event.clientY\r\n      this.currentMouseDownEvent = event\r\n      if (controlType === 'control') {\r\n        const containerType = this.userformData[this.userFormId][this.controlId].type\r\n        if (handler !== 'drag') {\r\n          this.isMainSelect = true\r\n          EventBus.$emit('startMoveControl', event, handler)\r\n          if (containerType === 'Frame' || containerType === 'MultiPage') {\r\n            document.onmousemove = (event: MouseEvent) => { this.elementDrag(event, containerType) }\r\n          } else {\r\n            document.onmousemove = (event: MouseEvent) => { EventBus.$emit('elementDrag', event) }\r\n          }\r\n        } else {\r\n          this.positions.offsetX = event.offsetX\r\n          this.positions.offsetY = event.offsetY\r\n          this.isMainSelect = true\r\n          EventBus.$emit('startMoveControl', event, handler)\r\n          if (containerType === 'Frame' || containerType === 'MultiPage') {\r\n            document.onmousemove = (event: MouseEvent) => { this.moveControl(event, containerType) }\r\n          } else {\r\n            document.onmousemove = (event: MouseEvent) => { EventBus.$emit('moveControl', event) }\r\n          }\r\n        }\r\n      } else {\r\n        document.onmousemove = this.userFormResize\r\n      }\r\n      document.onmouseup = this.closeDragElement\r\n    } else {\r\n      this.muldragControl(event, handler)\r\n    }\r\n  }\r\n\r\n  moveBorder (event: MouseEvent) {\r\n    event.preventDefault()\r\n    this.positions.movementX = this.positions.clientX - event.clientX\r\n    this.positions.movementY = this.positions.clientY - event.clientY\r\n    const scale: number = (this.propControlData.properties.Zoom! * 1) / 100\r\n    const grid: Array<number> = [9, 9]\r\n    const x: number =\r\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\r\n    const y: number =\r\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\r\n\r\n    this.positions.movementX = x\r\n    this.positions.movementY = y\r\n  }\r\n  moveGroupControlBorder (event: MouseEvent) {\r\n    event.preventDefault()\r\n    this.resizeDiv = 'drag'\r\n    this.isGroupControl = true\r\n    this.positions.movementX = this.positions.clientX - event.clientX\r\n    this.positions.movementY = this.positions.clientY - event.clientY\r\n    const scale: number = (this.propControlData.properties.Zoom! * 1) / 100\r\n    const grid: Array<number> = [9, 9]\r\n    const x: number =\r\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\r\n    const y: number =\r\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\r\n\r\n    this.positions.movementX = x\r\n    this.positions.movementY = y\r\n  }\r\n  get getLStyle () {\r\n    if (this.resizeDiv === 'drag') {\r\n      return {\r\n        left: `${-this.positions.movementX}px`,\r\n        top: `${-this.positions.movementY}px`,\r\n        height: this.isGroupControl ? `${this.size.height}px !important` : '100%'\r\n      }\r\n    } else {\r\n      return {\r\n        left: `${-this.handlerPosition.left}px !important`,\r\n        top: `${-this.handlerPosition.top}px !important`,\r\n        height: `${this.handlerPosition.height}px !important`\r\n      }\r\n    }\r\n  }\r\n  get getTStyle () {\r\n    if (this.resizeDiv === 'drag') {\r\n      return {\r\n        left: `${-this.positions.movementX}px`,\r\n        top: `${-this.positions.movementY}px`,\r\n        width: this.isGroupControl ? `${this.size.width}px !important` : '100%'\r\n      }\r\n    } else {\r\n      return {\r\n        left: `${-this.handlerPosition.left}px`,\r\n        top: `${-this.handlerPosition.top}px`,\r\n        width: `${this.handlerPosition.width}px !important`\r\n      }\r\n    }\r\n  }\r\n  get getRStyle () {\r\n    if (this.resizeDiv === 'drag') {\r\n      return this.size ? {\r\n        left: `${this.size.width - this.positions.movementX}px`,\r\n        top: `${-this.positions.movementY}px`,\r\n        height: this.isGroupControl ? `${this.size.height}px !important` : '100%'\r\n      } : null\r\n    } else {\r\n      return this.size ? {\r\n        left: `${this.handlerPosition.width - this.handlerPosition.left}px`,\r\n        height: `${this.handlerPosition.height}px !important`,\r\n        top: `${-this.handlerPosition.top}px !important`\r\n      } : null\r\n    }\r\n  }\r\n  get getBStyle () {\r\n    if (this.resizeDiv === 'drag') {\r\n      return this.size ? {\r\n        left: `${-this.positions.movementX}px`,\r\n        top: `${this.size.height - this.positions.movementY}px`,\r\n        width: this.isGroupControl ? `${this.size.width}px !important` : '100%'\r\n      } : null\r\n    } else {\r\n      return this.size ? {\r\n        top: `${this.handlerPosition.height - this.handlerPosition.top}px`,\r\n        width: `${this.handlerPosition.width}px !important`,\r\n        left: `${-this.handlerPosition.left}px`\r\n      } : null\r\n    }\r\n  }\r\n  /**\r\n   * @description Implementation  of Logic for  resizing the userform\r\n   * @function userFormResize\r\n   * @param event it is type of  MouseEvent\r\n   */\r\n  userFormResize (event: MouseEvent): void {\r\n    event.preventDefault()\r\n    this.positions.movementX = this.positions.clientX - event.clientX\r\n    this.positions.movementY = this.positions.clientY - event.clientY\r\n    this.positions.clientX = event.clientX\r\n    this.positions.clientY = event.clientY\r\n\r\n    const decWidth: number =\r\n      this.propControlData.properties.Width! - this.positions.movementX\r\n    const decHeight: number =\r\n      this.propControlData.properties.Height! - this.positions.movementY\r\n\r\n    if (decWidth > 102 && decHeight > 29) {\r\n      this.updateUserFormResize({\r\n        x: decWidth,\r\n        y: decHeight,\r\n        handler: this.resizeDiv\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Implementation  of Logic for resize and drag the control and userform\r\n   * @function elementDrag\r\n   * @param event it is type of  MouseEvent\r\n   */\r\n  elementDrag (event: MouseEvent, controltype: string): void {\r\n    event.preventDefault()\r\n    this.positions.movementX = this.positions.clientX - event.clientX\r\n    this.positions.movementY = this.positions.clientY - event.clientY\r\n    const scale: number = (this.propControlData.properties.Zoom! * 1) / 100\r\n    // const scale1: number = (this.propControlData.properties.Zoom! * 10) / 100\r\n    const grid: Array<number> = [9, 9]\r\n    const x: number =\r\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\r\n    const y: number =\r\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\r\n    this.handlerPosition.movementX = x\r\n    this.handlerPosition.movementY = y\r\n\r\n    // const diffGridX: number = x - this.positions.movementX\r\n    // const diffGridY: number = y - this.positions.movementY\r\n\r\n    // this.positions.clientX = event.clientX - diffGridX\r\n    // this.positions.clientY = event.clientY - diffGridY\r\n    if (this.currentMouseDownEvent && (x !== 0 || y !== 0)) {\r\n      this.currentMouseDownEvent.customCallBack && this.currentMouseDownEvent.customCallBack()\r\n    }\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    if (selected.length === 1 && selected[0] === this.controlId) {\r\n      const top = (this.size.height! + y) > 0 ? y : y - (this.size.height! + y)\r\n      const left = (this.size.width! + x) > 0 ? x : x - (this.size.width! + x)\r\n      let incWidth = (this.size.width! + x) > 0 ? (this.size.width! + x) : -(this.size.width! + x)\r\n      let incHeight = (this.size.height! + y) > 0 ? (this.size.height! + y) : -(this.size.height! + y)\r\n      let decWidth = (this.size.width! - x) > 0 ? (this.size.width! - x) : -(this.size.width! - x)\r\n      let decHeight = (this.size.height! - y) > 0 ? (this.size.height! - y) : -(this.size.height! - y)\r\n      if (this.resizeDiv.includes('t')) {\r\n        this.handlerPosition.top = top\r\n        this.handlerPosition.height = incHeight\r\n      } else if (this.resizeDiv.includes('b')) {\r\n        if ((this.size.height! - y) > 0) {\r\n          this.handlerPosition.height = decHeight\r\n        } else {\r\n          this.handlerPosition.top = decHeight\r\n          this.handlerPosition.height = decHeight\r\n        }\r\n      }\r\n      if (this.resizeDiv.includes('l')) {\r\n        this.handlerPosition.left = left\r\n        this.handlerPosition.width = incWidth\r\n      } else if (this.resizeDiv.includes('r')) {\r\n        if ((this.size.width! - x) > 0) {\r\n          this.handlerPosition.width = decWidth\r\n        } else {\r\n          this.handlerPosition.left = decWidth\r\n          this.handlerPosition.width = decWidth\r\n        }\r\n      }\r\n    } else {\r\n      const top = y\r\n      const left = x\r\n      let incWidth = (this.size.width! + x) > 0 ? (this.size.width! + x) : 0\r\n      let incHeight = (this.size.height! + y) > 0 ? (this.size.height! + y) : 0\r\n      let decWidth = (this.size.width! - x) > 0 ? (this.size.width! - x) : 0\r\n      let decHeight = (this.size.height! - y) > 0 ? (this.size.height! - y) : 0\r\n      if (this.resizeDiv.includes('t')) {\r\n        if (incHeight > 0) {\r\n          this.handlerPosition.top = top\r\n        }\r\n        this.handlerPosition.height = incHeight\r\n      } else if (this.resizeDiv.includes('b')) {\r\n        this.handlerPosition.height = decHeight\r\n      }\r\n      if (this.resizeDiv.includes('l')) {\r\n        if (incWidth > 0) {\r\n          this.handlerPosition.left = left\r\n        }\r\n        this.handlerPosition.width = incWidth\r\n      } else if (this.resizeDiv.includes('r')) {\r\n        this.handlerPosition.width = decWidth\r\n      }\r\n    }\r\n    if (this.getIsMoveTarget) {\r\n      const containerType = this.userformData[this.userFormId][this.controlId].type\r\n      if (containerType === 'Frame' || containerType === 'MultiPage') {\r\n        if (controltype === containerType) {\r\n          this.isMove = true\r\n        }\r\n      } else {\r\n        this.isMove = true\r\n      }\r\n    }\r\n  }\r\n\r\n  resizeGroupControl (event: MouseEvent, positions: IMousePosition): void {\r\n    event.preventDefault()\r\n    const control = this.userformData[this.userFormId][this.controlId]\r\n    if (control.type !== 'Userform' && this.getSelectedControlsDatas!.includes(this.controlId)) {\r\n      this.positions.movementX = positions.clientX - event.clientX\r\n      this.positions.movementY = positions.clientY - event.clientY\r\n      const scale: number = (this.propControlData.properties.Zoom! * 1) / 100\r\n      const scale1: number = (this.propControlData.properties.Zoom! * 10) / 100\r\n      const grid: Array<number> = [scale1, scale1]\r\n      const x: number =\r\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\r\n      const y: number =\r\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\r\n      this.handlerPosition.movementX = x\r\n      this.handlerPosition.movementY = y\r\n      // const diffGridX: number = x - this.positions.movementX\r\n      // const diffGridY: number = y - this.positions.movementY\r\n\r\n      // this.positions.clientX = event.clientX - diffGridX\r\n      // this.positions.clientY = event.clientY - diffGridY\r\n      if (this.currentMouseDownEvent && (x !== 0 || y !== 0)) {\r\n        this.currentMouseDownEvent.customCallBack && this.currentMouseDownEvent.customCallBack()\r\n      }\r\n\r\n      const top = y\r\n      const left = x\r\n      let incWidth = (this.size.width! + x) > 0 ? (this.size.width! + x) : 0\r\n      let incHeight = (this.size.height! + y) > 0 ? (this.size.height! + y) : 0\r\n      let decWidth = (this.size.width! - x) > 0 ? (this.size.width! - x) : 0\r\n      let decHeight = (this.size.height! - y) > 0 ? (this.size.height! - y) : 0\r\n      if (this.resizeDiv.includes('t')) {\r\n        if (incHeight > 0) {\r\n          this.handlerPosition.top = top\r\n        }\r\n        this.handlerPosition.height = incHeight\r\n      } else if (this.resizeDiv.includes('b')) {\r\n        this.handlerPosition.height = decHeight\r\n      }\r\n      if (this.resizeDiv.includes('l')) {\r\n        if (incWidth > 0) {\r\n          this.handlerPosition.left = left\r\n        }\r\n        this.handlerPosition.width = incWidth\r\n      } else if (this.resizeDiv.includes('r')) {\r\n        this.handlerPosition.width = decWidth\r\n      }\r\n      this.isMove = true\r\n    // if (this.getIsMoveTarget) {\r\n    //   const containerType = this.userformData[this.userFormId][this.controlId].type\r\n    //   if (containerType === 'Frame' || containerType === 'MultiPage') {\r\n    //     if (controltype === containerType) {\r\n    //       this.isMove = true\r\n    //     }\r\n    //   } else {\r\n    //     this.isMove = true\r\n    //   }\r\n    // }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description To destory the document event(mouseup,mousemove) attached while drag and resize implementation\r\n   * @function closeDragElement\r\n   */\r\n  closeDragElement (): void {\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    if (this.resizeDiv !== 'drag' && this.controlType !== 'userform') {\r\n      if (selected.length === 1 && selected[0] === this.controlId) {\r\n        this.updateDataModel({ propertyName: 'Width', value: Math.abs(this.handlerPosition.width!) })\r\n        this.updateDataModel({ propertyName: 'Height', value: Math.abs(this.handlerPosition.height!) })\r\n        this.updateDataModel({ propertyName: 'Left', value: this.handlerPosition.left! > 0 ? this.size.left - Math.abs(this.handlerPosition.left!) : Math.abs(this.handlerPosition.left!) + this.size.left })\r\n        this.updateDataModel({ propertyName: 'Top', value: this.handlerPosition.top! > 0 ? this.size.top - Math.abs(this.handlerPosition.top!) : Math.abs(this.handlerPosition.top!) + this.size.top })\r\n      } else {\r\n        this.updateResize({ x: this.handlerPosition.movementX, y: this.handlerPosition.movementY, handler: this.resizeDiv })\r\n      }\r\n    }\r\n    EventBus.$emit('updateIsControlMove', this.isMove)\r\n    EventBus.$emit('endMoveControl')\r\n    this.isMainSelect = false\r\n    this.positions.offsetX = 0\r\n    this.positions.offsetY = 0\r\n    document.onmouseup = null\r\n    document.onmousemove = null\r\n    const groupId = this.userformData[this.userFormId][this.controlId]\r\n      .properties.GroupID\r\n    if (groupId !== '') {\r\n      this.createGroup(groupId!)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description  To get main and sub selected control details by passing\r\n   * userFormId  which is taken as props from parent Component\r\n   * @function selectedControl\r\n   *\r\n   */\r\n  get selectedControl () {\r\n    return this.selectedControls[this.userFormId].selected\r\n  }\r\n\r\n  /**\r\n   * @description style object to dynamically changing the styles of  main and sub selected control in case of multiple selection  based on propControlData\r\n   * @function handlerStyle\r\n   *\r\n   */\r\n  get handlerStyle () {\r\n    return {\r\n      backgroundColor:\r\n        this.selectedControl[0] === this.controlId ? 'white' : 'black',\r\n      borderColor:\r\n        this.selectedControl[0] === this.controlId ? 'black' : 'white'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description propControlData is abstract class providing implementation to resize UserForm by passing\r\n   * userFormId  which is taken as props from parent Component\r\n   * @function propControlData\r\n   *\r\n   */\r\n  get propControlData (): controlData {\r\n    return this.userformData[this.userFormId][this.userFormId]\r\n  }\r\n\r\n  get getMainSelected () {\r\n    return (\r\n      this.selectedControls[this.userFormId].selected.includes(this.controlId) ||\r\n      (this.selectedControls[this.userFormId].container.includes(this.controlId) &&\r\n      this.selectedControls[this.userFormId].selected.includes(this.controlId) !== (this.selectedControls[this.userFormId].container.includes(this.controlId))\r\n      ))\r\n  }\r\n\r\n  get getContainerSelect () {\r\n    return this.controlId === this.selectedControls[this.userFormId].container[0]\r\n  }\r\n\r\n  get getIsMoveTarget () {\r\n    return this.getMainSelected\r\n  }\r\n}\r\n</script>\r\n\r\n<style  scoped>\r\n.move-border {\r\n  z-index: 9999;\r\n  position: absolute;\r\n  border: 1px rgb(59, 58, 58) dashed;\r\n}\r\n.m-top-b, .m-bottom-b{\r\n  width: 100%;\r\n}\r\n.m-left-b, .m-right-b{\r\n  height: 100%;\r\n}\r\n.resize-area {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.handle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 6px;\r\n  height: 6px;\r\n\r\n  background: white;\r\n  border: 1px solid #333;\r\n}\r\n.handleActivate {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 6px;\r\n  height: 6px;\r\n\r\n  background: black;\r\n  border: 1px solid white;\r\n}\r\n.handle-tl {\r\n  top: -5px;\r\n  left: -5px;\r\n  cursor: nw-resize;\r\n}\r\n.handle-tm {\r\n  top: -5px;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  cursor: n-resize;\r\n}\r\n.handle-tr {\r\n  top: -5px;\r\n  right: -5px;\r\n  cursor: ne-resize;\r\n}\r\n.handle-ml {\r\n  top: 50%;\r\n  margin-top: -5px;\r\n  left: -5px;\r\n  cursor: w-resize;\r\n}\r\n.handle-mr {\r\n  top: 50%;\r\n  margin-top: -5px;\r\n  right: -5px;\r\n  cursor: e-resize;\r\n}\r\n.handle-bl {\r\n  bottom: -5px;\r\n  left: -5px;\r\n  cursor: sw-resize;\r\n}\r\n.handle-bm {\r\n  bottom: -5px;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  cursor: s-resize;\r\n}\r\n.handle-br {\r\n  bottom: -5px;\r\n  right: -5px;\r\n  cursor: se-resize;\r\n}\r\n.userFormHandle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  width: 8px;\r\n  height: 8px;\r\n  background: white;\r\n  border: 1px solid #333;\r\n}\r\n.userFormHandle-tl {\r\n  top: -8px;\r\n  left: -8px;\r\n  cursor: nw-resize;\r\n  background: black;\r\n  border: 1px solid white;\r\n  cursor: default;\r\n}\r\n.userFormHandle-tm {\r\n  top: -9px;\r\n  left: 50%;\r\n  margin-left: -8px;\r\n  cursor: n-resize;\r\n  background: black;\r\n  border: 1px solid white;\r\n  cursor: default;\r\n}\r\n.userFormHandle-tr {\r\n  top: -8px;\r\n  right: -8px;\r\n  cursor: ne-resize;\r\n  background: black;\r\n  border: 1px solid white;\r\n  cursor: default;\r\n}\r\n.userFormHandle-ml {\r\n  top: 50%;\r\n  margin-top: -8px;\r\n  left: -9px;\r\n  background: black;\r\n  border: 1px solid white;\r\n  cursor: default;\r\n}\r\n.userFormHandle-mr {\r\n  top: 50%;\r\n  margin-top: -8px;\r\n  right: -9px;\r\n  cursor: e-resize;\r\n}\r\n.userFormHandle-bl {\r\n  bottom: -8px;\r\n  left: -8px;\r\n  cursor: sw-resize;\r\n  background: black;\r\n  border: 1px solid white;\r\n  cursor: default;\r\n}\r\n.userFormHandle-bm {\r\n  bottom: -9px;\r\n  left: 50%;\r\n  margin-left: -8px;\r\n  cursor: s-resize;\r\n}\r\n.userFormHandle-br {\r\n  bottom: -8px;\r\n  right: -8px;\r\n  cursor: se-resize;\r\n}\r\n</style>\r\n"]}]}