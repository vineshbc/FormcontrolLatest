{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDOptionButton/index.vue?vue&type=style&index=0&id=78546432&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDOptionButton/index.vue","mtime":1611773306000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmNvbnRhaW5lciB7DQogIGxlZnQ6IDEwMHB4Ow0KICB0b3A6IDEwMHB4Ow0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KfQ0KLm91dGVyLWNoZWNrIHsNCiAgaGVpZ2h0OiAwcHg7DQogIHdpZHRoOiAwcHg7DQogIGxlZnQ6IDBweDsNCiAgdG9wOiAwcHg7DQogIG1pbi13aWR0aDogMTRweDsNCiAgbWluLWhlaWdodDogMTVweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzOCwgMjM4LCAyMzgpOw0KICBib3gtc2hhZG93OiAtMXB4IC0xcHggZ3JheTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCg0KLnJhZGlvIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzOCwgMjM4LCAyMzgpOw0KICBib3gtc2hhZG93OiAwLjFweCAwLjFweCAxcHggMXB4IGdyYXk7DQogIHdpZHRoOiAxNTBweDsNCiAgaGVpZ2h0OiAyM3B4Ow0KfQ0KDQoucmFkaW8taW5wdXQgew0KICBtYXJnaW46IDBweCAwcHggMHB4IDVweDsNCn0NCg0KLnJhZGlvLWxhYmVsIHsNCiAgZmxvYXQ6IGxlZnQ7DQogIGZvbnQtc2l6ZTogMTFweDsNCiAgcGFkZGluZy10b3A6IDVweDsNCn0NCg0KLm91dGVyLW9wdGlvbiB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgaGVpZ2h0OiAzMHB4Ow0KICB3aWR0aDogMTUwcHg7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzgsIDIzOCwgMjM4KTsNCiAgYm94LXNoYWRvdzogLTFweCAtMXB4IGdyYXk7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQoNCi52aXN1YWxseS1oaWRkZW4gew0KICBib3JkZXI6IDA7DQogIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7DQogIGhlaWdodDogMXB4Ow0KICBtYXJnaW46IC0xcHg7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIHBhZGRpbmc6IDA7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgd2lkdGg6IDFweDsNCn0NCg0KLmNvbnRyb2wgew0KICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgcG9zaXRpb246IHN0aWNreTsNCiAgdG9wOiA0NyU7DQogIGFsaWduLXNlbGY6IGNlbnRlcjsNCn0NCi5jb250cm9sLWluZGljYXRvciB7DQogIHdpZHRoOiAxMHB4Ow0KICBoZWlnaHQ6IDEwcHg7DQogIG1hcmdpbi1sZWZ0OiAzcHg7DQogIGJvcmRlci1yYWRpdXM6IDE0cHg7DQogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KfQ0KDQogLnRydWVJbWFnZSB7DQogIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi8uLi8uLi8uLi9hc3NldHMvb3B0aW9ubWFyay1pbWcucG5nKTsNCiAgYmFja2dyb3VuZC1zaXplOiA1cHg7DQogIGJvcmRlci1yYWRpdXM6IDUwJTsNCiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOw0KICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KIH0NCg0KIC5kaXNhYmxlZEltYWdlIHsNCiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uLy4uLy4uLy4uL2Fzc2V0cy9vcHRpb25idXR0b25kaXNhYmxlZC5wbmcpOw0KICBiYWNrZ3JvdW5kLXNpemU6IDVweDsNCiAgYm9yZGVyLXJhZGl1czogNTAlOw0KICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7DQogIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7DQogfQ0KDQouc3BhbkNsYXNzIHsNCiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7DQogIHRleHQtdW5kZXJsaW5lLXBvc2l0aW9uOiB1bmRlcjsNCn0NCiNsb2dvew0KIGRpc3BsYXk6IGlubGluZS1mbGV4Ow0KIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KDQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDOptionButton","sourcesContent":["<template>\r\n  <div\r\n    :title=\"properties.ControlTipText\"\r\n    class=\"outer-check\"\r\n    :style=\"cssStyleProperty\"\r\n    ref=\"componentRef\"\r\n    @click=\"optionBtnClick\"\r\n    :tabindex=\"properties.TabIndex\"\r\n    @mousedown=\"controlEditMode\"\r\n    @keydown.enter.prevent=\"setContentEditable($event, true)\"\r\n    @contextmenu=\"isEditMode ? openTextContextMenu($event): parentConextMenu($event)\"\r\n  >\r\n  <label class=\"control\" :style=\"controlStyleObj\">\r\n    <input\r\n        @change=\"handleChange($event, optionBtnRef)\"\r\n        @click=\"setValue()\"\r\n        ref=\"optBtnInput\"\r\n        :name=\"properties.Name\"\r\n        :tabindex=\"properties.TabIndex\"\r\n        :disabled=\"getDisableValue\"\r\n        type=\"radio\"\r\n        class=\"control-input visually-hidden\" />\r\n      <span\r\n        :class=\"['control-indicator', getCheckStyle]\"\r\n        :style=\"controlIndicatorStyleObj\"\r\n        ref=\"spanRef\"\r\n      ></span\r\n    ></label>\r\n      <div id=\"logo\" ref=\"logoRef\" :style=\"reverseStyle\">\r\n      <img v-if=\"properties.Picture\" id=\"img\" :src=\"properties.Picture\" :style=\"[imageProperty,imagePos]\" ref=\"imageRef\">\r\n        <div ref=\"textSpanRef\"\r\n          v-if=\"!syncIsEditMode || isRunMode\"\r\n          @click=\"isRunMode && makeChecked($event)\"\r\n          :style=\"labelStyle\"\r\n        >\r\n          <span :style=\"spanStyleObj\">{{ computedCaption.afterbeginCaption }}</span>\r\n          <span class=\"spanStyle\" :style=\"spanStyleObj\">{{\r\n            computedCaption.acceleratorCaption\r\n          }}</span>\r\n          <span :style=\"spanStyleObj\">{{ computedCaption.beforeendCaption }}</span>\r\n        </div>\r\n        <FDEditableText\r\n          v-else\r\n          :editable=\"isRunMode === false && syncIsEditMode\"\r\n          :style=\"[labelStyle, {color: !properties.Enabled ? 'gray' : ''}]\"\r\n          :caption=\"properties.Caption\"\r\n          ref=\"editableTextRef\"\r\n          @updateCaption=\"updateCaption\"\r\n          @releaseEditMode=\"releaseEditMode\"\r\n        >\r\n        </FDEditableText>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Ref, Mixins, Watch, Vue } from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport FDEditableText from '@/FormDesigner/components/atoms/FDEditableText/index.vue'\r\n\r\n@Component({\r\n  name: 'FDOptionButton',\r\n  components: {\r\n    FDEditableText\r\n  }\r\n})\r\nexport default class FDOptionButton extends Mixins(FdControlVue) {\r\n  @Ref('componentRef') componentRef: HTMLDivElement\r\n  @Ref('optBtnInput') optBtnInput!: HTMLInputElement;\r\n  @Ref('spanRef') spanRef!: HTMLSpanElement;\r\n  @Ref('textSpanRef') textSpanRef!: HTMLDivElement;\r\n  @Ref('imageRef') imageRef: HTMLImageElement\r\n  @Ref('logoRef') logoRef : HTMLDivElement\r\n  @Ref('editableTextRef') editableTextRef!: FDEditableText\r\n  $el: HTMLDivElement\r\n  alignItem: boolean = false\r\n  get logoStyleObj (): Partial<CSSStyleDeclaration> {\r\n    return {\r\n      ...this.reverseStyle,\r\n      position: 'relative',\r\n      display: 'flex',\r\n      alignSelf: this.alignItem ? 'baseline' : 'center',\r\n      width: `${this.properties.Width! - 15}px`,\r\n      overflow: 'hidden'\r\n    }\r\n  }\r\n\r\n  get getCheckStyle () {\r\n    if (this.properties.Enabled) {\r\n      if (this.properties.Value === 'True') {\r\n        return 'trueImage'\r\n      } else if (this.properties.Value === '') {\r\n        return 'disabledImage'\r\n      }\r\n    } else {\r\n      if ((this.properties.Value === 'True') || (this.properties.Value === '')) {\r\n        return 'disabledImage'\r\n      }\r\n    }\r\n  }\r\n\r\n  get controlStyleObj () {\r\n    const controlProp = this.properties\r\n    return {\r\n      order: controlProp.Alignment === 1 ? '0' : '1',\r\n      position: 'sticky',\r\n      top: `${controlProp.Height! / 2 - 10}px`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description  updates Value property and the sets the backGround in runMode\r\n   * @function setValue\r\n   */\r\n  setValue () {\r\n    if (this.isRunMode) {\r\n      this.updateDataModel({ propertyName: 'Value', value: 'true' })\r\n      this.spanRef.style.backgroundColor = 'white'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description  watches Value property and the sets the checked\r\n   * @function verifyValue\r\n   */\r\n  @Watch('properties.Value', {\r\n    deep: true\r\n  })\r\n  verifyValue () {\r\n    if (this.isRunMode) {\r\n      if (this.properties.Enabled && !this.properties.Locked) {\r\n        this.handleValue(this.properties.Value! as string)\r\n      }\r\n    } else {\r\n      this.handleValue(this.properties.Value! as string)\r\n    }\r\n  }\r\n\r\n  handleValue (newVal: string) {\r\n    let tempValue = newVal.toLowerCase()\r\n    const checkDiv = this.optBtnInput\r\n    if (!isNaN(parseInt(newVal))) {\r\n      if (parseInt(newVal) === 0) {\r\n        this.spanRef.style.backgroundColor = 'white'\r\n        checkDiv.checked = false\r\n      } else {\r\n        this.spanRef.style.backgroundColor = 'white'\r\n        checkDiv.checked = true\r\n      }\r\n    } else if (tempValue === 'true') {\r\n      this.spanRef.style.backgroundColor = 'white'\r\n      checkDiv.checked = true\r\n    } else if (tempValue === 'false') {\r\n      this.spanRef.style.backgroundColor = 'white'\r\n      checkDiv.checked = false\r\n    } else {\r\n      checkDiv.checked = true\r\n      this.spanRef.style.backgroundColor = 'rgba(220, 220, 220, 1)'\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Font.FontSize', { deep: true })\r\n  autoSizeValidateOnFontChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n\r\n  @Watch('properties.WordWrap', { deep: true })\r\n  autoSizeValidateOnWordWrapChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Caption', { deep: true })\r\n  autoSizeValidateOnCaptionChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n  @Watch('properties.AutoSize', { deep: true })\r\n  autoSize () {\r\n    this.updateAutoSize()\r\n  }\r\n\r\n    @Watch('properties.Picture')\r\n  setPictureSize () {\r\n    if (this.properties.Picture) {\r\n      this.$nextTick(() => {\r\n        this.onPictureLoad()\r\n        this.positionLogo(this.properties.PicturePosition)\r\n        if (this.properties.AutoSize) {\r\n          this.updateAutoSize()\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.Height')\r\n    updateImageSizeHeight () {\r\n      if (this.properties.Picture) {\r\n        this.positionLogo(this.properties.PicturePosition)\r\n        this.pictureSize()\r\n      }\r\n    }\r\n  @Watch('properties.Width')\r\n  updateImageSizeWidth () {\r\n    if (this.properties.Picture) {\r\n      this.positionLogo(this.properties.PicturePosition)\r\n      this.pictureSize()\r\n    }\r\n  }\r\n  @Watch('properties.PicturePosition')\r\n  updatePicturePosition () {\r\n    if (this.properties.Picture) {\r\n      this.positionLogo(this.properties.PicturePosition)\r\n      if (this.properties.AutoSize) {\r\n        this.updateAutoSize()\r\n      }\r\n    }\r\n  }\r\n  @Watch('properties.TextAlign')\r\n  autoSizeOnTextAlignment () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n  @Watch('properties.BorderStyle')\r\n  autoSizeOnBorderStyleChange () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description updateAutoSize calls Vuex Actions to update object\r\n   * @function updateAutoSize\r\n   * @override\r\n   */\r\n  updateAutoSize () {\r\n    if (this.properties.AutoSize === true) {\r\n      const imgStyle = {\r\n        width: 'fit-content',\r\n        height: 'fit-content'\r\n      }\r\n      this.imageProperty = imgStyle\r\n      if (this.properties.Picture) {\r\n        this.positionLogo(this.properties.PicturePosition)\r\n      }\r\n      this.$nextTick(() => {\r\n        const { width, height } = this.getWidthHeight()\r\n        this.updateDataModel({\r\n          propertyName: 'Height',\r\n          value: height + 5\r\n        })\r\n        this.updateDataModel({\r\n          propertyName: 'Width',\r\n          value: width\r\n        })\r\n      })\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description  watches Enabled property and the sets the backgroundColor\r\n   * @function checkEnabled\r\n   */\r\n  @Watch('properties.Enabled', {\r\n    deep: true\r\n  })\r\n  checkEnabled (newVal: boolean, oldVal: boolean) {\r\n    if (!this.properties.Enabled) {\r\n      this.spanRef.style.backgroundColor = 'rgba(220, 220, 220, 1)'\r\n    } else {\r\n      this.spanRef.style.backgroundColor = 'white'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description getDisableValue checks for the RunMode of the control and then returns after checking for the Enabled\r\n   * and the Locked property\r\n   * @function getDisableValue\r\n   */\r\n  get getDisableValue () {\r\n    if (this.isRunMode) {\r\n      return this.properties.Enabled === false || this.properties.Locked\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description  makeChecked controls the checked of the control in RunMode\r\n   * @function makeChecked\r\n   */\r\n  makeChecked () {\r\n    if (!this.getDisableValue) {\r\n      this.optBtnInput.checked = true\r\n      this.spanRef.style.backgroundColor = 'white'\r\n      this.updateDataModel({\r\n        propertyName: 'Value',\r\n        value: this.optBtnInput.checked\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in label tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function cssStyleProperty\r\n   *\r\n   */\r\n  get cssStyleProperty () {\r\n    const controlProp = this.properties\r\n    this.reverseStyle.justifyContent = 'center'\r\n    if (!controlProp.Picture) {\r\n      this.reverseStyle.justifyContent = controlProp.TextAlign === 0 ? 'flex-start' : controlProp.TextAlign === 1 ? 'center' : 'flex-end'\r\n    }\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 20,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true\r\n      }\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'grid' : 'none'\r\n    } else {\r\n      display = 'grid'\r\n    }\r\n    const alignItems = controlProp.Picture ? 'inherit' : 'center'\r\n    if (controlProp.Picture) {\r\n      Vue.nextTick(() => {\r\n        this.labelAlignment()\r\n      })\r\n    }\r\n    return {\r\n      left: `${controlProp.Left}px`,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      top: `${controlProp.Top}px`,\r\n      borderColor: controlProp.BorderColor,\r\n      textAlign:\r\n        controlProp.TextAlign === 0\r\n          ? 'left'\r\n          : controlProp.TextAlign === 1\r\n            ? 'center'\r\n            : 'right',\r\n      border: this.getBorderStyle,\r\n      backgroundColor: controlProp.BackStyle\r\n        ? controlProp.BackColor\r\n        : 'transparent',\r\n      whiteSpace: controlProp.WordWrap ? 'pre-wrap' : 'pre',\r\n      wordBreak: controlProp.WordWrap ? 'break-all' : 'normal',\r\n      color:\r\n        controlProp.Enabled === true ? controlProp.ForeColor : this.getEnabled,\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      fontWeight: font.FontBold\r\n        ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      textUnderlinePosition: 'under',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\r\n      display: display,\r\n      overflow: 'hidden',\r\n      gridTemplateColumns: controlProp.Alignment === 1 ? '12px auto' : 'auto 12px',\r\n      gridTemplateRows: '100%',\r\n      gap: '2px',\r\n      // alignItems: font.FontSize! > 17 ? 'center' : '',\r\n      alignContent: 'center',\r\n      boxShadow: 'none',\r\n      alignItems: alignItems\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in span tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function controlIndicatorStyleObj\r\n   *\r\n   */\r\n  get controlIndicatorStyleObj () {\r\n    const controlProp = this.properties\r\n    return {\r\n      boxShadow:\r\n        controlProp.SpecialEffect === 0 ? '0px 0px gray' : '-1px -1px gray'\r\n    }\r\n  }\r\n\r\n  get setAlignment () {\r\n    return {\r\n      editMode: this.isEditMode,\r\n      caption: this.properties.Caption\r\n    }\r\n  }\r\n\r\n  @Watch('setAlignment', { deep: true })\r\n  editableTextVerify () {\r\n    if (this.isEditMode) {\r\n      Vue.nextTick(() => {\r\n        if (this.isEditMode && this.editableTextRef.$el.clientHeight > this.properties.Height!) {\r\n          this.alignItem = true\r\n        } else {\r\n          this.alignItem = false\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n\r\n  @Watch('properties.Caption', { deep: true })\r\n  handleCaption () {\r\n    if (this.properties.AutoSize) {\r\n      this.updateAutoSize()\r\n    }\r\n  }\r\n  /**\r\n   * @description  sets controlSource if present and updates Value property\r\n   * @function controlSource\r\n   */\r\n  mounted () {\r\n    this.verifyValue()\r\n    this.$el.focus()\r\n    this.controlSource()\r\n  }\r\n  releaseEditMode (event: KeyboardEvent) {\r\n    this.$el.focus()\r\n    this.setContentEditable(event, false)\r\n  }\r\n  optionBtnClick (event: MouseEvent) {\r\n    if (this.toolBoxSelectControl === 'Select') {\r\n      event.stopPropagation()\r\n      this.selectedItem(event)\r\n      if (this.isEditMode) {\r\n        (this.editableTextRef.$el as HTMLSpanElement).focus()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  left: 100px;\r\n  top: 100px;\r\n  box-sizing: border-box;\r\n}\r\n.outer-check {\r\n  height: 0px;\r\n  width: 0px;\r\n  left: 0px;\r\n  top: 0px;\r\n  min-width: 14px;\r\n  min-height: 15px;\r\n  background-color: rgb(238, 238, 238);\r\n  box-shadow: -1px -1px gray;\r\n  overflow: hidden;\r\n  align-items: center;\r\n}\r\n\r\n.radio {\r\n  background-color: rgb(238, 238, 238);\r\n  box-shadow: 0.1px 0.1px 1px 1px gray;\r\n  width: 150px;\r\n  height: 23px;\r\n}\r\n\r\n.radio-input {\r\n  margin: 0px 0px 0px 5px;\r\n}\r\n\r\n.radio-label {\r\n  float: left;\r\n  font-size: 11px;\r\n  padding-top: 5px;\r\n}\r\n\r\n.outer-option {\r\n  position: relative;\r\n  height: 30px;\r\n  width: 150px;\r\n  background-color: rgb(238, 238, 238);\r\n  box-shadow: -1px -1px gray;\r\n  overflow: hidden;\r\n}\r\n\r\n.visually-hidden {\r\n  border: 0;\r\n  clip: rect(0, 0, 0, 0);\r\n  height: 1px;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  padding: 0;\r\n  position: absolute;\r\n  width: 1px;\r\n}\r\n\r\n.control {\r\n  display: inline-flex;\r\n  position: sticky;\r\n  top: 47%;\r\n  align-self: center;\r\n}\r\n.control-indicator {\r\n  width: 10px;\r\n  height: 10px;\r\n  margin-left: 3px;\r\n  border-radius: 14px;\r\n  background-color: white;\r\n}\r\n\r\n .trueImage {\r\n  background-image: url(../../../../assets/optionmark-img.png);\r\n  background-size: 5px;\r\n  border-radius: 50%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n }\r\n\r\n .disabledImage {\r\n  background-image: url(../../../../assets/optionbuttondisabled.png);\r\n  background-size: 5px;\r\n  border-radius: 50%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n }\r\n\r\n.spanClass {\r\n  text-decoration: underline;\r\n  text-underline-position: under;\r\n}\r\n#logo{\r\n display: inline-flex;\r\n justify-content: center;\r\n}\r\n\r\n</style>\r\n"]}]}