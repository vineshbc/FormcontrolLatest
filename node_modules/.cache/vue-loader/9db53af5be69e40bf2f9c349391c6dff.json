{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/UseTest/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/UseTest/index.vue","mtime":1603300826000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnRlc3Qgew0KICBib3JkZXI6IDFweCBzb2xpZCBibHVlOw0KICBwYWRkaW5nLWxlZnQ6IDEwcHg7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/UseTest","sourcesContent":["<template>\r\n  <div class='test'>\r\n    Name : {{ propControlData.properties.Name }}\r\n    <br/>\r\n    ID : {{ propControlData.properties.ID }}\r\n    <br/>\r\n    Selected : {{selectedControlTest}}\r\n    <br/>\r\n    <button @click=\"onAdd\">add</button>\r\n    <button @click=\"onUpdate\">update</button>\r\n    <button @click=\"onDelete\">delete</button>\r\n    <button @click=\"onSelect\">select</button>\r\n    <use-test v-for=\"(key, index) in controls\"\r\n      :key=\"index\"\r\n      :controlId=\"key\"\r\n      :userFormId=\"userFormId\"/>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { Component, Prop } from 'vue-property-decorator'\r\nimport { State, Action } from 'vuex-class'\r\nimport { IaddControl, IupdateControl, IdeleteControl, IselectControl, IfdEmitAction, IideEmitAction } from '@/storeModules/fd/actions'\r\n@Component({\r\n  name: 'UseTest'\r\n})\r\nexport default class UseTest extends FdControlVue {\r\n  $parent!: UseTest | Vue\r\n  @Action('fd/fdActionSample') fdActionSample!: (payload: any) => void\r\n  @Action('fd/addControl') addControl!: (payload: IaddControl) => void\r\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void\r\n  @Action('fd/deleteControl') deleteControl!: (payload: IdeleteControl) => void\r\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void\r\n  @Action('fd/fdEmitAction') fdEmitAction!: (payload: IfdEmitAction) => void\r\n  @Action('fd/ideEmitAction') ideEmitAction!: (payload: IideEmitAction) => void\r\n  @State(state => state.fd.userformData) userformData!: userformData\r\n  @State(state => state.fd.selectedControls) selectedControlTest!: selectedControls\r\n  @Prop({ required: true, type: String }) public controlId! : string\r\n  @Prop({ required: true, type: String }) public userFormId! : string\r\n\r\n  onAdd () {\r\n    const propData = this.propControlData.properties\r\n    const id = propData.ID as string + 1\r\n    const Name = propData.Name ? propData.Name : ''\r\n\r\n    const addTarget = this\r\n    this.addControl({\r\n      userFormId: this.userFormId,\r\n      controlId: this.controlId,\r\n      addId: id,\r\n      item: { properties: { Name: Name, ID: id }, controls: [], extraDatas: null, type: 'Label' }\r\n    })\r\n  }\r\n\r\n  onUpdate () {\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: this.controlId,\r\n      propertyName: 'Name',\r\n      value: 'update'\r\n    })\r\n  }\r\n\r\n  onDelete () {\r\n    if (this.$parent instanceof UseTest) {\r\n      this.deleteControl({\r\n        userFormId: this.userFormId,\r\n        parentId: this.$parent.controlId,\r\n        targetId: this.controlId\r\n      })\r\n    }\r\n  }\r\n\r\n  onSelect () {\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: { container: [this.userFormId], selected: [this.controlId] }\r\n    })\r\n  }\r\n\r\n  get propControlData () :controlData {\r\n    return this.userformData[this.userFormId][this.controlId]\r\n  }\r\n\r\n  get controls () {\r\n    return this.propControlData.controls\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.test {\r\n  border: 1px solid blue;\r\n  padding-left: 10px;\r\n}\r\n</style>\r\n"]}]}