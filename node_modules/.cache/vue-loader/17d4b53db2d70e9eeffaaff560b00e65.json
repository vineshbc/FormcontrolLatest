{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDSpinButton/index.vue?vue&type=style&index=0&id=1239be18&lang=scss&scoped=true&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDSpinButton/index.vue","mtime":1611296894000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5zcGluIHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7DQogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQp9DQouc3Bpbi1vcmllbnRlZCB7DQogIGRpc3BsYXk6IGdyaWQ7DQogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjsNCn0NCi5vdXRlclNwaW5EaXYgew0KICB3aWR0aDogMHB4Ow0KICBoZWlnaHQ6IDBweDsNCiAgbGVmdDogMHB4Ow0KICB0b3A6IDBweDsNCn0NCi5idXR0b24tZWxlbWVudC10b3Agew0KICBib3JkZXItY29sb3I6IGxpZ2h0Z3JleTsNCn0NCg0KLmJ1dHRvbi1lbGVtZW50LWJvdHRvbSB7DQogIGJvcmRlci1jb2xvcjogbGlnaHRncmV5Ow0KfQ0KOmZvY3VzIHsNCiAgb3V0bGluZTogbm9uZTsNCn0NCi5idXR0b24tZWxlbWVudC10b3BbcnVubW9kZV06YWN0aXZlIHsNCiAgYm9yZGVyLXN0eWxlOiBvdXRzZXQgIWltcG9ydGFudDsNCn0NCi5idXR0b24tZWxlbWVudC1ib3R0b21bcnVubW9kZV06YWN0aXZlIHsNCiAgYm9yZGVyLXN0eWxlOiBvdXRzZXQgIWltcG9ydGFudDsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDSpinButton","sourcesContent":["<template>\r\n  <div\r\n  @mousedown=\"controlEditMode\"\r\n  :tabindex=\"properties.TabIndex\"\r\n  @keydown.enter=\"setContentEditable($event, true)\"\r\n  @keydown.esc=\"setContentEditable($event, false)\"\r\n  v-on=\"eventStoppers()\"\r\n  >\r\n<div\r\n      class=\"outerSpinDiv\"\r\n      :class=\"classStyle\"\r\n      :style=\"styleObj\"\r\n      :title=\"properties.ControlTipText\"\r\n      @click=\"spinButtonClick\"\r\n    >\r\n      <div\r\n        @click=\"\r\n          !getDisableValue\r\n            ? checkOtherOrientations()\r\n              ? increaseTheValue((isClicked = true))\r\n              : decreaseTheValue((isClicked = true))\r\n            : ''\r\n        \"\r\n      >\r\n        <button\r\n          class=\"button-element-top\"\r\n          :style=\"styleButton\"\r\n          :runmode=\"getDisableValue\"\r\n          @blur=\"isClicked = false\"\r\n        >\r\n          <div v-if=\"checkOtherOrientations()\" >\r\n            <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" :height=\"(properties.Height/2 > 60 && properties.Height < 850) ? properties.Height/2 - 45 : properties.Height >= 850 ? 425 : 15\" :width=\"(properties.Width/2 > 60 && properties.Width < 850) ? properties.Width/2 - 45  : properties.Width >= 850 ? 425 : 15\"\r\n        viewBox=\"0 0 810.000000 460.000000\"\r\n        preserveAspectRatio=\"xMidYMid meet\">\r\n          <g :fill=\"properties.Enabled?properties.ForeColor:'rgb(200,200,200)'\"\r\n          transform=\"translate(0.000000,460.000000) scale(0.100000,-0.100000)\"\r\n          stroke=\"none\">\r\n          <path d=\"M2055 2320 c-1089 -1254 -1980 -2288 -1980 -2298 0 -16 213 -17 3975\r\n          -17 3525 0 3975 2 3977 15 5 23 -3942 4574 -3969 4578 -19 2 -357 -382 -2003\r\n          -2278z\"/>\r\n          </g>\r\n      </svg>\r\n          </div>\r\n          <div v-else>\r\n            <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" id=\"la\" class=\"leftRightArrow\"\r\n        viewBox=\"0 0 460.000000 810.000000\"  :height=\"(properties.Height/2 > 60 && properties.Height < 850) ? properties.Height/2 - 45 : properties.Height >= 850 ? 425 : 15\" :width=\"(properties.Width/2 > 60 && properties.Width < 850) ? properties.Width/2 - 45  : properties.Width >= 850 ? 425 : 15\"\r\n        preserveAspectRatio=\"xMidYMid meet\">\r\n          <g :fill=\"properties.Enabled?properties.ForeColor:'rgb(200,200,200)'\"\r\n          transform=\"translate(0.000000,810.000000) scale(0.100000,-0.100000)\"\r\n          stroke=\"none\">\r\n            <path d=\"M2285 6055 c-1874 -1623 -2280 -1980 -2280 -2000 0 -20 408 -378\r\n             2280 -2005 1254 -1089 2287 -1979 2295 -1977 13 2 15 452 15 3977 0 3525 -2\r\n             3975 -15 3977 -8 2 -1041 -886 -2295 -1972z\"/>\r\n          </g>\r\n        </svg>\r\n          </div>\r\n        </button>\r\n      </div>\r\n      <div\r\n        @click=\"\r\n          !getDisableValue\r\n            ? checkOtherOrientations()\r\n              ? decreaseTheValue((isClicked = true))\r\n              : increaseTheValue((isClicked = true))\r\n            : ''\r\n        \"\r\n      >\r\n        <button\r\n          class=\"button-element-bottom\"\r\n          :style=\"styleButton\"\r\n          :runmode=\"getDisableValue\"\r\n          @blur=\"isClicked = false\"\r\n        >\r\n          <div v-if=\"checkOtherOrientations()\">\r\n            <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" :height=\"(properties.Height/2 > 60 && properties.Height < 850) ? properties.Height/2 - 45 : properties.Height >= 850 ? 425 : 15\" :width=\"(properties.Width/2 > 60 && properties.Width < 850) ? properties.Width/2 - 45  : properties.Width >= 850 ? 425 : 15\"\r\n        viewBox=\"0 0 810.000000 460.000000\"\r\n        preserveAspectRatio=\"xMidYMid meet\">\r\n          <g :fill=\"properties.Enabled?properties.ForeColor:'rgb(200,200,200)'\"\r\n          transform=\"translate(0.000000,460.000000) scale(0.100000,-0.100000)\"\r\n          stroke=\"none\">\r\n          <path d=\"M74 4585 c-4 -8 0 -23 7 -32 8 -9 897 -1036 1977 -2282 1612 -1862\r\n          1967 -2266 1987 -2266 20 0 378 408 2005 2280 1089 1254 1979 2287 1977 2295\r\n          -2 13 -453 15 -3975 18 -3540 2 -3973 0 -3978 -13z\"/>\r\n          </g>\r\n      </svg>\r\n          </div>\r\n          <div v-else>\r\n            <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" id=\"ra\" class=\"leftRightArrow\" :height=\"(properties.Height/2 > 60 && properties.Height < 850) ? properties.Height/2 - 45 : properties.Height >= 850 ? 425 : 15\" :width=\"(properties.Width/2 > 60 && properties.Width < 850) ? properties.Width/2 - 45  : properties.Width >= 850 ? 425 : 15\"\r\n        viewBox=\"0 0 460.000000 810.000000\"\r\n        preserveAspectRatio=\"xMidYMid meet\">\r\n          <g :fill=\"properties.Enabled?properties.ForeColor:'rgb(200,200,200)'\"\r\n          transform=\"translate(0.000000,810.000000) scale(0.100000,-0.100000)\"\r\n          stroke=\"none\">\r\n            <path d=\"M5 8018 c-3 -7 -4 -1797 -3 -3978 3 -3515 5 -3965 18 -3967 8 -2\r\n            1041 886 2295 1972 1874 1623 2280 1980 2280 2000 0 20 -408 378 -2280 2004\r\n            -1254 1090 -2286 1981 -2293 1981 -7 0 -15 -6 -17 -12z\"/>\r\n            </g>\r\n      </svg>\r\n          </div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Watch, Emit, Mixins } from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { controlProperties } from '@/FormDesigner/controls-properties'\r\nexport interface IOrientationvalues {\r\n  orientation?: number;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\n@Component({\r\n  name: 'FDSpinButton',\r\n  components: {\r\n  }\r\n})\r\nexport default class FDSpinButton extends Mixins(FdControlVue) {\r\n  getForeColor: string = '';\r\n  isClicked: boolean = false;\r\n  classStyle: string = 'spin';\r\n  orientedValue: boolean = true;\r\n  svgWidth: number = 0;\r\n  $el: HTMLDivElement\r\n\r\n  /**\r\n   * @description getDisableValue checks for the RunMode or the EditMode of the control and then returns after checking for the Enabled  property\r\n   * @function getDisableValue\r\n   */\r\n  get getDisableValue () {\r\n    if (this.isRunMode || this.isEditMode) {\r\n      return this.properties.Enabled === false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  setSvgWidth () {\r\n    if (this.properties.Width! / this.properties.Height! < 6) {\r\n      this.svgWidth = this.properties.Width! / 10\r\n      return this.svgWidth - 20\r\n    } else {\r\n      return this.svgWidth - 20\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function styleObj\r\n   *\r\n   */\r\n  protected get styleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      ...this.baseStyle,\r\n      overflow: 'hidden',\r\n      left: `${controlProp.Left}px`,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      top: `${controlProp.Top}px`,\r\n      backgroundColor: controlProp.BackColor,\r\n      display:\r\n        controlProp.Visible && this.isRunMode\r\n          ? ''\r\n          : controlProp.Visible === false && this.isRunMode\r\n            ? 'none'\r\n            : ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in button tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function styleButton\r\n   *\r\n   */\r\n  protected get styleButton (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      ...this.baseStyle,\r\n      backgroundColor: controlProp.BackColor,\r\n      overflow: 'hidden',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      display:\r\n        controlProp.Visible && this.isRunMode\r\n          ? 'flex'\r\n          : controlProp.Visible === false && this.isRunMode\r\n            ? 'none'\r\n            : 'flex',\r\n      outline: controlProp.Enabled\r\n        ? this.isClicked\r\n          ? '1px solid black'\r\n          : 'none'\r\n        : 'none',\r\n      outlineOffset: this.isClicked ? '-5px' : '-5px',\r\n      width: '100%',\r\n      height: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description changes the syling of the SpinButton based on the values of the getter orientedValues\r\n   * @function checkOrientation\r\n   *\r\n   */\r\n  @Watch('orientationValues', { deep: true })\r\n  checkOrientation (newVal: IOrientationvalues, oldVal: IOrientationvalues) {\r\n    if (newVal.orientation === 1) {\r\n      this.classStyle = 'spin'\r\n    } else if (newVal.orientation === 2) {\r\n      this.classStyle = 'spin-oriented'\r\n    } else {\r\n      this.orientedValue = this.checkOtherOrientations()\r\n      if (this.orientedValue) {\r\n        this.classStyle = 'spin'\r\n      } else {\r\n        this.classStyle = 'spin-oriented'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description checkOtherOrientations returns string value from\r\n   * controlProperties.controlsOrientationProp\r\n   * @function checkOtherOrientations\r\n   * @returns boolean value\r\n   * @override\r\n   */\r\n  checkOtherOrientations (): boolean {\r\n    return controlProperties.controlsOrientationProp(this.data)\r\n  }\r\n\r\n  /**\r\n   * @description orientationValues is the getter used for all the values that affect the Orientation property\r\n   *  @function orientationValues\r\n   */\r\n  get orientationValues () {\r\n    return {\r\n      orientation: this.properties.Orientation,\r\n      width: this.properties.Width,\r\n      height: this.properties.Height\r\n    }\r\n  }\r\n\r\n  mounted () {\r\n    this.$el.focus()\r\n    if (this.properties.Orientation === 0) {\r\n      this.orientationValues.orientation = 0\r\n      this.orientationValues.width = 0\r\n      this.orientationValues.height = 0\r\n      const newValues:IOrientationvalues = this.orientationValues\r\n      this.checkOrientation(newValues, this.orientationValues)\r\n    }\r\n  }\r\n  eventStoppers () {\r\n    const eventStop = (event: Event) => event.stopPropagation()\r\n    return this.isEditMode === false ? null : {\r\n      keydown: eventStop\r\n    }\r\n  }\r\n  spinButtonClick (event: MouseEvent) {\r\n    if (this.toolBoxSelectControl === 'Select') {\r\n      event.stopPropagation()\r\n      this.selectedItem(event)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.spin {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  box-sizing: border-box;\r\n}\r\n.spin-oriented {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n}\r\n.outerSpinDiv {\r\n  width: 0px;\r\n  height: 0px;\r\n  left: 0px;\r\n  top: 0px;\r\n}\r\n.button-element-top {\r\n  border-color: lightgrey;\r\n}\r\n\r\n.button-element-bottom {\r\n  border-color: lightgrey;\r\n}\r\n:focus {\r\n  outline: none;\r\n}\r\n.button-element-top[runmode]:active {\r\n  border-style: outset !important;\r\n}\r\n.button-element-bottom[runmode]:active {\r\n  border-style: outset !important;\r\n}\r\n</style>\r\n"]}]}