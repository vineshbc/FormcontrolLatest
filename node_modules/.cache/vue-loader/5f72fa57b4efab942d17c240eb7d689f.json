{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDDragSelector/DragSelector.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDDragSelector/DragSelector.vue","mtime":1612197584000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kcmFnLXNlbGVjdG9yLXdyYXBwZXIgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBjdXJzb3I6IGNyb3NzaGFpcjsKICAgIHVzZXItc2VsZWN0OiBub25lOwp9CgouZHJhZy1hcmVhLWJveCB7CiAgICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQo="},{"version":3,"sources":["DragSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"DragSelector.vue","sourceRoot":"src/FormDesigner/components/organisms/FDDragSelector","sourcesContent":["<template>\r\n    <div class=\"drag-selector-wrapper\" @mousedown=\"handleMouseDown\" @click=\"addControlObj\">\r\n        <div class=\"drag-area-box\" :style=\"selectAreaStyle\"></div>\r\n        <slot></slot>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport emitter from './mixins/emitter'\r\nimport { throttle } from './utils/utils'\r\n\r\n/**\r\n   * 需求：框选子项\r\n   * 组件：框选区，框选子项\r\n   * 实现方法：鼠标在框选区长按拖动时计算拖动坐标，如果框选进入范围，改变为选中状态，单击任意地方取消选中\r\n   * 1. 开始拖动前计算各个子项的坐标\r\n   * 2. 拖动过程中进行判断，如果进入被框选范围，触发该子项修改状态\r\n   */\r\nconst POINT_MODEL = ['offsetX', 'offsetY', 'clientX', 'clientY']\r\n\r\nexport default {\r\n  name: 'drag-selector',\r\n\r\n  mixins: [emitter],\r\n\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default () {\r\n        return []\r\n      }\r\n    },\r\n    isEditMode: {\r\n      type: Boolean,\r\n      default () {\r\n        return false\r\n      }\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      dragging: false,\r\n      handleMouseMoveThrottled: () => {\r\n      },\r\n      emitChangeThrottled: () => {\r\n      },\r\n      startPoint: {\r\n        offsetX: 0,\r\n        offsetY: 0\r\n      },\r\n      endPoint: {\r\n        offsetX: 0,\r\n        offsetY: 0\r\n      },\r\n      point: {\r\n        offsetX: 0,\r\n        offsetY: 0\r\n      },\r\n      childItems: [],\r\n      childrenDOMPoints: [],\r\n      browserPoint: {\r\n      },\r\n      selfPoint: {\r\n        clientX: 0,\r\n        clientY: 0\r\n      }\r\n    }\r\n  },\r\n\r\n  created () {\r\n    this.registerEvents()\r\n  },\r\n\r\n  mounted () {\r\n    this.handleMouseMoveThrottled = throttle(this.handleMouseMove)\r\n    this.emitChangeThrottled = throttle(this.emitChange, 200)\r\n  },\r\n\r\n  methods: {\r\n    registerEvents () {\r\n      this.$on('on-drag-selector-item-add', item => {\r\n        if (item) this.childItems.push(item)\r\n      })\r\n      this.$on('on-drag-selector-item-remove', item => {\r\n        const index = this.childItems.indexOf(item)\r\n        if (index >= 0) this.childItems.splice(index, 1)\r\n      })\r\n      this.$on('drag-selector-item-change', ({ selected, value }) => {\r\n        const index = this.value.indexOf(value)\r\n        if (selected) {\r\n          this.value.push(value)\r\n        } else if (index !== -1) {\r\n          this.value.splice(index, 1)\r\n        }\r\n        this.emitChangeThrottled()\r\n      })\r\n    },\r\n\r\n    emitChange () {\r\n      this.$emit('change', this.value)\r\n      this.$emit('input', this.value)\r\n    },\r\n\r\n    handleMouseDown (e) {\r\n      if (this.isEditMode) {\r\n        this.cancelAllSelect()\r\n        this.$nextTick(() => {\r\n          this.resetPoint(e)\r\n          this.updatePointData(this.point, e)\r\n          window.addEventListener('mouseup', this.handleMouseUp)\r\n          window.addEventListener('mousemove', this.handleMouseMoveThrottled)\r\n        })\r\n      }\r\n      this.$emit('deActiveControl', e)\r\n    },\r\n\r\n    handleMouseMove (e) {\r\n      if (!this.dragging) {\r\n        this.dragging = true\r\n      }\r\n      this.updatePointData(this.endPoint, e)\r\n      this.updatePointData(this.point, e)\r\n      this.$nextTick(() => {\r\n        this.childrenDOMPoints.forEach(child => {\r\n          const isSelected = this.checkIfChildInSelectArea(child.point)\r\n          child.instance.handleSelectChange(isSelected)\r\n        })\r\n      })\r\n    },\r\n\r\n    cancelAllSelect () {\r\n      this.childItems.forEach(child => {\r\n        child.handleSelectChange(false)\r\n      })\r\n    },\r\n\r\n    /**\r\n       * 判断框选区和子元素是否相交\r\n       *    框选区的左边距 小于 子元素的左边距加上其宽度\r\n       *    框选区的左边距加上其宽度 大于 子元素的左边距\r\n       *    框选区的上边距 小于 子元素的上边距加上其高度\r\n       *    框选区的上边距加上其高度 大于 子元素的上边距\r\n       */\r\n    checkIfChildInSelectArea (childItem) {\r\n      const startClientX = this.startPoint.clientX\r\n      const startClientY = this.startPoint.clientY\r\n      const endClientX = this.endPoint.clientX\r\n      const endClientY = this.endPoint.clientY\r\n      const selectPoint = {\r\n        left: Math.min(startClientX, endClientX),\r\n        top: Math.min(startClientY, endClientY),\r\n        width: Math.abs(startClientX - endClientX),\r\n        height: Math.abs(startClientY - endClientY)\r\n      }\r\n      return selectPoint.left <= childItem.left + childItem.width &&\r\n            selectPoint.left + selectPoint.width >= childItem.left &&\r\n            selectPoint.top <= childItem.top + childItem.height &&\r\n            selectPoint.top + selectPoint.height >= childItem.top\r\n    },\r\n\r\n    handleMouseUp (e) {\r\n      this.dragging = false\r\n      this.updatePointData(this.point, e)\r\n      this.dragSelectorControl(e)\r\n      this.resetPoint(e)\r\n      // this.emitChangeThrottled();\r\n      window.removeEventListener('mouseup', this.handleMouseUp)\r\n      window.removeEventListener('mousemove', this.handleMouseMoveThrottled)\r\n    },\r\n\r\n    /**\r\n       * 更新坐标值\r\n       * @param pointObj  通过pointData和POINT_MODEL指定的键，更新pointObj内的坐标值\r\n       * @param pointData 鼠标移动时的事件对象\r\n       */\r\n    updatePointData (pointObj, pointData) {\r\n      POINT_MODEL.forEach(key => {\r\n        this.$set(pointObj, key, pointData[key])\r\n      })\r\n    },\r\n\r\n    // TODO 可视区域宽高，用于防止在没有滚动条的情况拖动范围超出区域，但是还没实现\r\n    initBrowserPoint () {\r\n      this.browserPoint = {\r\n        clientWidth: document.body.clientWidth,\r\n        clientHeight: document.body.clientHeight,\r\n        scrollWidth: document.body.scrollWidth,\r\n        scrollHeight: document.body.scrollHeight\r\n      }\r\n    },\r\n\r\n    collectDOMPoints () {\r\n      const DOMRect = this.$el.getBoundingClientRect()\r\n      this.selfPoint = {\r\n        clientX: DOMRect.left || DOMRect.x,\r\n        clientY: DOMRect.top || DOMRect.y\r\n      }\r\n      this.childrenDOMPoints = this.childItems.map(child => ({\r\n        point: child.$el.getBoundingClientRect(),\r\n        instance: child\r\n      }))\r\n    },\r\n\r\n    resetPoint (e) {\r\n      this.updatePointData(this.startPoint, e)\r\n      this.updatePointData(this.endPoint, e)\r\n    },\r\n    dragSelectorControl (event) {\r\n      this.$emit('dragSelectorControl', event)\r\n    },\r\n    addControlObj (event) {\r\n      this.$emit('addControlObj', event)\r\n    }\r\n  },\r\n  computed: {\r\n    hasScrollX () {\r\n      return !(this.browserPoint.clientWidth - this.browserPoint.scrollWidth)\r\n    },\r\n\r\n    hasScrollY () {\r\n      return !(this.browserPoint.clientHeight - this.browserPoint.scrollHeight)\r\n    },\r\n    selectAreaStyle () {\r\n      const startClientX = this.startPoint.clientX - this.selfPoint.clientX\r\n      const endClientX = this.endPoint.clientX - this.selfPoint.clientX\r\n      const startClientY = this.startPoint.clientY - this.selfPoint.clientY\r\n      const endClientY = this.endPoint.clientY - this.selfPoint.clientY\r\n      const { left, top, width, height } = {\r\n        left: Math.min(startClientX, endClientX),\r\n        top: Math.min(startClientY, endClientY),\r\n        width: Math.abs(startClientX - endClientX),\r\n        height: Math.abs(startClientY - endClientY)\r\n      }\r\n      return {\r\n        left: `${left}px`,\r\n        top: `${top}px`,\r\n        width: `${width}px`,\r\n        height: `${height}px`,\r\n        zIndex: 444,\r\n        // backgroundColor: 'rgba(51, 51, 51, 0.5)',\r\n        position: 'absolute',\r\n        border: this.dragging ? '1px rgb(59, 58, 58) dashed' : ''\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // dragging: 'handleDraggingChange'\r\n    dragging (val) {\r\n      if (val) {\r\n        this.$emit('drag-start')\r\n        this.collectDOMPoints()\r\n        this.initBrowserPoint()\r\n      } else {\r\n        this.$emit('drag-end')\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n    .drag-selector-wrapper {\r\n        width: 100%;\r\n        height: 100%;\r\n        position: relative;\r\n        cursor: crosshair;\r\n        user-select: none;\r\n    }\r\n\r\n    .drag-area-box {\r\n        pointer-events: none;\r\n    }\r\n</style>\r\n"]}]}