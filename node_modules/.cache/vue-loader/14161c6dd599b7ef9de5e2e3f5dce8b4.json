{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDListBox/index.vue?vue&type=style&index=0&id=68d2befa&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDListBox/index.vue","mtime":1611296894000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoubGlzdFN0eWxlIHsNCiAgd2lkdGg6IDIwMHB4Ow0KICBoZWlnaHQ6IDIwMHB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7DQogIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7DQogIG92ZXJmbG93OiBhdXRvOw0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICAvKiBib3gtc2hhZG93OiAtMXB4IC0xcHggbGlnaHRncmF5OyAqLw0KfQ0KLmxpc3Qtb3V0ZXIgew0KICBib3JkZXI6IDAuMXB4IHNvbGlkIGxpZ2h0Z3JheTsNCiAgd2lkdGg6IDE2NHB4Ow0KICBoZWlnaHQ6IDEzMHB4Ow0KICBvdmVyZmxvdy15OiBhdXRvOw0KICBib3gtc2hhZG93OiAtMXB4IC0xcHggZ3JleTsNCn0NCi50ciB7DQogIG91dGxpbmU6IG5vbmU7DQogIGRpc3BsYXk6IGZsZXg7DQp9DQoudWwgew0KICBkaXNwbGF5OiBncmlkOw0KICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7DQogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsNCiAgbWFyZ2luLWJsb2NrLXN0YXJ0OiAwZW07DQogIG1hcmdpbi1ibG9jay1lbmQ6IDBlbTsNCiAgbWFyZ2luLWlubGluZS1zdGFydDogMHB4Ow0KICBtYXJnaW4taW5saW5lLWVuZDogMHB4Ow0KICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4Ow0KfQ0KLmxpIHsNCiAgLyogcGFkZGluZzogM3B4OyAqLw0KICBtYXJnaW46IDFweDsNCiAgdGV4dC1hbGlnbjogbGVmdDsNCiAgZm9udC1zaXplOiAxNHB4Ow0KICBoZWlnaHQ6IDE2cHg7DQogIGJvcmRlcjogMC41cHggc29saWQgd2hpdGU7DQogIGN1cnNvcjogcG9pbnRlcjsNCn0NCi5saTpob3ZlciB7DQogIG1hcmdpbjogMXB4Ow0KICBib3JkZXItY29sb3I6IHJnYig1MiwgNTIsIDI1NSk7DQogIGJvcmRlci1yYWRpdXM6IDJweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDU5LCAxMjIsIDIzMSk7DQp9DQouZmEgew0KICBtYXJnaW4tbGVmdDogNHB4Ow0KICBtYXJnaW4tdG9wOiAzcHg7DQp9DQouc3BhbiB7DQogIC8qIG1hcmdpbjogNHB4OyAgKi8NCiAgbWFyZ2luLWxlZnQ6IDdweDsNCiAgbWFyZ2luLXRvcDogMHB4Ow0KICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsNCn0NCi5kaXYgew0KICBkaXNwbGF5OiBncmlkOw0KICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjsNCn0NCi5saXN0Ym94IHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOw0KICBoZWlnaHQ6IDEwMHB4Ow0KICB3aWR0aDogMzAwcHg7DQogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsNCiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTsNCn0NCi5jb2x1bW5IZWFkcyB7DQogIGhlaWdodDogMTkuMnB4Ow0KICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOw0KfQ0KLm9wdGlvbnNJdGVtcyB7DQogIGRpc3BsYXk6IGdyaWQ7DQogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwJTsNCn0NCi50YWJsZS1zdHlsZSB7DQogIHdpZHRoOiAxMDAlOw0KfQ0KLnRoZWFkQ2xhc3Mgew0KICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7DQogIHdoaXRlLXNwYWNlOiBub3dyYXA7DQp9DQoudGRDbGFzcyB7DQogIHdpZHRoOiAxNXB4Ow0KICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZDsNCn0NCi50ZENsYXNzSW4gew0KICB3aWR0aDogNDBweDsNCn0NCi5pbnB1dENsYXNzIHsNCiAgbWFyZ2luOiAwOw0KfQ0KLnRoZWFkIHsNCiAgZGlzcGxheTogZmxleDsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappingsqjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDListBox","sourcesContent":["<template>\r\n  <div\r\n    class=\"listStyle\"\r\n    :style=\"listStyleObj\"\r\n    :title=\"properties.ControlTipText\"\r\n    @click=\"listBoxClick\"\r\n    @mousedown=\"controlEditMode\"\r\n    :tabindex=\"properties.TabIndex\"\r\n    @keydown=\"forMatchEntry\"\r\n    v-on=\"eventStoppers()\"\r\n    @keydown.esc=\"setContentEditable($event, false)\"\r\n  >\r\n    <div class=\"table-style\" :style=\"tableStyleObj\" ref=\"listBoxTableRef\" v-if=\"properties.RowSource !== ''\">\r\n      <div v-if=\"properties.ColumnHeads === true\" class=\"theadClass\">\r\n        <div class=\"thead\">\r\n          <div\r\n            :style=\"tdStyleObj\"\r\n            v-if=\"properties.ListStyle === 1\"\r\n            class=\"tdClass\"\r\n          ></div>\r\n          <template v-for=\"(a, columnIndex) in extraDatas.ColumnHeadsValues\">\r\n            <div\r\n              v-if=\"\r\n                columnIndex < properties.ColumnCount ||\r\n                properties.ColumnCount === -1\r\n              \"\r\n              :key=\"columnIndex\"\r\n              :style=\"updateColHeads(columnIndex)\"\r\n            >\r\n              {{ a }}\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n      <!-- <div v-else></div> -->\r\n      <div class=\"table-body\">\r\n        <div\r\n          :tabindex=\"index\"\r\n          class=\"tr\"\r\n          ref=\"listStyleRef\"\r\n          v-for=\"(item, index) of extraDatas.RowSourceData\"\r\n          :key=\"index\"\r\n          @mouseenter.stop=\"handleDrag\"\r\n          @keydown.esc=\"releaseEditMode\"\r\n          @blur.stop=\"clearMatchEntry\"\r\n          @keydown.stop=\"handleExtendArrowKeySelect\"\r\n          @mousedown=\"\r\n            isRunMode || isEditMode ? handleMousedown($event) : stopMousedown($event)\r\n          \"\r\n        >\r\n          <div\r\n            :style=\"tdStyleObj\"\r\n            class=\"tdClassIn\"\r\n            v-if=\"\r\n              (properties.ListStyle === 1 && properties.ColumnCount > 0) ||\r\n              (properties.ListStyle === 1 && properties.ColumnCount === -1)\r\n            \"\r\n          >\r\n            <input\r\n              :name=\"properties.MultiSelect === 2 ? 'checkbox' : 'radio'\"\r\n              :type=\"\r\n                properties.MultiSelect === 1 || properties.MultiSelect === 2\r\n                  ? 'checkbox'\r\n                  : 'radio'\r\n              \"\r\n              @click.prevent.stop\r\n              class=\"inputClass\"\r\n            />\r\n          </div>\r\n          <div\r\n            class=\"column-item\"\r\n            v-for=\"(i, index) in item\"\r\n            :key=\"index\"\r\n            :style=\"[updateColumnWidths(index),styleColumnObj]\"\r\n          >\r\n            <template\r\n              v-if=\"\r\n                index < properties.ColumnCount || properties.ColumnCount === -1\r\n              \"\r\n              >{{ i }}</template\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Prop,\r\n  Model,\r\n  Emit,\r\n  Mixins,\r\n  Watch,\r\n  Ref\r\n} from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\n\r\n@Component({\r\n  name: 'FDListBox'\r\n})\r\nexport default class FDListBox extends Mixins(FdControlVue) {\r\n  @Ref('listStyleRef') listStyleRef: HTMLDivElement[];\r\n  @Ref('listBoxTableRef') listBoxTableRef!: HTMLDivElement;\r\n  @Prop() isActivated: boolean;\r\n  @Prop() toolBoxSelect: string\r\n  checkedvalue: boolean;\r\n  $el: HTMLDivElement;\r\n  handleMousedown (e: MouseEvent) {\r\n    if (this.toolBoxSelect === 'Select') {\r\n      e.stopPropagation()\r\n      if (this.properties.RowSource !== '') {\r\n        if (\r\n          e.target instanceof HTMLDivElement ||\r\n      e.target instanceof HTMLTableRowElement ||\r\n      e.target instanceof HTMLInputElement\r\n        ) {\r\n          this.tempListBoxComboBoxEvent = e\r\n          const targetElement = e.target\r\n          const tempData = targetElement!.parentElement!\r\n            .children[0] as HTMLDivElement\r\n          const tempDataOption = targetElement.parentElement!\r\n            .children[1] as HTMLDivElement\r\n          const tempPath = e.composedPath()\r\n          targetElement.focus()\r\n          let data = targetElement.innerText\r\n          let splitData = data.replace(/\\t/g, ' ').split(' ')\r\n\r\n          targetElement.focus()\r\n          if (this.properties.Enabled && this.properties.Locked === false) {\r\n            if (this.properties.MultiSelect === 0) {\r\n              this.clearOptionBGColorAndChecked(e)\r\n              this.setOptionBGColorAndChecked(e)\r\n            } else if (this.properties.MultiSelect === 1) {\r\n              this.setOptionBGColorAndChecked(e)\r\n            } else if (this.properties.MultiSelect === 2) {\r\n              if (e.ctrlKey === true) {\r\n                if (targetElement.tagName === 'INPUT') {\r\n                  this.setOptionBGColorAndChecked(e)\r\n                } else {\r\n                  this.setOptionBGColorAndChecked(e)\r\n                }\r\n              } else if (e.shiftKey === true && this.properties.Value !== '') {\r\n                let startPoint = 0\r\n                let endPoint = 0\r\n                for (let i = 0; i < tempPath.length; i++) {\r\n                  const ele = tempPath[i] as HTMLDivElement\r\n                  if (ele.className === 'table-body') {\r\n                    // extend points start and end\r\n                    for (let j = 0; j < ele.childNodes.length; j++) {\r\n                      const cd = ele.childNodes[j] as HTMLDivElement\r\n                      if (cd.innerText === this.properties.Value) {\r\n                        startPoint = j + 1\r\n                      }\r\n                      if (cd.innerText === targetElement.innerText) {\r\n                        endPoint = j\r\n                      }\r\n                    }\r\n                    // upward selection start and end swap\r\n                    if (startPoint > endPoint) {\r\n                      let temp = startPoint\r\n                      startPoint = endPoint\r\n                      endPoint = temp\r\n                    }\r\n                    // setting selection\r\n                    for (let k = startPoint; k <= endPoint; k++) {\r\n                      const node = ele.childNodes[k] as HTMLDivElement\r\n                      const tempNode = node.childNodes[0]\r\n                        .childNodes[0] as HTMLInputElement\r\n                      node.style.backgroundColor = 'rgb(59, 122, 231)'\r\n                      if (this.properties.ListStyle === 1 && !tempNode.checked) {\r\n                        // tempNode.checked = !tempNode.checked\r\n                        tempNode.checked = true\r\n                      }\r\n                    }\r\n                    break\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (this.properties.ControlSource !== '') {\r\n                this.updateDataModel({\r\n                  propertyName: 'Text',\r\n                  value: this.selectionData[0]\r\n                })\r\n                this.updateDataModel({\r\n                  propertyName: 'Value',\r\n                  value: this.selectionData[0]\r\n                })\r\n              }\r\n              this.clearOptionBGColorAndChecked(e)\r\n              this.setOptionBGColorAndChecked(e)\r\n            }\r\n          }\r\n          if (this.properties.MultiSelect === 0) {\r\n            for (let i = 0; i < this.extraDatas.RowSourceData!.length; i++) {\r\n              if (this.listStyleRef[i].style.backgroundColor !== '') {\r\n                const text = this.extraDatas.RowSourceData![i][0]\r\n                this.updateDataModel({ propertyName: 'Text', value: text })\r\n                const x = this.extraDatas.RowSourceData![i][this.properties.BoundColumn! - 1]\r\n                this.updateDataModel({ propertyName: 'Value', value: x })\r\n              }\r\n            }\r\n          } else {\r\n            this.updateDataModel({ propertyName: 'Text', value: '' })\r\n            this.updateDataModel({ propertyName: 'Value', value: '' })\r\n          }\r\n          this.getSelectedStyle()\r\n        }\r\n      }\r\n    }\r\n  }\r\n  clearMatchEntry () {\r\n    this.updateDataModelExtraData({ propertyName: 'MatchData', value: '' })\r\n  }\r\n\r\n  getSelectedStyle () {\r\n    if (this.listStyleRef) {\r\n      for (let i = 0; i < this.listStyleRef.length; i++) {\r\n        if (this.listStyleRef[i].style.backgroundColor === 'rgb(59, 122, 231)') {\r\n          for (let j = 0; j < this.listStyleRef[i].children.length; j++) {\r\n            const a = this.listStyleRef[i].children[j] as HTMLDivElement\r\n            a.style.backgroundColor = 'rgb(59, 122, 231)'\r\n          }\r\n        } else if (this.listStyleRef[i].style.backgroundColor === '') {\r\n          for (let j = 0; j < this.listStyleRef[i].children.length; j++) {\r\n            const a = this.listStyleRef[i].children[j] as HTMLDivElement\r\n            a.style.backgroundColor = ''\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in div tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function listStyleObj\r\n   */\r\n  protected get listStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'inline-block' : 'none'\r\n    } else {\r\n      display = 'inline-block'\r\n    }\r\n    return {\r\n      backgroundColor: controlProp.BackColor,\r\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      borderLeft:\r\n        controlProp.BorderStyle === 1\r\n          ? '1px solid ' + controlProp.BorderColor\r\n          : controlProp.SpecialEffect === 2\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 3\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 4\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      borderRight:\r\n        controlProp.BorderStyle === 1\r\n          ? '1px solid ' + controlProp.BorderColor\r\n          : controlProp.SpecialEffect === 1\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 4\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 3\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      borderTop:\r\n        controlProp.BorderStyle === 1\r\n          ? '1px solid ' + controlProp.BorderColor\r\n          : controlProp.SpecialEffect === 2\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 3\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 4\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      borderBottom:\r\n        controlProp.BorderStyle === 1\r\n          ? '1px solid ' + controlProp.BorderColor\r\n          : controlProp.SpecialEffect === 1\r\n            ? '2px solid gray'\r\n            : controlProp.SpecialEffect === 4\r\n              ? '1.5px solid gray'\r\n              : controlProp.SpecialEffect === 3\r\n                ? '0.5px solid gray'\r\n                : '',\r\n      left: `${controlProp.Left}px`,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      top: `${controlProp.Top}px`,\r\n      display: display\r\n    }\r\n  }\r\n\r\n  get styleColumnObj () {\r\n    const controlProp = this.properties\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 10,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true\r\n      }\r\n    return {\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      textUnderlinePosition: 'under',\r\n      fontWeight: font.FontBold\r\n        ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : ''\r\n\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in table tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function tableStyleObj\r\n   */\r\n  protected get tableStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    const font: font = controlProp.Font\r\n      ? controlProp.Font\r\n      : {\r\n        FontName: 'Arial',\r\n        FontSize: 10,\r\n        FontItalic: true,\r\n        FontBold: true,\r\n        FontUnderline: true,\r\n        FontStrikethrough: true\r\n      }\r\n    return {\r\n      borderCollapse: 'collapse',\r\n      tableLayout: 'fixed',\r\n      color: controlProp.ForeColor,\r\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\r\n      fontSize: `${font.FontSize}px`,\r\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\r\n      textDecoration:\r\n        font.FontStrikethrough === true && font.FontUnderline === true\r\n          ? 'underline line-through'\r\n          : font.FontUnderline\r\n            ? 'underline'\r\n            : font.FontStrikethrough\r\n              ? 'line-through'\r\n              : '',\r\n      textUnderlinePosition: 'under',\r\n      fontWeight: font.FontBold\r\n        ? 'bold'\r\n        : font.FontStyle !== ''\r\n          ? this.tempWeight\r\n          : '',\r\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\r\n      width:\r\n        controlProp.ColumnWidths === ''\r\n          ? '100%'\r\n          : `${controlProp.Width}px` +\r\n            parseInt(controlProp.ColumnWidths!) +\r\n            'px',\r\n      display: this.properties.ColumnCount === 0 ? 'none' : ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description style object is passed to :style attribute in td tag\r\n   * dynamically changing the styles of the component based on properties\r\n   * @function tdStyleObj\r\n   */\r\n  protected get tdStyleObj (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    return {\r\n      textAlign:\r\n        controlProp.TextAlign === 0\r\n          ? 'left'\r\n          : controlProp.TextAlign === 2\r\n            ? 'right'\r\n            : 'center'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description watches changes in properties for Value\r\n   * @function ValueData\r\n   * @param oldVal previous properties data\r\n   * @param newVal  new/changed properties data\r\n   */\r\n  @Watch('properties.Value', { deep: true })\r\n  ValueData (newVal: string, oldVal: string) {\r\n    if (this.properties.RowSource !== '') {\r\n      if (newVal !== '' && this.properties.MultiSelect === 0) {\r\n        if (\r\n        this.properties.BoundColumn! > 0 &&\r\n        this.properties.BoundColumn! < this.extraDatas.RowSourceData!.length\r\n        ) {\r\n          let tempData = [...this.extraDatas.RowSourceData!]\r\n          let tempBoundColumn = this.properties.BoundColumn! - 1\r\n          for (let i = 0; i < this.extraDatas.RowSourceData!.length; i++) {\r\n            if (tempData[i][tempBoundColumn] === newVal) {\r\n              this.clearOptionBGColorAndChecked(this.tempListBoxComboBoxEvent)\r\n              this.listStyleRef[i].style.backgroundColor = 'rgb(59, 122, 231)'\r\n              this.setOptionBGColorAndChecked(\r\n              this.tempListBoxComboBoxEvent as MouseEvent\r\n              )\r\n            }\r\n          }\r\n          if (tempData![0][this.properties.BoundColumn! - 1] === newVal) {\r\n            this.updateDataModel({ propertyName: 'Value', value: newVal })\r\n          }\r\n        } else {\r\n          return undefined\r\n        }\r\n      } else {\r\n        this.updateDataModel({ propertyName: 'Value', value: '' })\r\n      }\r\n    } else {\r\n      this.updateDataModel({ propertyName: 'Value', value: '' })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description mounted initializes the values which are required for the component\r\n   */\r\n  mounted () {\r\n    this.$el.focus()\r\n    var event = new MouseEvent('mousedown.stop')\r\n    if (this.properties.RowSource !== '') {\r\n      const initialRowSourceData = this.extraDatas.RowSourceData!\r\n      this.updateDataModel({ propertyName: 'ControlSource', value: '' })\r\n      if (initialRowSourceData && initialRowSourceData.length === 0) {\r\n        this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\r\n      } else {\r\n        this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description watches changes in properties for MultiSelect\r\n   * @function multiSelectCheck\r\n   * @param oldVal previous properties data\r\n   * @param newVal  new/changed properties data\r\n   */\r\n  @Watch('properties.MultiSelect', { deep: true })\r\n  multiSelectCheck (newVal: number, oldVal: number) {\r\n    if (newVal === 1 || newVal === 2) {\r\n      this.updateDataModel({ propertyName: 'Value', value: '' })\r\n      this.updateDataModel({ propertyName: 'Text', value: '' })\r\n    }\r\n    if (this.tempListBoxComboBoxEvent) {\r\n      this.clearOptionBGColorAndChecked(this.tempListBoxComboBoxEvent)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description watches changes in properties for ListStyle\r\n   * @function listCheck\r\n   * @param oldVal previous properties data\r\n   * @param newVal  new/changed properties data\r\n   */\r\n  @Watch('properties.ListStyle', { deep: true })\r\n  listCheck (newVal: number, oldVal: number) {\r\n    this.clearOptionBGColorAndChecked(this.tempListBoxComboBoxEvent)\r\n  }\r\n\r\n  @Watch('isEditMode', { deep: true })\r\n  isEditCheck (newVal: boolean, oldVal: boolean) {\r\n    if (this.isEditMode) {\r\n      this.$el.click()\r\n    }\r\n  }\r\n\r\n  forMatchEntry (event: KeyboardEvent) {\r\n    if (event.key === 'Enter' && event.keyCode === 13) {\r\n      this.setContentEditable(event, true)\r\n    }\r\n    if (this.isEditMode) {\r\n      this.listStyleRef[0].click()\r\n    }\r\n    if (event.key === 'Escape' && event.keyCode === 27) {\r\n      this.releaseEditMode(event)\r\n    }\r\n    if (event.key === 'Delete') {\r\n      this.deleteItem(event)\r\n    }\r\n  }\r\n\r\n  @Watch('properties.RowSource')\r\n  rowSourceValidate () {\r\n    const initialRowSourceData = this.extraDatas.RowSourceData!\r\n    this.updateDataModel({ propertyName: 'ControlSource', value: '' })\r\n    if (initialRowSourceData && initialRowSourceData.length === 0) {\r\n      this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\r\n    } else {\r\n      this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\r\n    }\r\n  }\r\n\r\n  @Watch('properties.ControlSource')\r\n  controlSourceUpdate () {\r\n    if (this.properties.ControlSource !== '') {\r\n      for (let i = 0; i < this.extraDatas.RowSourceData!.length; i++) {\r\n        this.listStyleRef[i].style.backgroundColor = ''\r\n        if (\r\n          this.extraDatas.RowSourceData![i][this.properties.BoundColumn! - 1] === this.extraDatas.ControlSourceValue!\r\n        ) {\r\n          const listRow = this.listStyleRef[i]\r\n          listRow.style.backgroundColor = 'rgb(59, 122, 231)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n  releaseEditMode (event: KeyboardEvent) {\r\n    this.$el.focus()\r\n    this.setContentEditable(event, false)\r\n  }\r\n  eventStoppers () {\r\n    const eventStop = (event: Event) => event.stopPropagation()\r\n    return this.isEditMode === false\r\n      ? null\r\n      : {\r\n        keydown: eventStop\r\n      }\r\n  }\r\n  listBoxClick (e: MouseEvent) {\r\n    if (this.toolBoxSelect === 'Select') {\r\n      e.stopPropagation()\r\n      this.selectedItem(e)\r\n      if (!this.isActivated) {\r\n        EventBus.$emit('focusUserForm')\r\n      }\r\n    }\r\n  }\r\n  stopMousedown (event: MouseEvent) {\r\n    if (this.toolBoxSelect === 'Select') {\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.listStyle {\r\n  width: 200px;\r\n  height: 200px;\r\n  background-color: lightgray;\r\n  border: 1px solid gray;\r\n  overflow: auto;\r\n  box-sizing: border-box;\r\n  /* box-shadow: -1px -1px lightgray; */\r\n}\r\n.list-outer {\r\n  border: 0.1px solid lightgray;\r\n  width: 164px;\r\n  height: 130px;\r\n  overflow-y: auto;\r\n  box-shadow: -1px -1px grey;\r\n}\r\n.tr {\r\n  outline: none;\r\n  display: flex;\r\n}\r\n.ul {\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n  list-style-type: none;\r\n  margin-block-start: 0em;\r\n  margin-block-end: 0em;\r\n  margin-inline-start: 0px;\r\n  margin-inline-end: 0px;\r\n  padding-inline-start: 0px;\r\n}\r\n.li {\r\n  /* padding: 3px; */\r\n  margin: 1px;\r\n  text-align: left;\r\n  font-size: 14px;\r\n  height: 16px;\r\n  border: 0.5px solid white;\r\n  cursor: pointer;\r\n}\r\n.li:hover {\r\n  margin: 1px;\r\n  border-color: rgb(52, 52, 255);\r\n  border-radius: 2px;\r\n  background-color: rgb(59, 122, 231);\r\n}\r\n.fa {\r\n  margin-left: 4px;\r\n  margin-top: 3px;\r\n}\r\n.span {\r\n  /* margin: 4px;  */\r\n  margin-left: 7px;\r\n  margin-top: 0px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n.div {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n}\r\n.listbox {\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n  height: 100px;\r\n  width: 300px;\r\n  background-color: lightgray;\r\n  border: 1px solid gray;\r\n}\r\n.columnHeads {\r\n  height: 19.2px;\r\n  border: 1px solid black;\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n}\r\n.optionsItems {\r\n  display: grid;\r\n  grid-template-columns: 100%;\r\n}\r\n.table-style {\r\n  width: 100%;\r\n}\r\n.theadClass {\r\n  border-bottom: 1px solid;\r\n  white-space: nowrap;\r\n}\r\n.tdClass {\r\n  width: 15px;\r\n  border-right: 1px solid;\r\n}\r\n.tdClassIn {\r\n  width: 40px;\r\n}\r\n.inputClass {\r\n  margin: 0;\r\n}\r\n.thead {\r\n  display: flex;\r\n}\r\n</style>\r\n"]}]}