{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDImage/index.vue?vue&type=style&index=0&id=f1f17a5e&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDImage/index.vue","mtime":1611296894000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5waWN0dXJlIHsNCiAgLyogcG9zaXRpb246IHJlbGF0aXZlOyAqLw0KICBvdmVyZmxvdzogaGlkZGVuOw0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICB3aWR0aDogMHB4Ow0KICBoZWlnaHQ6IDBweDsNCiAgbGVmdDogMHB4Ow0KICB0b3A6IDBweDsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDImage","sourcesContent":["<template>\r\n  <div\r\n    class=\"picture\"\r\n    :style=\"cssStyleProperty\"\r\n    :title=\"properties.ControlTipText\"\r\n    @keydown.delete=\"deleteItem\"\r\n    @click=\"imageClick\"\r\n  ></div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Prop,\r\n  Model,\r\n  Emit,\r\n  Mixins,\r\n  Ref,\r\n  Watch\r\n} from 'vue-property-decorator'\r\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\r\nimport { controlProperties } from '@/FormDesigner/controls-properties'\r\n\r\n@Component({\r\n  name: 'FDImage'\r\n})\r\nexport default class FDImage extends Mixins(FdControlVue) {\r\n  $el!: HTMLDivElement;\r\n  /**\r\n   * @description updating width and height of image control\r\n   * @function updateAutoSize\r\n   * @param oldVal previous AutoSize value\r\n   * @param newVal  new/changed AutoSize value\r\n   */\r\n  @Watch('properties.AutoSize')\r\n  updateAutoSize (newVal: boolean, oldVal: boolean) {\r\n    this.setHeightWidth(newVal)\r\n  }\r\n\r\n  @Watch('properties.Picture')\r\n  pictureChanges (newVal: string, oldVal: string) {\r\n    this.setHeightWidth(this.properties.AutoSize!)\r\n  }\r\n  /**\r\n   * @description When AutoSize is true update width and height property\r\n   * @function setHeightWidth\r\n   * @param isAutoSize AutoSize property value\r\n   *\r\n   */\r\n  setHeightWidth (isAutoSize: boolean) {\r\n    const that = this\r\n    if (isAutoSize && this.properties.Picture) {\r\n      const img = new Image()\r\n      img.onload = function () {\r\n        that.updateDataModel({\r\n          propertyName: 'Height',\r\n          value: img.height\r\n        })\r\n        that.updateDataModel({\r\n          propertyName: 'Width',\r\n          value: img.width\r\n        })\r\n      }\r\n      img.src = this.properties.Picture\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n  /**\r\n   * @description style object is passed to :style attribute in label tag\r\n   * dynamically changing the styles of the component based on propControlData\r\n   * @function cssStyleProperty\r\n   *\r\n   */\r\n  protected get cssStyleProperty (): Partial<CSSStyleDeclaration> {\r\n    const controlProp = this.properties\r\n    let display = ''\r\n    if (this.isRunMode) {\r\n      display = controlProp.Visible ? 'block' : 'none'\r\n    } else {\r\n      display = 'block'\r\n    }\r\n    return {\r\n      ...this.baseStyle,\r\n      left: `${controlProp.Left}px`,\r\n      width: `${controlProp.Width}px`,\r\n      height: `${controlProp.Height}px`,\r\n      top: `${controlProp.Top}px`,\r\n      backgroundColor: controlProp.BackStyle\r\n        ? controlProp.BackColor\r\n        : 'transparent',\r\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\r\n      borderLeft: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : '',\r\n      borderRight: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 1 ? '2px solid gray' : controlProp.SpecialEffect === 4 ? '1.5px solid gray' : controlProp.SpecialEffect === 3 ? '0.5px solid gray' : '',\r\n      borderTop: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : '',\r\n      borderBottom: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 1 ? '2px solid gray' : controlProp.SpecialEffect === 4 ? '1.5px solid gray' : controlProp.SpecialEffect === 3 ? '0.5px solid gray' : '',\r\n      cursor:\r\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\r\n          ? this.getMouseCursorData\r\n          : 'default',\r\n      backgroundImage: `url(${controlProp.Picture})`,\r\n      backgroundSize: controlProp.Picture === '' ? '' : this.getSizeMode,\r\n      backgroundRepeat: this.getRepeatData,\r\n      backgroundPosition: controlProp.Picture === '' ? '' : this.getPosition,\r\n      display: display\r\n    }\r\n  }\r\n  imageClick (event: MouseEvent) {\r\n    if (this.toolBoxSelectControl === 'Select') {\r\n      event.stopPropagation()\r\n      this.selectedItem(event)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.picture {\r\n  /* position: relative; */\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n  width: 0px;\r\n  height: 0px;\r\n  left: 0px;\r\n  top: 0px;\r\n}\r\n</style>\r\n"]}]}