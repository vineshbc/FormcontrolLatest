{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDResizeControl/index.vue?vue&type=style&index=0&id=04635044&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDResizeControl/index.vue","mtime":1611581366000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmNvbnRyb2xTZWxlY3RTdHlsZSB7DQogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgLS1ib3JkZXItd2lkdGg6IDU7DQogIC0tc3RyaXBlLWRpc3RhbmNlOiAycHg7DQogIGJvcmRlcjogY2FsYyh2YXIoLS1ib3JkZXItd2lkdGgpICogMXB4KSBzb2xpZCB0cmFuc3BhcmVudDsNCiAgYm9yZGVyLWltYWdlOiByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KA0KICAgICAgLTExMGRlZywNCiAgICAgIGJsYWNrLA0KICAgICAgdHJhbnNwYXJlbnQgMXB4LA0KICAgICAgdHJhbnNwYXJlbnQgdmFyKC0tc3RyaXBlLWRpc3RhbmNlKSwNCiAgICAgIGJsYWNrIGNhbGModmFyKC0tc3RyaXBlLWRpc3RhbmNlKSArIDAuMnB4KQ0KICAgICkNCiAgICB2YXIoLS1ib3JkZXItd2lkdGgpOw0KfQ0KLmNvbnRyb2xFZGl0U3R5bGUgew0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIC0tYm9yZGVyLXdpZHRoOiA1Ow0KICAtLXN0cmlwZS1kaXN0YW5jZTogMnB4Ow0KICBib3JkZXI6IGNhbGModmFyKC0tYm9yZGVyLXdpZHRoKSAqIDFweCkgc29saWQgdHJhbnNwYXJlbnQ7DQogIGJvcmRlci1pbWFnZTogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgNCiAgICAgIC00NWRlZywNCiAgICAgIGJsYWNrLA0KICAgICAgdHJhbnNwYXJlbnQgMnB4LA0KICAgICAgdHJhbnNwYXJlbnQgdmFyKC0tc3RyaXBlLWRpc3RhbmNlKSwNCiAgICAgIGJsYWNrIGNhbGModmFyKC0tc3RyaXBlLWRpc3RhbmNlKSArIDAuMnB4KQ0KICAgICkNCiAgICB2YXIoLS1ib3JkZXItd2lkdGgpOw0KfQ0KLmNvbnRyb2xTdHlsZSB7DQogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgY3Vyc29yOiBkZWZhdWx0ICFpbXBvcnRhbnQ7DQp9DQo6Zm9jdXMgew0KICBvdXRsaW5lOiBub25lOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsggBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDResizeControl","sourcesContent":["<template>\r\n  <div>\r\n    <div\r\n      :class=\"\r\n        mainSelected && isEditMode && !isRunMode\r\n          ? 'controlEditStyle'\r\n          : canDragMainDiv\r\n          ? 'controlSelectStyle'\r\n          : 'controlStyle'\r\n      \"\r\n      :style=\"resizeControlStyle\"\r\n      :ref=\"'draRef'.concat(controlId)\"\r\n      @mousedown=\"\r\n        mainSelected && !isRunMode\r\n          ? handleDrag($event)\r\n          : !isRunMode && dragGroupControl($event)\r\n      \"\r\n      @contextmenu.stop=\"displayContextMenu\"\r\n    >\r\n      <ResizeHandler\r\n        v-if=\"!isRunMode\"\r\n        ref=\"resize\"\r\n        @updateResize=\"updateResize\"\r\n        :controlId=\"controlId\"\r\n        :userFormId=\"userFormId\"\r\n        controlType=\"control\"\r\n        @createGroup=\"createGroup\"\r\n        @muldragControl=\"muldragControl\"\r\n        @updateModel=\"updateModelHandle\"\r\n        @updateIsMove=\"updateIsMove\"\r\n        :size=\"{\r\n          width: propControlData.properties.Width,\r\n          height: propControlData.properties.Height,\r\n          left: propControlData.properties.Left,\r\n          top: propControlData.properties.Top\r\n        }\"\r\n      />\r\n      <component\r\n        :is=\"propControlData.type\"\r\n        :controlId=\"propControlData.properties.ID\"\r\n        :userFormId=\"getUserFormId\"\r\n        :data=\"propControlData\"\r\n        :isActivated=\"\r\n          this.selectedControls[this.userFormId].selected.includes(this.controlId) &&\r\n           this.selectedControls[this.userFormId].selected.length === 1\r\n        \"\r\n        :isRunMode=\"isRunMode\"\r\n        :isEditMode=\"isEditMode\"\r\n        :containerId=\"containerId\"\r\n        @setEditMode=\"setEditMode\"\r\n        @selectedItem=\"selectedItem\"\r\n        @deleteItem=\"deleteItem\"\r\n        @updateModel=\"updateModelHandle\"\r\n        @updateModelExtraData=\"updateModelExtraDataHandle\"\r\n        @controlEditMode=\"controlEditMode\"\r\n        @updateEditMode=\"updateEditMode\"\r\n        :toolBoxSelectControl=\"toolBoxSelect\"\r\n      >\r\n        {{ propControlData.properties.Caption }}\r\n      </component>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {\r\n  Component,\r\n  Emit,\r\n  Prop,\r\n  Vue,\r\n  Ref,\r\n  PropSync,\r\n  Watch\r\n} from 'vue-property-decorator'\r\nimport { State, Action } from 'vuex-class'\r\n\r\nimport Label from '@/FormDesigner/components/atoms/FDLabel/index.vue'\r\nimport CommandButton from '@/FormDesigner/components/atoms/FDCommandButton/index.vue'\r\nimport ToggleButton from '@/FormDesigner/components/atoms/FDToggleButton/index.vue'\r\nimport TextBox from '@/FormDesigner/components/atoms/FDTextBox/index.vue'\r\nimport SpinButton from '@/FormDesigner/components/atoms/FDSpinButton/index.vue'\r\nimport ScrollBar from '@/FormDesigner/components/atoms/FDScrollBar/index.vue'\r\nimport OptionButton from '@/FormDesigner/components/atoms/FDOptionButton/index.vue'\r\nimport CheckBox from '@/FormDesigner/components/atoms/FDCheckBox/index.vue'\r\nimport ComboBox from '@/FormDesigner/components/atoms/FDComboBox/index.vue'\r\nimport ListBox from '@/FormDesigner/components/atoms/FDListBox/index.vue'\r\nimport FDImage from '@/FormDesigner/components/atoms/FDImage/index.vue'\r\nimport Frame from '@/FormDesigner/components/atoms/FDFrame/index.vue'\r\nimport TabStrip from '@/FormDesigner/components/atoms/FDTabStrip/index.vue'\r\nimport MultiPage from '@/FormDesigner/components/atoms/FDMultiPage/index.vue'\r\nimport ResizeHandler from '@/FormDesigner/components/molecules/FDResizeHandler/index.vue'\r\nimport FdSelectVue from '@/api/abstract/FormDesigner/FdSelectVue'\r\nimport Container from '../FDContainer/index.vue'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\n@Component({\r\n  name: 'ResizeControl',\r\n  components: {\r\n    ResizeHandler,\r\n    Label,\r\n    CommandButton,\r\n    ToggleButton,\r\n    TextBox,\r\n    SpinButton,\r\n    ScrollBar,\r\n    CheckBox,\r\n    OptionButton,\r\n    FDImage,\r\n    Frame,\r\n    ComboBox,\r\n    ListBox,\r\n    TabStrip,\r\n    MultiPage\r\n  }\r\n})\r\nexport default class ResizeControl extends FdSelectVue {\r\n  @State((state: rootState) => state.fd.toolBoxSelect) toolBoxSelect!: fdState['toolBoxSelect'];\r\n  @PropSync('currentSelectedGroup') public syncCurrentSelectedGroup!: string;\r\n  @Prop({ required: true, type: String }) public containerId!: string;\r\n  @Ref('resize') readonly resize!: ResizeHandler;\r\n  selMultipleCtrl: boolean = false\r\n  keyType: string = ''\r\n\r\n  handleDrag (event: MouseEvent) {\r\n    if (this.toolBoxSelect === 'Select') {\r\n      event.stopPropagation()\r\n      if (this.selectedControls[this.userFormId].selected.length > 1 && this.selMultipleCtrl === false) {\r\n        if (event.which !== 3 && this.isMoveWhenMouseDown) {\r\n          this.selectedItem(event)\r\n        }\r\n      }\r\n      this.isMoveWhenMouseDown = false\r\n      this.resize.handleMouseDown(event, 'drag', 'control', this.controlId)\r\n    }\r\n  }\r\n  @Emit('muldragControl')\r\n  private muldragControl (val: IDragResizeGroup) {\r\n    return val\r\n  }\r\n\r\n  @Emit('dragControl')\r\n  dragControl (event: MouseEvent) {\r\n    return event\r\n  }\r\n  selectMultipleCtrl (val: boolean) {\r\n    this.selMultipleCtrl = val\r\n  }\r\n\r\n  dragGroupControl (event: MouseEvent) {\r\n    if (this.toolBoxSelect === 'Select') {\r\n      event.stopPropagation()\r\n      if (this.selectedControls[this.userFormId].selected.length > 1 && this.selMultipleCtrl === false) {\r\n        if (event.which !== 3 && this.isMoveWhenMouseDown) {\r\n          this.selectedItem(event)\r\n        }\r\n      }\r\n      this.propControlData.properties.GroupID && this.dragControl(event)\r\n    }\r\n  }\r\n  @Emit('openMenu')\r\n  openMenu (e: MouseEvent, parentID: string, controlID: string) {\r\n    return {\r\n      e,\r\n      parentID,\r\n      controlID\r\n    }\r\n  }\r\n\r\n  get canDragMainDiv (): boolean {\r\n    return this.mainSelected && !this.isEditMode && !this.isRunMode\r\n  }\r\n\r\n  get propControlData (): controlData {\r\n    return this.userformData[this.userFormId][this.controlId]\r\n  }\r\n  openContextMenu (e: MouseEvent, parentID: string, controlID: string, type: string, mode: boolean) {\r\n    this.$emit('openMenu', e, parentID, controlID, type, mode)\r\n  }\r\n  get resizeControlStyle () {\r\n    const userData = this.userformData[this.userFormId]\r\n    const currentProperties = this.propControlData.properties\r\n    const extraData = this.propControlData.extraDatas!\r\n    const bs = currentProperties.BorderStyle!\r\n    const isRotate = currentProperties.Width! > currentProperties.Height!\r\n    const type = this.propControlData.type\r\n    let highestZIndex = -1\r\n    if (this.selectedControlArray.length === 1 && !this.selectedControlArray[0].startsWith('group')) {\r\n      const selected = userData[this.selectedControlArray[0]].type === 'Page' ? this.selectedContainer[0] : this.selectedControlArray[0]\r\n      if (selected === this.propControlData.properties.ID && (type === 'Frame' || type === 'MultiPage')) {\r\n        const containerControls = [...userData[this.getContainerList(selected)[0]].controls]\r\n        containerControls.sort((a, b) => {\r\n          return userData[b].extraDatas!.zIndex! - userData[a].extraDatas!.zIndex!\r\n        })\r\n        highestZIndex = userData[containerControls[0]].extraDatas!.zIndex!\r\n      }\r\n    }\r\n    return {\r\n      left: `${currentProperties.Left}px`,\r\n      top: `${currentProperties.Top}px`,\r\n      /* border width(5) * 2 = 10 */\r\n      width: `${currentProperties.Width! + 10}px`,\r\n      height: `${currentProperties.Height! + 10}px`,\r\n      display:\r\n        this.isRunMode && currentProperties.Visible === false\r\n          ? 'none'\r\n          : 'block',\r\n      cursor: !this.isRunMode ? 'move' : 'default',\r\n      zIndex: (highestZIndex !== -1 && type !== 'Page' && this.isEditMode) ? highestZIndex + 1 : extraData.zIndex! <= 0 ? '' : extraData.zIndex!\r\n    }\r\n  }\r\n  get mainSelected () {\r\n    return (\r\n      this.selectedControls[this.userFormId].selected.includes(\r\n        this.controlId\r\n      ) ||\r\n      (this.selectedControls[this.userFormId].container.includes(\r\n        this.controlId\r\n      ) &&\r\n        this.selectedControls[this.userFormId].selected.includes(\r\n          this.controlId\r\n        ) !==\r\n          this.selectedControls[this.userFormId].container.includes(\r\n            this.controlId\r\n          ))\r\n    )\r\n  }\r\n  deleteItem (event: KeyboardEvent) {\r\n    const userData = this.userformData[this.userFormId]\r\n    const type = userData[this.controlId].type\r\n    const controlId = type === 'Page' ? this.containerId : this.controlId\r\n    const containerId = type === 'Page' ? this.getContainerList(controlId)[0] : this.containerId\r\n    if (event.key !== 'Backspace') {\r\n      this.deleteZIndex(controlId)\r\n      this.deleteTabIndex(controlId)\r\n      this.deleteControl({\r\n        userFormId: this.userFormId,\r\n        parentId: containerId,\r\n        targetId: controlId\r\n      })\r\n    }\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: this.getContainerList(containerId),\r\n        selected: [containerId]\r\n      }\r\n    })\r\n  }\r\n  selectedItem (e: MouseEvent) {\r\n    if (this.selMultipleCtrl === false) {\r\n      const userData = this.userformData[this.userFormId]\r\n      const groupId = this.propControlData.properties.GroupID\r\n        ? this.propControlData.properties.GroupID\r\n        : ''\r\n      const currentSelect = this.selectedControls[this.userFormId].selected\r\n      if (currentSelect.length === 1 && currentSelect[0] === this.controlId) {\r\n        if (\r\n          this.isMoveWhenMouseDown !== true &&\r\n        this.propControlData.type !== 'FDImage' &&\r\n        this.propControlData.type !== 'Frame' &&\r\n        this.propControlData.type !== 'MultiPage'\r\n        ) {\r\n          this.isEditMode = true\r\n          this.isMoveWhenMouseDown = false\r\n        }\r\n      } else {\r\n        if (currentSelect.length > 1 && (currentSelect.includes(this.controlId) || currentSelect.includes(this.userformData[this.userFormId][this.controlId].properties.GroupID!))) {\r\n          if (currentSelect.includes(this.controlId)) {\r\n            this.exchangeSelect()\r\n          } else {\r\n            if (\r\n              this.userformData[this.userFormId][this.controlId].properties.GroupID !== ''\r\n            ) {\r\n              const selGrpName = this.userformData[this.userFormId][this.controlId].properties.GroupID!\r\n              this.groupExchange(selGrpName)\r\n            }\r\n          }\r\n        } else {\r\n          let selectTarget = null\r\n          let currentGroup = ''\r\n          if (groupId !== '') {\r\n            if (\r\n              this.syncCurrentSelectedGroup === groupId &&\r\n            currentSelect[0] === groupId\r\n            ) {\r\n              selectTarget = this.controlId\r\n            } else {\r\n              selectTarget = groupId\r\n            }\r\n            currentGroup = groupId\r\n          } else {\r\n            selectTarget = this.controlId\r\n          }\r\n\r\n          this.selectControl({\r\n            userFormId: this.userFormId,\r\n            select: { container: this.getContainerList(selectTarget), selected: [selectTarget] }\r\n          })\r\n          this.syncCurrentSelectedGroup = currentGroup\r\n        }\r\n      }\r\n      if ((this.propControlData.type === 'Frame' || this.propControlData.type === 'MultiPage')) {\r\n        const selected = this.selectedControls[this.userFormId].selected\r\n        const container = this.selectedControls[this.userFormId].container[0]\r\n        if ((selected.length === 1 && !selected[0].startsWith('group')) || (selected.length > 1 && container === this.propControlData.properties.ID)) {\r\n          e.stopPropagation()\r\n          this.isMoving = true\r\n          this.isEditMode = true\r\n        }\r\n      }\r\n    } else if (this.keyType === 'shiftKey') {\r\n      const userData = this.userformData[this.userFormId]\r\n      let mainSelected = this.selectedControls[this.userFormId].selected[0]\r\n      const controlData: controlData = userData[this.containerId]\r\n      let divstyle: Array<IGroupStyle> = []\r\n      if (mainSelected.startsWith('group') || userData[this.controlId].properties.GroupID !== '') {\r\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\r\n          divstyle = divstayleArray\r\n        })\r\n      }\r\n      let mainCtrl: controlProperties = { ID: '' }\r\n      if (mainSelected.startsWith('group')) {\r\n        const getIndex = divstyle.findIndex(val => val.groupName === mainSelected)\r\n        mainCtrl = {\r\n          Left: parseInt(divstyle[getIndex].left!),\r\n          Top: parseInt(divstyle[getIndex].top!),\r\n          Width: parseInt(divstyle[getIndex].width!),\r\n          Height: parseInt(divstyle[getIndex].height!),\r\n          ID: ''\r\n        }\r\n      } else {\r\n        mainCtrl = userData[mainSelected].properties\r\n        if (mainSelected === this.containerId) {\r\n          mainSelected = ''\r\n          mainCtrl = userData[this.controlId].properties\r\n        }\r\n      }\r\n      let sideCtrl = userData[this.controlId].properties\r\n      if (userData[this.controlId].properties.GroupID !== '') {\r\n        const getIndex = divstyle.findIndex(val => val.groupName === userData[this.controlId].properties.GroupID)\r\n        sideCtrl = {\r\n          Left: parseInt(divstyle[getIndex].left!),\r\n          Top: parseInt(divstyle[getIndex].top!),\r\n          Width: parseInt(divstyle[getIndex].width!),\r\n          Height: parseInt(divstyle[getIndex].height!),\r\n          ID: ''\r\n        }\r\n      }\r\n      const selectedSize = {\r\n        Left: mainCtrl.Left! < sideCtrl.Left! ? mainCtrl.Left! : sideCtrl.Left!,\r\n        Top: mainCtrl.Top! < sideCtrl.Top! ? mainCtrl.Top! : sideCtrl.Top!,\r\n        Width: (mainCtrl.Left! + mainCtrl.Width!) > (sideCtrl.Left! + sideCtrl.Width!) ? mainCtrl.Left! + mainCtrl.Width! : sideCtrl.Left! + sideCtrl.Width!,\r\n        Height: (mainCtrl.Top! + mainCtrl.Height!) > (sideCtrl.Top! + sideCtrl.Height!) ? mainCtrl.Top! + mainCtrl.Height! : sideCtrl.Top! + sideCtrl.Height!\r\n      }\r\n      const left = selectedSize.Left\r\n      const top = selectedSize.Top\r\n      const right = selectedSize.Width\r\n      const bottom = selectedSize.Height\r\n      const multipleCtrl = []\r\n      if (left !== right || top !== bottom) {\r\n        for (let i in controlData.controls) {\r\n          const key: string = controlData.controls[i]\r\n          const controlProp: controlProperties = this.userformData[this.userFormId][key].properties\r\n          if (\r\n            left <= controlProp!.Left! + controlProp!.Width! &&\r\n            right >= controlProp!.Left! &&\r\n            top <= controlProp!.Top! + controlProp!.Height! &&\r\n            bottom >= controlProp!.Top!\r\n          ) {\r\n            multipleCtrl.push(key)\r\n          }\r\n        }\r\n        const selectedGroup: string[] = []\r\n        for (const val of multipleCtrl) {\r\n          const controlGroupId: string = this.userformData[this.userFormId][val]\r\n            .properties.GroupID!\r\n          if (controlGroupId && controlGroupId !== '') {\r\n            !selectedGroup.includes(controlGroupId)! &&\r\n              selectedGroup.push(controlGroupId)\r\n          } else {\r\n            selectedGroup.push(val)\r\n          }\r\n        }\r\n        if (this.selectedControlArray.length !== 0) {\r\n          this.selectControl({\r\n            userFormId: this.userFormId,\r\n            select: {\r\n              container: this.getContainerList(selectedGroup[0]),\r\n              selected: [...selectedGroup]\r\n            }\r\n          })\r\n        }\r\n      }\r\n    } else if (this.keyType === 'ctrlKey') {\r\n      let selected = [...this.selectedControls[this.userFormId].selected]\r\n      if (selected[0] === this.containerId) {\r\n        selected = []\r\n      } else {\r\n        selected = [...selected]\r\n      }\r\n      let selectedGroup = [this.controlId]\r\n      let combineArray = selected.filter(x => !selectedGroup.includes(x)).concat(selectedGroup.filter(x => !selected.includes(x)))\r\n      if (combineArray.length > 0) {\r\n        this.selectControl({\r\n          userFormId: this.userFormId,\r\n          select: {\r\n            container: this.getContainerList(combineArray[0]),\r\n            selected: combineArray\r\n          }\r\n        })\r\n      } else {\r\n        const container = this.selectedControls[this.userFormId].container\r\n        this.selectControl({\r\n          userFormId: this.userFormId,\r\n          select: {\r\n            container: container,\r\n            selected: [container[0]]\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  exchangeSelect () {\r\n    const sel = [...this.selectedControls[this.userFormId].selected]\r\n    const controlIndex = this.selectedControls[this.userFormId].selected.findIndex((val) => val === this.controlId)\r\n    sel.splice(controlIndex, 1)\r\n    sel.unshift(this.controlId)\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: { container: this.getContainerList(sel[0]), selected: [...sel] }\r\n    })\r\n  }\r\n  groupExchange (groupName: string) {\r\n    const sel = [...this.selectedControls[this.userFormId].selected]\r\n    const controlIndex = this.selectedControls[this.userFormId].selected.findIndex((val) => val === groupName)\r\n    sel.splice(controlIndex, 1)\r\n    sel.unshift(groupName)\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: { container: this.getContainerList(sel[0]), selected: [...sel] }\r\n    })\r\n  }\r\n  get getModeStyle () {\r\n    return this.mainSelected ? 'controlSelectStyle' : 'controlStyle'\r\n  }\r\n  @Watch('toolBoxSelect', { deep: true })\r\n  updatectrlEditMode () {\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    let container = this.selectedControls[this.userFormId].container[0]\r\n    if (selected.length === 1 && !selected[0].startsWith('group')) {\r\n      const type = this.userformData[this.userFormId][selected[0]].type\r\n      if (type === 'Frame' || type === 'Page' || type === 'MultiPage') {\r\n        container = selected[0]\r\n      }\r\n    }\r\n    const type = this.userformData[this.userFormId][container].type\r\n    if (type !== 'Frame' && type !== 'Page' && type !== 'MultiPage') {\r\n      this.isEditMode = false\r\n    }\r\n  }\r\n\r\n  @Watch('selectedControls', { deep: true })\r\n  updateSelectedControls () {\r\n    const type = this.userformData[this.userFormId][this.selectedContainer[0]].type\r\n    const controlType = this.userformData[this.userFormId][this.controlId].type\r\n    if (type === 'Frame' || type === 'Page' || type === 'MultiPage') {\r\n      if (controlType === 'Frame' || controlType === 'MultiPage') {\r\n        this.isEditMode = true\r\n      } else {\r\n        if (this.isMoving === false) {\r\n          this.isEditMode = false\r\n        } else {\r\n          this.isMoving = false\r\n        }\r\n      }\r\n    } else {\r\n      if (this.isMoving === false) {\r\n        this.isEditMode = false\r\n      } else {\r\n        this.isMoving = false\r\n      }\r\n    }\r\n  }\r\n\r\n  get getUserFormId () {\r\n    if (\r\n      this.propControlData.type === 'Frame' ||\r\n      this.propControlData.type === 'MultiPage' ||\r\n      this.propControlData.type === 'TabStrip'\r\n    ) {\r\n      return this.userFormId\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n  created () {\r\n    EventBus.$on('actMultipleCtrl', (val: boolean) => {\r\n      this.selMultipleCtrl = val\r\n      this.keyType = 'shiftKey'\r\n    })\r\n    EventBus.$on('selectMultipleCtrl', (val: boolean) => {\r\n      this.selMultipleCtrl = val\r\n      this.keyType = 'ctrlKey'\r\n    })\r\n  }\r\n  displayContextMenu (event: MouseEvent) {\r\n    EventBus.$emit('contextMenuDisplay', event, this.containerId, this.controlId, 'control', this.isEditMode)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.controlSelectStyle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  --border-width: 5;\r\n  --stripe-distance: 2px;\r\n  border: calc(var(--border-width) * 1px) solid transparent;\r\n  border-image: repeating-linear-gradient(\r\n      -110deg,\r\n      black,\r\n      transparent 1px,\r\n      transparent var(--stripe-distance),\r\n      black calc(var(--stripe-distance) + 0.2px)\r\n    )\r\n    var(--border-width);\r\n}\r\n.controlEditStyle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  --border-width: 5;\r\n  --stripe-distance: 2px;\r\n  border: calc(var(--border-width) * 1px) solid transparent;\r\n  border-image: repeating-linear-gradient(\r\n      -45deg,\r\n      black,\r\n      transparent 2px,\r\n      transparent var(--stripe-distance),\r\n      black calc(var(--stripe-distance) + 0.2px)\r\n    )\r\n    var(--border-width);\r\n}\r\n.controlStyle {\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  cursor: default !important;\r\n}\r\n:focus {\r\n  outline: none;\r\n}\r\n</style>\r\n"]}]}