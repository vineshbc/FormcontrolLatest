{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDContextMenu/index.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/atoms/FDContextMenu/index.vue","mtime":1611419998000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDContextMenu","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"outercontext-div\">\r\n      <div class=\"wrapper-context\" v-for=\"(value, i) in values\" :key=\"i\">\r\n        <button\r\n          class=\"wrapper1-context\"\r\n          v-if=\"value.values.length === 0\"\r\n          :style=\"{\r\n            border: value.text === 'none' ? '0.3px solid white' : '',\r\n            background: value.text === 'none' ? 'white' : '',\r\n            height: value.text === 'none' ? '4px' : '',\r\n            'padding-top': value.text === 'none' ? '0px' : '',\r\n            outline: value.text === 'none' ? 'none' : '',\r\n          }\"\r\n          @mousedown.stop=\"value.disabled === false ? controlAction($event,value.id) : controlDisable($event)\"\r\n        >\r\n          <div>\r\n            <FDSVGImage v-if=\"value.icon\" :name=\"value.icon\" />\r\n          </div>\r\n          <span v-if=\"value.text === 'none'\">\r\n            <hr />\r\n          </span>\r\n          <span\r\n            v-else\r\n            class=\"set-context\"\r\n            v-html=\"value.text\"\r\n            :style=\"{ opacity: value.disabled ? 0.5 : 1 }\"\r\n            >{{ value.text }}\r\n          </span>\r\n        </button>\r\n        <button class=\"wrapper1-context wrapper21\" v-else>\r\n          <div></div>\r\n          <ul class=\"set-context top-level-menu\">\r\n            <li>\r\n              <a href=\"#\" v-html=\"value.text\"  @mousedown.prevent.stop>{{ value.text }}</a>\r\n              <ul class=\"third-level-menu\">\r\n                <li\r\n                  class=\"wrapper1-context\"\r\n                  v-for=\"(subVal, i) in value.values\"\r\n                  :key=\"i\"\r\n                  :style=\"{\r\n                    border: subVal.text === 'none' ? '0.3px solid white' : '',\r\n                    background: subVal.text === 'none' ? 'white' : '',\r\n                    height: subVal.text === 'none' ? '4px' : '',\r\n                    'padding-top': subVal.text === 'none' ? '0px' : '',\r\n                    outline: subVal.text === 'none' ? 'none' : '',\r\n                  }\"\r\n                  @mousedown.stop=\"subVal.disabled === false ? controlAction($event,value.id, subVal.id): controlDisable($event)\"\r\n                >\r\n                  <div>\r\n                    <FDSVGImage v-if=\"subVal.icon\" :name=\"subVal.icon\" />\r\n                  </div>\r\n                  <a v-if=\"subVal.text === 'none'\">\r\n                    <hr />\r\n                  </a>\r\n                  <a\r\n                    v-else\r\n                    href=\"#\"\r\n                    v-html=\"subVal.text\"\r\n                    :style=\"{ opacity: subVal.disabled ? 0.5 : 1 }\"\r\n                    >{{ subVal.text }}</a\r\n                  >\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n          <div class=\"triangle-right\"></div>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Vue, Prop, Emit } from 'vue-property-decorator'\r\nimport FDSVGImage from '@/FormDesigner/components/atoms/FDSVGImage/index.vue'\r\nimport { ControlPropertyData } from '@/FormDesigner/models/ControlsTableProperties/ControlPropertyData.ts'\r\n\r\nimport { Action, State } from 'vuex-class'\r\nimport {\r\n  IaddChildControls,\r\n  IaddControl,\r\n  IdeleteControl,\r\n  IselectControl,\r\n  IsetChildControls,\r\n  IupdateControl,\r\n  IupdateControlExtraData,\r\n  IupdateCopyControlList,\r\n  IupdateGroup\r\n} from '@/storeModules/fd/actions'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\r\n\r\n@Component({\r\n  name: 'ContextMenu',\r\n  components: {\r\n    FDSVGImage\r\n  }\r\n})\r\nexport default class ContextMenu extends FDCommonMethod {\r\n  @Prop() values: Array<IControlContextMenu>;\r\n  @Prop() userFormId: string;\r\n  @Prop() containerId: string;\r\n  @Prop() keyEventName: string;\r\n  @Prop() controlId: string;\r\n  @Prop() selectedTab: number;\r\n  @Prop() data: controlData;\r\n  @Prop() groupStyleArray: Array<IGroupStyle>\r\n  @Prop() contextMenutype: string\r\n  @Prop() editTextRef: HTMLSpanElement | HTMLTextAreaElement\r\n  @Prop() copiedText: string\r\n  @Prop() textMenu: boolean\r\n\r\n  @State((state) => state.fd.selectedControls)\r\n  selectedControls!: fdState['selectedControls'];\r\n  @State((state: rootState) => state.fd.copyControlList)\r\n  copyControlList!: fdState['copyControlList'];\r\n  @State((state) => state.fd.userformData) userformData!: userformData;\r\n  @State((state) => state.fd.copiedControl) copiedControl!: userformData;\r\n  @State((state) => state.fd.groupedControls)\r\n  groupedControls!: fdState['groupedControls'];\r\n\r\n  @Action('fd/deleteControl') deleteControl!: (payload: IdeleteControl) => void;\r\n  @Action('fd/deleteCopiedControl') deleteCopiedControl!: (payload: IdeleteControl) => void;\r\n  @Action('fd/updateCopyControlList') updateCopyControlList!: (\r\n    payload: IupdateCopyControlList\r\n  ) => void;\r\n  @Action('fd/addControl') addControl!: (payload: IaddControl) => void;\r\n  @Action('fd/addCopiedControl') addCopiedControl!: (\r\n    payload: IaddControl\r\n  ) => void;\r\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void;\r\n  @Action('fd/updateGroup') updateGroup!: (payload: IupdateGroup) => void;\r\n  @Action('fd/updateControlExtraData') updateControlExtraData!: (\r\n    payload: IupdateControlExtraData\r\n  ) => void;\r\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void;\r\n  @Action('fd/setChildControls') setChildControls!: (\r\n    payload: IsetChildControls\r\n  ) => void;\r\n  @Action('fd/addChildControls') addChildControls!: (\r\n    payload: IaddChildControls\r\n  ) => void;\r\n  controlAction (event: Event, controlActionName: string, subVal: string) {\r\n    if (this.textMenu === false) {\r\n      if (controlActionName === 'ID_COPY') {\r\n        this.copyControl('copy')\r\n      } else if (controlActionName === 'ID_DELETE') {\r\n        this.clickDelete()\r\n      } else if (controlActionName === 'ID_PASTE') {\r\n        this.pasteControl()\r\n      } else if (controlActionName === 'ID_CUT') {\r\n        this.cutControl()\r\n      } else if (controlActionName === 'ID_SELECTALL') {\r\n        this.selectAll()\r\n      } else if (controlActionName === 'ID_GROUP') {\r\n        this.groupControl()\r\n      } else if (controlActionName === 'ID_UNGROUP') {\r\n        this.unGroupControl()\r\n      } else if (controlActionName === 'ID_NEWPAGE') {\r\n        this.addNewPage()\r\n      } else if (controlActionName === 'ID_DELETEPAGE') {\r\n        this.deleteCurrentPage()\r\n      } else if (controlActionName === 'ID_CONTROLFORWARD') {\r\n        this.bringForward()\r\n      } else if (controlActionName === 'ID_CONTROLBACKWARD') {\r\n        this.bringBackward()\r\n      } else if (controlActionName === 'ID_OBJECTPROP') {\r\n        this.displayProp()\r\n      } else if (controlActionName === 'ID_RENAME') {\r\n        const selectedPageID = this.selectedControls[this.userFormId].selected[0]\r\n        EventBus.$emit(\r\n          'renamePage',\r\n          this.userFormId,\r\n          selectedPageID,\r\n          this.selectedTab,\r\n          this.userformData[this.userFormId][selectedPageID].type\r\n        )\r\n      } else if (controlActionName === 'ID_MOVE') {\r\n        const type = this.userformData[this.userFormId][this.controlId].type\r\n        if (type === 'MultiPage') {\r\n          EventBus.$emit('userFormTabOrder', this.userFormId, this.controlId, type)\r\n        } else {\r\n          EventBus.$emit('tabStripTabOrder', this.userFormId, this.controlId, type)\r\n        }\r\n      } else if (controlActionName === 'ID_TABORDER') {\r\n        EventBus.$emit('userFormTabOrder', this.userFormId, this.containerId, '')\r\n      } else if (\r\n        controlActionName === 'ID_ALIGN' ||\r\n      controlActionName === 'ID_MAKESAMESIZE'\r\n      ) {\r\n        this.controlAlignMent(subVal)\r\n      }\r\n    } else {\r\n      if (controlActionName === 'ID_COPY') {\r\n        this.copyText()\r\n      } else if (controlActionName === 'ID_DELETE') {\r\n        this.deleteText()\r\n      } else if (controlActionName === 'ID_PASTE') {\r\n        if (event instanceof MouseEvent) {\r\n          this.pasteText(event)\r\n        }\r\n      } else if (controlActionName === 'ID_CUT') {\r\n        this.cutText()\r\n      } else if (controlActionName === 'ID_OBJECTPROP') {\r\n        this.displayProp()\r\n      }\r\n    }\r\n    this.closeMenu()\r\n  }\r\n  cutText () {\r\n    document.execCommand('cut')\r\n  }\r\n  deleteText () {\r\n    document.execCommand('delete')\r\n  }\r\n  copyText () {\r\n    document.execCommand('copy')\r\n  }\r\n  pasteText (event: MouseEvent) {\r\n    const controlType = this.userformData[this.userFormId][this.controlId].type\r\n    const position = this.getCursorPos(event)\r\n    const length = position.endPosition - position.startPosition\r\n    let baseValue = this.editTextRef.innerHTML.split('')\r\n    baseValue.splice(position.startPosition, length)\r\n    const updateValue = baseValue.slice(0, position.startPosition).join('') + this.copiedText + baseValue.slice(position.startPosition).join('')\r\n    EventBus.$emit('updateText', updateValue)\r\n  }\r\n  getCursorPos (event: MouseEvent) {\r\n    let startPosition = 0\r\n    let endPosition = 0\r\n    const isSupported = typeof window.getSelection !== 'undefined'\r\n    if (isSupported) {\r\n      const selection = window.getSelection()!\r\n      if (selection.anchorOffset > selection.focusOffset) {\r\n        startPosition = selection.focusOffset\r\n        endPosition = selection.anchorOffset\r\n      } else if (selection.anchorOffset === selection.focusOffset) {\r\n        startPosition = selection.focusOffset\r\n        endPosition = selection.focusOffset\r\n      } else {\r\n        startPosition = selection.anchorOffset\r\n        endPosition = selection.focusOffset\r\n      }\r\n    }\r\n    return { startPosition: startPosition, endPosition: endPosition }\r\n  }\r\n  created () {\r\n    EventBus.$on('groupControl', (value: string) => {\r\n      if (this.selectedControls[this.userFormId].container[0] === this.containerId) {\r\n        if (value === 'group') {\r\n          this.groupControl()\r\n        } else if (value === 'ungroup') {\r\n          this.unGroupControl()\r\n        }\r\n      }\r\n    })\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('groupControl')\r\n  }\r\n  @Emit('closeMenu')\r\n  closeMenu () {\r\n    return 0\r\n  }\r\n\r\n  displayProp () {\r\n    EventBus.$emit('dispProp', false)\r\n  }\r\n  createPageName (pageList: string[]) {\r\n    let lastControlId = 0\r\n    for (let i of pageList) {\r\n      if (i.indexOf('Page') !== -1) {\r\n        const IdNum = i.split('Page').pop() || '-1'\r\n        const pasreId = parseInt(IdNum, 10)\r\n        if (!isNaN(pasreId) && lastControlId < pasreId) {\r\n          lastControlId = pasreId\r\n        }\r\n      }\r\n    }\r\n    return lastControlId + 1\r\n  }\r\n  getPageCount (container: string) {\r\n    const pageList: string[] = []\r\n    for (const pageId of this.userformData[this.userFormId][container].controls) {\r\n      pageList.push(this.userformData[this.userFormId][pageId].properties.Name!)\r\n    }\r\n    const name = this.createPageName(pageList)\r\n    return name\r\n  }\r\n\r\n  addNewPage () {\r\n    const type = this.userformData[this.userFormId][this.controlId].type\r\n    if (type === 'TabStrip') {\r\n      const tabControlData = JSON.parse(\r\n        JSON.stringify(this.userformData[this.userFormId][this.controlId])\r\n      ).extraDatas.Tabs\r\n      let prevTabId = -1\r\n      const initialTabData: tabsItems = {\r\n        Name: '',\r\n        Caption: '',\r\n        ToolTip: '',\r\n        Accelerator: ''\r\n      }\r\n      if (tabControlData.length > 0) {\r\n        for (let i = 0; i < tabControlData.length; i++) {\r\n          const id = tabControlData[i].Name.split('Tab').pop() || '-1'\r\n          const parseId = parseInt(id, 10)\r\n          if (!isNaN(parseId) && prevTabId < parseId) {\r\n            prevTabId = parseId\r\n          }\r\n        }\r\n        prevTabId += 1\r\n        initialTabData.Name = `Tab${prevTabId}`\r\n        initialTabData.Caption = `Tab${prevTabId}`\r\n      } else {\r\n        initialTabData.Name = `Tab${1}`\r\n        initialTabData.Caption = `Tab${1}`\r\n      }\r\n      tabControlData.push(initialTabData)\r\n      this.updateControlExtraData({\r\n        userFormId: this.userFormId,\r\n        controlId: this.controlId,\r\n        propertyName: 'Tabs',\r\n        value: tabControlData\r\n      })\r\n      this.updateControl({\r\n        userFormId: this.userFormId,\r\n        controlId: this.controlId,\r\n        propertyName: 'Value',\r\n        value: prevTabId - 1\r\n      })\r\n    } else if (type === 'MultiPage') {\r\n      const parentId = this.controlId.split('MultiPage').pop()\r\n      const controlName = `Page${parentId}_`\r\n\r\n      let lastControlId = 0\r\n      const userformControlIds = Object.keys(this.userformData[this.userFormId])\r\n      for (let i = 0; i < userformControlIds.length; i++) {\r\n        if (userformControlIds[i].indexOf(controlName) !== -1) {\r\n          const IdNum =\r\n          userformControlIds[i].split(controlName).pop() || '-1'\r\n          const pasreId = parseInt(IdNum, 10)\r\n          if (!isNaN(pasreId) && lastControlId < pasreId) {\r\n            lastControlId = pasreId\r\n          }\r\n        }\r\n      }\r\n      const controlPropData = new ControlPropertyData()\r\n      let controlObj = controlPropData.data['Page']\r\n      const item = JSON.parse(JSON.stringify(controlObj!))\r\n      lastControlId += 1\r\n      item.properties.ID = `ID_${controlName}${lastControlId}`\r\n      const count = this.getPageCount(this.controlId)\r\n      item.properties.Caption = `Page${count}`\r\n      item.properties.Name = `Page${count}`\r\n      item.properties.Index = this.userformData[this.userFormId][this.controlId].controls.length\r\n      this.addControl({\r\n        userFormId: this.userFormId,\r\n        controlId: this.controlId,\r\n        addId: item.properties.ID,\r\n        item: item\r\n      })\r\n      this.updateControl({\r\n        userFormId: this.userFormId,\r\n        controlId: this.controlId,\r\n        propertyName: 'Value',\r\n        value: item.properties.Index\r\n      })\r\n      this.selectControl({\r\n        userFormId: this.userFormId,\r\n        select: {\r\n          container: this.getContainerList(item.properties.ID),\r\n          selected: [item.properties.ID]\r\n        }\r\n      })\r\n      EventBus.$emit('updateMultiPageValue')\r\n    }\r\n  }\r\n  bringForward () {\r\n    const userData = this.userformData[this.userFormId]\r\n    const highProrControl = []\r\n    const lowProrControl = []\r\n    const container = this.getContainerList(this.getSelectedControlsDatas![0])[0]\r\n    const containerControls = this.userformData[this.userFormId][container].controls\r\n    for (const index in containerControls) {\r\n      const cntrlData = this.userformData[this.userFormId][containerControls[index]]\r\n      if (cntrlData.type === 'MultiPage' || cntrlData.type === 'Frame' || cntrlData.type === 'ListBox') {\r\n        highProrControl.push(containerControls[index])\r\n      } else {\r\n        lowProrControl.push(containerControls[index])\r\n      }\r\n    }\r\n    let nextSelctedSeries: string[] = []\r\n    let nextHighControlSeries: string[] = []\r\n    const getSelControl = [...this.getSelectedControlsDatas!]\r\n    getSelControl.sort((a, b) => {\r\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\r\n    })\r\n    for (const selControl of getSelControl!) {\r\n      const type = userData[selControl].type\r\n      const tempZIndex = userData[selControl].extraDatas!.zIndex!\r\n      const controlIndex = Object.keys(userData).findIndex((val: string, index: number) => {\r\n        return 'zIndex' in userData[val].extraDatas! && (userData[val].extraDatas!.zIndex === tempZIndex + 1)\r\n      })\r\n      const nextSelectedControl = controlIndex !== -1 ? Object.keys(userData)[controlIndex] : ''\r\n      const nextControlType = userData[nextSelectedControl].type\r\n      if (nextSelectedControl !== '' && !highProrControl.includes(nextSelectedControl)) {\r\n        if (getSelControl!.includes(nextSelectedControl)) {\r\n          if (!nextSelctedSeries.includes(selControl)) {\r\n            nextSelctedSeries.push(selControl)\r\n          }\r\n          if (!nextSelctedSeries.includes(nextSelectedControl)) {\r\n            nextSelctedSeries.push(nextSelectedControl)\r\n          }\r\n        } else {\r\n          if (Object.keys(nextSelctedSeries).length !== 0) {\r\n            const tempExchageIndex = userData[nextSelctedSeries[0]].extraDatas!.zIndex!\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length /* && swapTabIndex > 0 */) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\r\n              this.updateExtraDatas(nextSelctedSeries[0], 'zIndex', swapTabIndex - (nextSelctedSeries!.length - 1))\r\n            }\r\n            for (let j = 1; j < nextSelctedSeries.length; j++) {\r\n              const updateIndex = userData[nextSelctedSeries[j]].extraDatas!.zIndex! + 1\r\n              this.updateExtraDatas(nextSelctedSeries[j], 'zIndex', updateIndex)\r\n            }\r\n            nextSelctedSeries = []\r\n          } else {\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length /* && swapTabIndex > 0 */) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\r\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (getSelControl!.includes(nextSelectedControl) && (type === 'Frame' || type === 'MultiPage' || type === 'ListBox')) {\r\n          if (!nextHighControlSeries.includes(selControl)) {\r\n            nextHighControlSeries.push(selControl)\r\n          }\r\n          if (!nextHighControlSeries.includes(nextSelectedControl)) {\r\n            nextHighControlSeries.push(nextSelectedControl)\r\n          }\r\n        } else if (type === 'Frame' || type === 'MultiPage' || type === 'ListBox') {\r\n          if (Object.keys(nextHighControlSeries).length !== 0) {\r\n            const tempExchageIndex = userData[nextHighControlSeries[0]].extraDatas!.zIndex!\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\r\n              this.updateExtraDatas(nextHighControlSeries[0], 'zIndex', swapTabIndex - (nextHighControlSeries!.length - 1))\r\n            }\r\n            for (let j = 1; j < nextHighControlSeries.length; j++) {\r\n              const updateIndex = userData[nextHighControlSeries[j]].extraDatas!.zIndex! + 1\r\n              this.updateExtraDatas(nextHighControlSeries[j], 'zIndex', updateIndex)\r\n            }\r\n            nextHighControlSeries = []\r\n          } else {\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length /* && swapTabIndex > 0 */) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\r\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  bringBackward () {\r\n    const userData = this.userformData[this.userFormId]\r\n    const highProrControl = []\r\n    const lowProrControl = []\r\n    const container = this.getContainerList(this.getSelectedControlsDatas![0])[0]\r\n    const containerControls = this.userformData[this.userFormId][container].controls\r\n    for (const index in containerControls) {\r\n      const cntrlData = this.userformData[this.userFormId][containerControls[index]]\r\n      if (cntrlData.type === 'MultiPage' || cntrlData.type === 'Frame' || cntrlData.type === 'ListBox') {\r\n        highProrControl.push(containerControls[index])\r\n      } else {\r\n        lowProrControl.push(containerControls[index])\r\n      }\r\n    }\r\n    let nextSelctedSeries: string[] = []\r\n    let nextHighControlSeries: string[] = []\r\n    const getSelControl = [...this.getSelectedControlsDatas!]\r\n    getSelControl.sort((a, b) => {\r\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\r\n    })\r\n    for (const selControl of getSelControl) {\r\n      const type = userData[selControl].type\r\n      const tempZIndex = userData[selControl].extraDatas!.zIndex!\r\n      const controlIndex = Object.keys(userData).findIndex((val: string, index: number) => {\r\n        return 'zIndex' in userData[val].extraDatas! && (userData[val].extraDatas!.zIndex === tempZIndex - 1)\r\n      })\r\n      const nextSelectedControl = controlIndex !== -1 ? Object.keys(userData)[controlIndex] : ''\r\n      const nextControlType = userData[nextSelectedControl].type\r\n      if (nextSelectedControl !== '' && !highProrControl.includes(selControl)) {\r\n        if (getSelControl!.includes(nextSelectedControl)) {\r\n          if (!nextSelctedSeries.includes(selControl)) {\r\n            nextSelctedSeries.push(selControl)\r\n          }\r\n          if (!nextSelctedSeries.includes(nextSelectedControl)) {\r\n            nextSelctedSeries.push(nextSelectedControl)\r\n          }\r\n        } else {\r\n          if (Object.keys(nextSelctedSeries).length !== 0) {\r\n            const tempExchageIndex = userData[nextSelctedSeries[0]].extraDatas!.zIndex!\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length && swapTabIndex > 0) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\r\n              this.updateExtraDatas(nextSelctedSeries[0], 'zIndex', (nextSelctedSeries!.length + 1) - swapTabIndex)\r\n            }\r\n            for (let j = 1; j < nextSelctedSeries.length; j++) {\r\n              const updateIndex = userData[nextSelctedSeries[j]].extraDatas!.zIndex! - 1\r\n              this.updateExtraDatas(nextSelctedSeries[j], 'zIndex', updateIndex)\r\n            }\r\n            nextSelctedSeries = []\r\n          } else {\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length && swapTabIndex > 0) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\r\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\r\n            }\r\n          }\r\n        }\r\n      } else if (!lowProrControl.includes(nextSelectedControl) && (type === 'Frame' || type === 'MultiPage' || type === 'ListBox')) {\r\n        if (getSelControl!.includes(nextSelectedControl)) {\r\n          if (!nextHighControlSeries.includes(selControl)) {\r\n            nextHighControlSeries.push(selControl)\r\n          }\r\n          if (!nextHighControlSeries.includes(nextSelectedControl)) {\r\n            nextHighControlSeries.push(nextSelectedControl)\r\n          }\r\n        } else {\r\n          if (Object.keys(nextHighControlSeries).length !== 0) {\r\n            const tempExchageIndex = userData[nextHighControlSeries[0]].extraDatas!.zIndex!\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\r\n              this.updateExtraDatas(nextHighControlSeries[0], 'zIndex', (nextHighControlSeries!.length + 1) - swapTabIndex)\r\n            }\r\n            for (let j = 1; j < nextHighControlSeries.length; j++) {\r\n              const updateIndex = userData[nextHighControlSeries[j]].extraDatas!.zIndex! - 1\r\n              this.updateExtraDatas(nextHighControlSeries[j], 'zIndex', updateIndex)\r\n            }\r\n            nextHighControlSeries = []\r\n          } else {\r\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\r\n            if (swapTabIndex <= userData[container].controls.length && swapTabIndex > 0) {\r\n              const index = userData[container].controls.findIndex(\r\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\r\n              )\r\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\r\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  deletePageIndex (id: string) {\r\n    const userData = this.userformData[this.userFormId]\r\n    const container = this.selectedControls[this.userFormId].container[0]\r\n    const tempIndex = userData[id].properties!.Index!\r\n    for (const key in userData[container].controls) {\r\n      const controlZIndex = userData[userData[container].controls[key]].properties!.Index!\r\n      if (controlZIndex > tempIndex) {\r\n        this.updateControl({\r\n          userFormId: this.userFormId,\r\n          controlId: userData[container].controls[key],\r\n          propertyName: 'Index',\r\n          value: controlZIndex - 1\r\n        })\r\n      }\r\n    }\r\n  }\r\n  deleteCurrentPage () {\r\n    const type = this.userformData[this.userFormId][this.controlId].type\r\n    if (type === 'TabStrip') {\r\n      const tabControlData = JSON.parse(\r\n        JSON.stringify(this.userformData[this.userFormId][this.controlId])\r\n      ).extraDatas.Tabs\r\n      if (tabControlData && tabControlData.length > 0) {\r\n        tabControlData.splice(this.selectedTab, 1)\r\n        this.updateControlExtraData({\r\n          userFormId: this.userFormId,\r\n          controlId: this.controlId,\r\n          propertyName: 'Tabs',\r\n          value: tabControlData\r\n        })\r\n        this.updateTabStripValue(this.selectedTab! - 1)\r\n      }\r\n    } else if (type === 'MultiPage') {\r\n      const controls = this.userformData[this.userFormId][this.controlId].controls\r\n      if (controls.length > 0) {\r\n        this.deletePageIndex(this.selectedControls[this.userFormId].selected[0])\r\n        const index = this.userformData[this.userFormId][this.selectedControls[this.userFormId].selected[0]].properties.Index\r\n        this.deleteControl({\r\n          userFormId: this.userFormId,\r\n          parentId: this.selectedControls[this.userFormId].container[0],\r\n          targetId: this.selectedControls[this.userFormId].selected[0]\r\n        })\r\n        this.updateIndex(index! - 1)\r\n      }\r\n      EventBus.$emit('updateMultiPageValue')\r\n    }\r\n  }\r\n  updateTabStripValue (index: number) {\r\n    const userData = this.userformData[this.userFormId]\r\n    const tabs = userData[this.controlId].extraDatas!.Tabs!\r\n    const tabIndex = tabs.findIndex((val, key) => key === index + 1)\r\n    if (tabIndex !== -1) {\r\n      const value = index + 1\r\n      this.updateControlProperty('Value', value, this.controlId)\r\n    } else if (tabIndex === -1 && index !== -1) {\r\n      const value = index\r\n      this.updateControlProperty('Value', value, this.controlId)\r\n    } else {\r\n      this.updateControlProperty('Value', -1, this.controlId)\r\n    }\r\n  }\r\n  changeSelect (control: string) {\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: this.getContainerList(control),\r\n        selected: [control]\r\n      }\r\n    })\r\n  }\r\n  updateIndex (index: number) {\r\n    const userData = this.userformData[this.userFormId]\r\n    const controls = userData[this.controlId].controls\r\n    const pageIndex = controls.findIndex(val => userData[val].properties.Index === index + 1)\r\n    if (pageIndex !== -1) {\r\n      const value = userData[controls[pageIndex]].properties.Index!\r\n      this.updateControlProperty('Value', value, this.controlId)\r\n      this.changeSelect(controls[pageIndex])\r\n    } else if (pageIndex === -1 && index !== -1) {\r\n      const updateIndex = controls.findIndex(val => userData[val].properties.Index === index)\r\n      const value = userData[controls[updateIndex]].properties.Index!\r\n      this.updateControlProperty('Value', value, this.controlId)\r\n      this.changeSelect(controls[updateIndex])\r\n    } else {\r\n      this.updateControlProperty('Value', -1, this.controlId)\r\n      this.changeSelect(this.controlId)\r\n    }\r\n  }\r\n  updateControlProperty (\r\n    propertyName: keyof controlProperties,\r\n    propertyValue: number | string,\r\n    controlId: string\r\n  ) {\r\n    this.updateControl({\r\n      userFormId: this.userFormId,\r\n      controlId: controlId,\r\n      propertyName: propertyName,\r\n      value: propertyValue\r\n    })\r\n  }\r\n\r\n  unGroupControl () {\r\n    const isGroup = this.selectedControls[this.userFormId].selected[0].startsWith('group')\r\n    const selControl = this.selectedControls[this.userFormId].selected[0]\r\n    const selected = isGroup\r\n      ? selControl\r\n      : this.userformData[this.userFormId][selControl].properties.GroupID!\r\n\r\n    const controlList = []\r\n    for (const key in this.userformData[this.userFormId]) {\r\n      const type = this.userformData[this.userFormId][key].type\r\n      if (\r\n        type !== 'Userform' &&\r\n        this.userformData[this.userFormId][key].properties.GroupID === selected\r\n      ) {\r\n        controlList.push(key)\r\n      }\r\n    }\r\n    const groupArray = [...this.groupedControls[this.userFormId]!.groupArray!]\r\n    this.updateControlGroupID(selected, '')\r\n    const index = this.groupedControls[this.userFormId]!.groupArray!.findIndex(\r\n      (val) => val === selected\r\n    )\r\n    groupArray.splice(index, 1)\r\n    this.updateGroup({ userFormId: this.userFormId, groupArray: groupArray })\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: isGroup\r\n          ? this.getContainerList(controlList[0])\r\n          : this.getContainerList(selControl[0]),\r\n        selected: isGroup ? controlList : [selControl]\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @description To generate new GroupID\r\n   * @function createGroupId\r\n   */\r\n  createGroupId () {\r\n    let lastControlId = 0\r\n    for (let i of this.groupedControls[this.userFormId]!.groupArray!) {\r\n      if (i.indexOf('group') !== -1) {\r\n        const IdNum = i.split('group').pop() || '-1'\r\n        const pasreId = parseInt(IdNum, 10)\r\n        if (!isNaN(pasreId) && lastControlId < pasreId) {\r\n          lastControlId = pasreId\r\n        }\r\n      }\r\n    }\r\n    return `group${lastControlId + 1}`\r\n  }\r\n\r\n  @Emit('createGroup')\r\n  createGroup (groupId: string) {\r\n    return groupId\r\n  }\r\n\r\n  updateControlGroupID (groupName: string, updateGroupId: string) {\r\n    for (const val in this.userformData[this.userFormId]) {\r\n      if (!val.startsWith('ID_USERFORM')) {\r\n        const controlGrpId = this.userformData[this.userFormId][val].properties\r\n          .GroupID\r\n        if (controlGrpId === groupName) {\r\n          this.updateControlProperty('GroupID', updateGroupId, val)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @description To update the group Information in main data\r\n   * @function groupControl\r\n   */\r\n  groupControl () {\r\n    let updateGroupId: string = ''\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n\r\n    const selectedGroupArray = selected.filter(\r\n      (val: string) => val.startsWith('group') && val\r\n    )\r\n    updateGroupId = selectedGroupArray[0]\r\n    if (selectedGroupArray.length >= 2) {\r\n      const groupArray = [\r\n        ...this.groupedControls[this.userFormId]!.groupArray!\r\n      ]\r\n      for (let i = 0; i < groupArray.length; i++) {\r\n        for (let j = 0; j < selectedGroupArray.length; j++) {\r\n          if (selectedGroupArray[j] === groupArray[i]) {\r\n            this.updateControlGroupID(groupArray[i], selectedGroupArray[0])\r\n            groupArray.splice(i, 1)\r\n          }\r\n        }\r\n      }\r\n      this.updateGroup({\r\n        userFormId: this.userFormId,\r\n        groupArray: [...groupArray, selectedGroupArray[0]]\r\n      })\r\n      updateGroupId = selectedGroupArray[0]!\r\n    } else if (selectedGroupArray.length === 0) {\r\n      updateGroupId = this.createGroupId()\r\n      const groupArray = [\r\n        ...this.groupedControls[this.userFormId]!.groupArray!,\r\n        updateGroupId\r\n      ]\r\n      this.updateGroup({ userFormId: this.userFormId, groupArray: groupArray })\r\n    }\r\n\r\n    for (let val of selected) {\r\n      if (!val.startsWith('group')) {\r\n        this.updateControlProperty('GroupID', updateGroupId, val)\r\n      }\r\n    }\r\n    this.createGroup(updateGroupId)\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: this.getContainerList(updateGroupId),\r\n        selected: [updateGroupId]\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @description To select all the controls in respective container present in respective userform\r\n   * @function selectAll\r\n   */\r\n  selectAll () {\r\n    // const selecetedContainer = this.selectedControls[this.userFormId].container[0]\r\n    const controlObjectList = [\r\n      ...this.userformData[this.userFormId][this.containerId].controls\r\n    ]\r\n    const selecedGroup: string[] = []\r\n    for (const val of controlObjectList) {\r\n      const controlGroupId: string = this.userformData[this.userFormId][val]\r\n        .properties.GroupID!\r\n      if (controlGroupId && controlGroupId !== '') {\r\n        !selecedGroup.includes(controlGroupId)! &&\r\n          selecedGroup.push(controlGroupId)\r\n      } else {\r\n        selecedGroup.push(val)\r\n      }\r\n    }\r\n\r\n    if (controlObjectList.length !== 0) {\r\n      this.selectControl({\r\n        userFormId: this.userFormId,\r\n        select: {\r\n          container: this.getContainerList(selecedGroup[0]),\r\n          selected: [...selecedGroup]\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description To update the cutted controls in respective container present in respective userform\r\n   * @function cutControl\r\n   */\r\n  cutControl () {\r\n    this.copyControl('cut')\r\n    this.clickDelete()\r\n  }\r\n\r\n  /**\r\n   * @description To update the copied controls in respective container present in respective userform\r\n   * @function copyControl\r\n   */\r\n  copyControl (type: string) {\r\n    if (this.copiedControl[this.userFormId][this.userFormId].controls.length > 0) {\r\n      const lengthCount = this.copiedControl[this.userFormId][this.userFormId].controls.length\r\n      const controls = [...this.copiedControl[this.userFormId][this.userFormId].controls]\r\n      for (let i = 0; i < lengthCount; i++) {\r\n        this.deleteCopiedControl({\r\n          userFormId: this.userFormId,\r\n          parentId: this.userFormId,\r\n          targetId: controls[i]\r\n        })\r\n      }\r\n    }\r\n    const userFormData = this.userformData[this.userFormId]\r\n    const selContainer = this.selectedControls[this.userFormId].container[0]\r\n    const selSelected = this.selectedControls[this.userFormId].selected\r\n    const updateSelected = []\r\n    for (let control of selSelected) {\r\n      if (!control.startsWith('group') && userFormData[control].type === 'Page') {\r\n        control = this.getContainerList(control)[0]\r\n      }\r\n      updateSelected.push(control)\r\n    }\r\n    this.updateCopyControlList({\r\n      userFormId: this.userFormId,\r\n      parentId: selContainer,\r\n      targetId: updateSelected,\r\n      type: type\r\n    })\r\n\r\n    const recCopyControl = (daTarget: string) => {\r\n      const daTargetControls = userFormData[daTarget].controls\r\n      if (daTargetControls.length > 0) {\r\n        for (let i in daTargetControls) {\r\n          const controlObject = JSON.parse(JSON.stringify(userFormData[daTargetControls[i]]))\r\n          const controlArray = []\r\n          const ctrlObj = { ...controlObject, controls: [] }\r\n          this.addCopiedControl({\r\n            userFormId: this.userFormId,\r\n            controlId: daTarget,\r\n            addId: daTargetControls[i],\r\n            item: ctrlObj\r\n          })\r\n          recCopyControl(daTargetControls[i])\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let key of selSelected) {\r\n      if (!key.startsWith('group')) {\r\n        if (userFormData[key].type === 'Page') {\r\n          key = this.getContainerList(key)[0]\r\n        }\r\n        const controlObject = JSON.parse(JSON.stringify(userFormData[key]))\r\n        const ctrlObj = { ...controlObject, controls: [] }\r\n        this.addCopiedControl({\r\n          userFormId: this.userFormId,\r\n          controlId: this.userFormId,\r\n          addId: key,\r\n          item: ctrlObj\r\n        })\r\n        recCopyControl(key)\r\n      } else {\r\n        for (let ctrlId in userFormData) {\r\n          const controlProp = userFormData[ctrlId].properties.GroupID\r\n          if (controlProp) {\r\n            if (controlProp === key) {\r\n              const controlObject = JSON.parse(\r\n                JSON.stringify(userFormData[ctrlId])\r\n              )\r\n              const ctrlObj = { ...controlObject, controls: [] }\r\n              this.addCopiedControl({\r\n                userFormId: this.userFormId,\r\n                controlId: this.userFormId,\r\n                addId: ctrlId,\r\n                item: ctrlObj\r\n              })\r\n              recCopyControl(ctrlId)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  updateNewControl (parentId: string, ctrlId: string, ctrlObj: controlData, isParent: boolean) {\r\n    this.addControl({\r\n      userFormId: this.userFormId,\r\n      controlId: parentId,\r\n      addId: ctrlId,\r\n      item: ctrlObj\r\n    })\r\n    if (isParent) {\r\n      const newTabIndex = this.userformData[this.userFormId][parentId].controls.length\r\n      this.updateTabIndexValue(ctrlId)\r\n      this.updateZIndexValue(ctrlId)\r\n    }\r\n  }\r\n\r\n  newPasteControlId (key: string, parentId: string) {\r\n    const userFormData = this.userformData[this.userFormId]\r\n    let lastControlId = 0\r\n    const type = key in userFormData ? userFormData[key].type : ''\r\n    const parentName = parentId !== '' ? parentId.split('MultiPage').pop() : -1\r\n    const selectedControlName: string | undefined =\r\n    type === 'Page'\r\n      ? `Page${parentName}_`\r\n      : key.replace(/[0-9]/g, '').split('_').pop()\r\n    const userformControlIds = Object.keys(userFormData)\r\n    for (let i = 0; i < userformControlIds.length; i++) {\r\n      if (userformControlIds[i].indexOf(selectedControlName!) !== -1) {\r\n        const IdNum = userformControlIds[i].split(selectedControlName!).pop() || '-1'\r\n        const pasreId = parseInt(IdNum, 10)\r\n        if (!isNaN(pasreId) && lastControlId < pasreId) {\r\n          lastControlId = pasreId\r\n        }\r\n      }\r\n    }\r\n    lastControlId += 1\r\n    const Name = `${selectedControlName}${lastControlId}`\r\n    return Name\r\n  }\r\n  removeChildControl (daTarget: string, deleteControl: string) {\r\n    const removeControl = [...this.userformData[this.userFormId][daTarget].controls]\r\n    const removeIndex = removeControl.findIndex((val) => val === deleteControl)\r\n    removeControl.splice(removeIndex, 1)\r\n    this.setChildControls({\r\n      userFormId: this.userFormId,\r\n      containerId: daTarget,\r\n      targetControls: removeControl\r\n    })\r\n  }\r\n  getPasteControlSize () {\r\n    const usrFrmData = this.userformData[this.userFormId]\r\n    const pasteControls = [...this.getSelectedControlsDatas!]\r\n    const pasteContainer = this.selectedControls[this.userFormId].container[0]\r\n    const leftArray = [...pasteControls]\r\n    const topArray = [...pasteControls]\r\n    const rightArray = [...pasteControls]\r\n    const bottomArray = [...pasteControls]\r\n    leftArray.sort((a, b) => {\r\n      return usrFrmData[a].properties.Left! - usrFrmData[b].properties.Left!\r\n    })\r\n    topArray.sort((a, b) => {\r\n      return usrFrmData[a].properties.Top! - usrFrmData[b].properties.Top!\r\n    })\r\n    rightArray.sort((a, b) => {\r\n      return (usrFrmData[b].properties.Left! + usrFrmData[b].properties.Width!) -\r\n       (usrFrmData[a].properties.Left! + usrFrmData[a].properties.Width!)\r\n    })\r\n    bottomArray.sort((a, b) => {\r\n      return (usrFrmData[b].properties.Top! + usrFrmData[b].properties.Height!) -\r\n       (usrFrmData[a].properties.Top! + usrFrmData[a].properties.Height!)\r\n    })\r\n    const groupRectLeft = usrFrmData[leftArray[0]].properties.Left!\r\n    const groupRectTop = usrFrmData[topArray[0]].properties.Top!\r\n    const groupRectBottom = usrFrmData[bottomArray[0]].properties.Top! + usrFrmData[bottomArray[0]].properties.Height!\r\n    const groupRectRight = usrFrmData[rightArray[0]].properties.Left! + usrFrmData[rightArray[0]].properties.Width!\r\n\r\n    const deltaTop = (groupRectBottom - groupRectTop) / 2\r\n    const deltaLeft = (groupRectRight - groupRectLeft) / 2\r\n\r\n    const type = this.userformData[this.userFormId][pasteContainer].type\r\n    const container = type === 'Page' ? this.userformData[this.userFormId][this.getContainerList(pasteContainer)[0]].properties : this.userformData[this.userFormId][pasteContainer].properties\r\n    const containerHeight = type === 'Userform' ? container.Height! - 37 : container.Height!\r\n    const targetTop = ((containerHeight) / 2) - deltaTop\r\n    const targetLeft = (container.Width! / 2) - deltaLeft\r\n\r\n    const diffTop = targetTop - usrFrmData[topArray[0]].properties.Top!\r\n    const diffLeft = targetLeft - usrFrmData[leftArray[0]].properties.Left!\r\n\r\n    for (let i = 0; i < leftArray.length; i++) {\r\n      let left = usrFrmData[leftArray[i]].properties.Left! + diffLeft\r\n      if (!isNaN(left)) {\r\n        this.updateControlProperty('Left', Math.abs(left), leftArray[i])\r\n      }\r\n    }\r\n    for (let i = 0; i < topArray.length; i++) {\r\n      let top = usrFrmData[topArray[i]].properties.Top! + diffTop\r\n      if (!isNaN(top)) {\r\n        this.updateControlProperty('Top', Math.abs(top), topArray[i])\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @description To paste controls in respective container present in respective userform\r\n   * @function pasteControl\r\n   */\r\n  pasteControl () {\r\n    if (this.copyControlList.type === 'copy') {\r\n      const selContainer = this.copyControlList.parentId\r\n      const selSelected = this.copyControlList.targetId\r\n      const userFormData = this.userformData[this.userFormId]\r\n      const presentGroupId: string[] = []\r\n      const newGroupId: string[] = []\r\n      const oldControlId: string[] = []\r\n      const newControlId: string[] = []\r\n\r\n      for (const key in this.copiedControl[this.userFormId]) {\r\n        const controlProp = this.copiedControl[this.userFormId][key].properties.GroupID\r\n        if (controlProp && !presentGroupId.includes(controlProp)) {\r\n          presentGroupId.push(controlProp)\r\n        }\r\n      }\r\n      for (let j in presentGroupId) {\r\n        const newId = this.createGroupId()\r\n        newGroupId.push(newId)\r\n        let groupArray: string[] = [\r\n          ...this.groupedControls[this.userFormId]!.groupArray!,\r\n          newId\r\n        ]\r\n        this.updateGroup({\r\n          userFormId: this.userFormId,\r\n          groupArray: groupArray!\r\n        })\r\n      }\r\n\r\n      const recCopyControl = (daTarget: string) => {\r\n        const daTargetControls = userFormData[daTarget].controls\r\n        if (daTargetControls && daTargetControls.length > 0) {\r\n          for (let i = 0, limit = daTargetControls.length; i < limit; i++) {\r\n            const key = daTargetControls[i]\r\n            const Name = this.newPasteControlId(key, daTarget)\r\n            const controlID:| string| undefined = `ID_${Name}`\r\n            const controlObj = { ...this.copiedControl[this.userFormId][key] }\r\n            let groupIdIndex = -1\r\n            groupIdIndex = presentGroupId.findIndex((val) => val === controlObj.properties.GroupID)\r\n            const item: controlData = {\r\n              ...controlObj,\r\n              properties: {\r\n                ...controlObj.properties,\r\n                ID: controlID!,\r\n                GroupID: groupIdIndex !== -1 ? newGroupId[groupIdIndex] : '',\r\n                Name: Name\r\n              }\r\n            }\r\n            this.removeChildControl(daTarget, key)\r\n            this.updateNewControl(daTarget, controlID, item, false)\r\n            recCopyControl(controlID)\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const key of selSelected) {\r\n        if (!key.startsWith('group')) {\r\n          oldControlId.push(key)\r\n          const Name = this.newPasteControlId(key, '')\r\n          const controlID:| string| undefined = `ID_${Name}`\r\n          const controlObj = { ...this.copiedControl[this.userFormId][key] }\r\n          newControlId.push(controlID)\r\n          let groupIdIndex = -1\r\n          groupIdIndex = presentGroupId.findIndex(\r\n            (val) => controlObj.properties.GroupID === val\r\n          )\r\n          if (selSelected.length === 1 && this.copiedControl[this.userFormId][selSelected[0]].properties.GroupID !== '') {\r\n            groupIdIndex = -1\r\n          }\r\n          const item: controlData = {\r\n            ...controlObj,\r\n            properties: {\r\n              ...controlObj.properties,\r\n              ID: controlID!,\r\n              GroupID: groupIdIndex !== -1 ? newGroupId[groupIdIndex] : '',\r\n              Name: Name\r\n            }\r\n          }\r\n          this.updateNewControl(this.containerId, controlID, item, true)\r\n          recCopyControl(controlID)\r\n        } else {\r\n          for (let ctrlId in this.copiedControl[this.userFormId]) {\r\n            const controlProp = this.copiedControl[this.userFormId][ctrlId]\r\n              .properties.GroupID\r\n            if (controlProp) {\r\n              if (controlProp === key) {\r\n                const Name = this.newPasteControlId(ctrlId, '')\r\n                const controlID:| string| undefined = `ID_${Name}`\r\n                const controlObj = this.copiedControl[this.userFormId][ctrlId]\r\n\r\n                let groupIdIndex = -1\r\n                groupIdIndex = presentGroupId.findIndex(\r\n                  (val) => controlObj.properties.GroupID === val\r\n                )\r\n                const item: controlData = {\r\n                  ...controlObj,\r\n                  properties: {\r\n                    ...controlObj.properties,\r\n                    ID: controlID!,\r\n                    GroupID: groupIdIndex !== -1 ? newGroupId[groupIdIndex] : '',\r\n                    Name: Name\r\n                  }\r\n                }\r\n                this.updateNewControl(this.containerId, controlID, item, true)\r\n                recCopyControl(controlID)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      for (let j of newGroupId) {\r\n        this.createGroup(j)\r\n      }\r\n      const newSelected: string[] = []\r\n      for (const control of selSelected) {\r\n        if (control.startsWith('group')) {\r\n          const index = presentGroupId.findIndex((val) => val === control)\r\n          newSelected.push(newGroupId[index])\r\n        } else {\r\n          const index = oldControlId.findIndex((val) => val === control)\r\n          newSelected.push(newControlId[index])\r\n        }\r\n      }\r\n      this.selectControl({\r\n        userFormId: this.userFormId,\r\n        select: {\r\n          container: this.getContainerList(newSelected[0]),\r\n          selected: newSelected\r\n        }\r\n      })\r\n    } else if (this.copyControlList.type === 'cut') {\r\n      const selContainer = this.copyControlList.parentId\r\n      const selSelected = this.copyControlList.targetId\r\n      const userFormData = this.copiedControl[this.userFormId]\r\n      const recCopyControl = (daTarget: string) => {\r\n        const daTargetControls = userFormData[daTarget].controls\r\n        if (daTargetControls.length > 0) {\r\n          for (let i = 0, limit = daTargetControls.length; i < limit; i++) {\r\n            const key = daTargetControls[i]\r\n            const controlObj = JSON.parse(JSON.stringify(this.copiedControl[this.userFormId][key]))\r\n            const item: controlData = {\r\n              ...controlObj\r\n            }\r\n            this.removeChildControl(daTarget, key)\r\n            this.updateNewControl(daTarget, key, item, false)\r\n            recCopyControl(key)\r\n          }\r\n        }\r\n      }\r\n      for (const key of selSelected) {\r\n        if (!key.startsWith('group')) {\r\n          const controlObj = JSON.parse(\r\n            JSON.stringify(this.copiedControl[this.userFormId][key])\r\n          )\r\n          if (selSelected.length === 1 && userFormData[selSelected[0]].properties.GroupID! !== '') {\r\n            controlObj.properties.GroupID = ''\r\n          }\r\n          const item: controlData = {\r\n            ...controlObj\r\n          }\r\n          this.updateNewControl(this.containerId, key, item, true)\r\n          recCopyControl(key)\r\n        } else {\r\n          for (let ctrlId in userFormData) {\r\n            const controlProp = userFormData[ctrlId].properties.GroupID\r\n            if (controlProp) {\r\n              if (controlProp === key) {\r\n                const controlObj = JSON.parse(\r\n                  JSON.stringify(this.copiedControl[this.userFormId][ctrlId])\r\n                )\r\n                const item: controlData = {\r\n                  ...controlObj\r\n                }\r\n                this.updateNewControl(this.containerId, ctrlId, item, true)\r\n                recCopyControl(ctrlId)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.selectControl({\r\n        userFormId: this.userFormId,\r\n        select: {\r\n          container: this.getContainerList(selSelected[0]),\r\n          selected: selSelected\r\n        }\r\n      })\r\n      this.updateCopyControlList({\r\n        userFormId: this.userFormId,\r\n        parentId: this.containerId,\r\n        targetId: selSelected,\r\n        type: 'copy'\r\n      })\r\n    }\r\n    this.getPasteControlSize()\r\n    const selSelected = this.selectedControls[this.userFormId].selected\r\n    for (const control of selSelected) {\r\n      if (control.startsWith('group')) {\r\n        this.createGroup(control)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description To delete controls in respective container present in respective userform\r\n   * @function clickDelete\r\n   */\r\n  clickDelete () {\r\n    const selControl = []\r\n    const userData = this.userformData[this.userFormId]\r\n    const selected = this.selectedControls[this.userFormId].selected\r\n    const selContainer = this.selectedControls[this.userFormId].container\r\n    const filterControls = []\r\n    const controls = this.userformData[this.userFormId][this.selectedControls[this.userFormId].container[0]].controls\r\n    for (const control of selected) {\r\n      if (!control.startsWith('ID_USERFORM')) {\r\n        if (control.startsWith('group')) {\r\n          for (const key in userData) {\r\n            if (\r\n              userData[key].properties.GroupID === control\r\n            ) {\r\n              selControl.push(key)\r\n            }\r\n          }\r\n        } else {\r\n          selControl.push(control)\r\n        }\r\n      }\r\n    }\r\n    if (selected.length === 1 && !selected[0].startsWith('group') && this.userformData[this.userFormId][selected[0]].properties.GroupID !== '') {\r\n      for (let j = 0; j < controls.length; j++) {\r\n        if (userData[controls[j]].properties.GroupID === userData[selected[0]].properties.GroupID) {\r\n          filterControls.push(controls[j])\r\n        }\r\n      }\r\n      if (filterControls.length === 2) {\r\n        const curSelect = filterControls[0] === selected[0] ? filterControls[1] : filterControls[0]\r\n        const selGroupId = userData[selected[0]].properties.GroupID\r\n        this.updateControlProperty('GroupID', '', curSelect)\r\n      }\r\n    }\r\n    for (let i = 0; i < selControl.length; i++) {\r\n      const controlId = userData[selControl[i]].type === 'Page' ? selContainer[0] : selControl[i]\r\n      this.deleteZIndex(controlId)\r\n      this.deleteTabIndex(controlId)\r\n      this.deleteControl({\r\n        userFormId: this.userFormId,\r\n        parentId: this.getContainerList(controlId)[0],\r\n        targetId: controlId\r\n      })\r\n    }\r\n\r\n    this.selectControl({\r\n      userFormId: this.userFormId,\r\n      select: {\r\n        container: userData[selContainer[0]].type === 'MultiPage' ? this.getContainerList(selContainer[0]) : selContainer,\r\n        selected: userData[selContainer[0]].type === 'MultiPage' ? [this.getContainerList(selContainer[0])[0]] : [selContainer[0]]\r\n      }\r\n    })\r\n    EventBus.$emit('focusUserForm')\r\n  }\r\n  updateAction (event: KeyboardEvent) {\r\n    let controlActionName = ''\r\n    if (event.ctrlKey && event.code === 'KeyA') {\r\n      controlActionName = 'ID_SELECTALL'\r\n    } else if (event.ctrlKey && event.code === 'KeyC') {\r\n      if (\r\n        this.selectedControls[this.userFormId].selected[0] !== this.userFormId\r\n      ) {\r\n        controlActionName = 'ID_COPY'\r\n      }\r\n    } else if (event.keyCode === 46) {\r\n      controlActionName = 'ID_DELETE'\r\n    } else if (event.ctrlKey && event.code === 'KeyV') {\r\n      controlActionName = 'ID_PASTE'\r\n    } else if (event.keyCode && event.code === 'KeyX') {\r\n      controlActionName = 'ID_CUT'\r\n    }\r\n    this.controlAction(event, controlActionName, '')\r\n  }\r\n  updatePropVal (propName: string, propValue: number) {\r\n    const ctrlSel = this.selectedControls[this.userFormId].selected\r\n    const usrFrmData = this.userformData[this.userFormId]\r\n    for (let index = 1; index < ctrlSel.length; index++) {\r\n      if (!ctrlSel[index].startsWith('group')) {\r\n        const curProp = usrFrmData[ctrlSel[index]].properties\r\n        if (propName === 'selRight') {\r\n          const curRight = curProp.Width! + curProp.Left!\r\n          const value = curProp.Left! + (propValue - curRight)\r\n          this.updateControlProperty('Left', value, ctrlSel[index])\r\n        } else if (propName === 'selBottom') {\r\n          const curBottom = curProp.Height! + curProp.Top!\r\n          const value = curProp.Top! + (propValue - curBottom)\r\n          this.updateControlProperty('Top', value, ctrlSel[index])\r\n        }\r\n        if (propName === 'selCenter') {\r\n          const curCenter = curProp.Width! / 2\r\n          const value = propValue - curCenter\r\n          this.updateControlProperty('Left', value, ctrlSel[index])\r\n        }\r\n        if (propName === 'selMiddle') {\r\n          const curMiddle = curProp.Height! / 2\r\n          const value = propValue - curMiddle\r\n          this.updateControlProperty('Top', value, ctrlSel[index])\r\n        } else {\r\n          const propertyname: keyof controlProperties = propName as keyof controlProperties\r\n          this.updateControlProperty(propertyname, propValue, ctrlSel[index])\r\n        }\r\n      } else {\r\n        const groupIndex: number = this.groupStyleArray.findIndex(val => val.groupName === ctrlSel[index])\r\n        const curProp = this.groupStyleArray[groupIndex]\r\n        const left = parseInt(curProp.left!)\r\n        const top = parseInt(curProp.top!)\r\n        const width = parseInt(curProp.width!)\r\n        const height = parseInt(curProp.height!)\r\n        let value = -1\r\n        if (propName === 'selRight') {\r\n          value = left! + (propValue - (width! + left!))\r\n          EventBus.$emit('updasteGroupSize', 'Left', value, groupIndex)\r\n        } else if (propName === 'selBottom') {\r\n          value = top! + (propValue - (height + top))\r\n          EventBus.$emit('updasteGroupSize', 'Top', value, groupIndex)\r\n        }\r\n        if (propName === 'selCenter') {\r\n          value = propValue - (width! / 2)\r\n          EventBus.$emit('updasteGroupSize', 'Left', value, groupIndex)\r\n        }\r\n        if (propName === 'selMiddle') {\r\n          value = propValue - height! / 2\r\n          EventBus.$emit('updasteGroupSize', 'Top', value, groupIndex)\r\n        } else {\r\n          const propertyname: keyof controlProperties = propName as keyof controlProperties\r\n          EventBus.$emit('updasteGroupSize', propertyname, propValue, groupIndex)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  controlAlignMent (subVal: string) {\r\n    const mainSel = this.selectedControls[this.userFormId].selected[0]\r\n    const isGroup = mainSel.startsWith('group')\r\n    const usrFrmData = this.userformData[this.userFormId]\r\n    const ctrlProp = !isGroup && usrFrmData[mainSel].properties\r\n    const groupIndex: number = this.groupStyleArray.findIndex(val => val.groupName === mainSel)\r\n    const newObject = {\r\n      Left: isGroup && groupIndex !== -1 ? parseInt(this.groupStyleArray[groupIndex].left!) : ctrlProp ? ctrlProp.Left! : 0,\r\n      Top: isGroup && groupIndex !== -1 ? parseInt(this.groupStyleArray[groupIndex].top!) : ctrlProp ? ctrlProp.Top! : 0,\r\n      Width: isGroup && groupIndex !== -1 ? parseInt(this.groupStyleArray[groupIndex].width!) : ctrlProp ? ctrlProp.Width! : 0,\r\n      Height: isGroup && groupIndex !== -1 ? parseInt(this.groupStyleArray[groupIndex].height!) : ctrlProp ? ctrlProp.Height! : 0\r\n    }\r\n    if (subVal === 'ID_ALIGNLEFT') {\r\n      this.updatePropVal('Left', newObject.Left!)\r\n    } else if (subVal === 'ID_ALIGNTOP') {\r\n      this.updatePropVal('Top', newObject.Top!)\r\n    } else if (subVal === 'ID_ALIGNRIGHT') {\r\n      const selRight = newObject.Width! + newObject.Left!\r\n      this.updatePropVal('selRight', selRight)\r\n    } else if (subVal === 'ID_ALIGNBOTTOM') {\r\n      const selBottom = newObject.Height! + newObject.Top!\r\n      this.updatePropVal('selBottom', selBottom)\r\n    } else if (subVal === 'ID_ALIGNCENTER') {\r\n      const selCenter = newObject.Left! + newObject.Width! / 2\r\n      this.updatePropVal('selCenter', selCenter)\r\n    } else if (subVal === 'ID_ALIGNMIDDLE') {\r\n      const selMiddle = newObject.Top! + newObject.Height! / 2\r\n      this.updatePropVal('selMiddle', selMiddle)\r\n    } else if (subVal === 'ID_WIDTH') {\r\n      this.updatePropVal('Width', newObject.Width!)\r\n    } else if (subVal === 'ID_HEIGHT') {\r\n      this.updatePropVal('Height', newObject.Height!)\r\n    } else if (subVal === 'ID_BOTH') {\r\n      this.updatePropVal('Height', newObject.Height!)\r\n      this.updatePropVal('Width', newObject.Width!)\r\n    }\r\n  }\r\n\r\n  controlDisable (event: MouseEvent) {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.outercontext-div {\r\n  border: 0.3px solid black;\r\n  box-shadow: 2px 2px lightgray;\r\n  width: 150px;\r\n  height: auto;\r\n  font-size: 13px;\r\n  position: fixed;\r\n  z-index: 1000;\r\n}\r\n.wrapper-context {\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.wrapper1-context {\r\n  display: grid;\r\n  grid-template-columns: 10% 90%;\r\n  border: 0.3px solid white;\r\n  background: white;\r\n  height: 24px;\r\n  padding-top: 5px;\r\n  outline: none;\r\n}\r\n.wrapper1-context:hover {\r\n  background-color: rgb(155, 215, 255);\r\n  border: 0.3px solid rgb(0, 153, 255);\r\n}\r\n.wrapper21 {\r\n  display: grid;\r\n  grid-template-columns: 10% 85% 5%;\r\n}\r\n.triangle-right {\r\n  width: 0;\r\n  height: 0;\r\n  border-top: 5px solid transparent;\r\n  border-left: 5px solid black;\r\n  border-bottom: 5px solid transparent;\r\n  padding-top: 2px;\r\n}\r\n.iset-context {\r\n  text-align: left;\r\n  padding-left: 15px;\r\n  font-size: 12px;\r\n}\r\n.set-context {\r\n  text-align: left;\r\n  padding-left: 15px;\r\n  font-size: 12px;\r\n}\r\nhr {\r\n  margin: 0px;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  margin-block-start: 0em;\r\n  margin-block-end: 0em;\r\n  margin-inline-start: 0px;\r\n  margin-inline-end: 0px;\r\n  padding-inline-start: 0px;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n\r\n/* testing submenu */\r\n\r\n.top-level-menu {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.top-level-menu > li {\r\n  position: absolute;\r\n  float: left;\r\n  height: 30px;\r\n  width: 143px;\r\n}\r\n\r\n.top-level-menu li:hover > ul {\r\n  /* On hover, display the next level's menu */\r\n  display: inline;\r\n}\r\n\r\n/* Menu Link Styles */\r\n\r\n.top-level-menu a /* Apply to all links inside the multi-level menu */ {\r\n  font-size: 12px;\r\n  color: black;\r\n  text-decoration: none;\r\n  padding: 0 0 0 10px;\r\n  padding-left: 15px;\r\n\r\n  /* Make the link cover the entire list item-container */\r\n  display: block;\r\n}\r\n.top-level-menu a:hover {\r\n  color: black;\r\n}\r\n.third-level-menu {\r\n  position: absolute;\r\n  top: 0;\r\n  right: -100px;\r\n  width: 110px;\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  display: none;\r\n  border: 1px solid black;\r\n  background-color: white;\r\n}\r\n\r\n.third-level-menu > li {\r\n  height: 20px;\r\n  padding-top: 5px;\r\n  /* margin: 1px; */\r\n}\r\n.third-level-menu > li:hover {\r\n  background-color: rgb(155, 215, 255);\r\n  border: 0.2px solid rgb(0, 153, 255);\r\n}\r\n.top-level-menu1 {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.top-level-menu1 > li {\r\n  position: absolute;\r\n  float: left;\r\n  height: 30px;\r\n  width: 143px;\r\n}\r\n\r\n.top-level-menu1 li:hover > ul {\r\n  /* On hover, display the next level's menu */\r\n  display: inline;\r\n}\r\n\r\n/* Menu Link Styles */\r\n\r\n.top-level-menu1 a /* Apply to all links inside the multi-level menu */ {\r\n  font-size: 12px;\r\n  color: black;\r\n  text-decoration: none;\r\n  padding: 0 0 0 10px;\r\n  padding-left: 15px;\r\n\r\n  /* Make the link cover the entire list item-container */\r\n  display: block;\r\n}\r\n.top-level-menu1 a:hover {\r\n  color: black;\r\n}\r\n.third {\r\n  padding-left: 5px;\r\n}\r\n.third > a {\r\n  padding-left: 10px;\r\n}\r\n.icons {\r\n  margin-left: 3px;\r\n}\r\n</style>\r\n"]}]}