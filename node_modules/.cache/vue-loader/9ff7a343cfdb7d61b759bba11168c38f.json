{"remainingRequest":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDPropertyList/index.vue?vue&type=style&index=0&id=f44e4b98&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/src/FormDesigner/components/organisms/FDPropertyList/index.vue","mtime":1611296896000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/FormcontrolLatest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouc2lkZWhlYWRlcjEgew0KICAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMjVweDsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0MiwgMTkxLCAyMzEpOw0KICBtYXJnaW4tYm90dG9tOiA4cHg7DQogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOw0KICBvdmVyZmxvdzogaGlkZGVuOw0KICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KfQ0KLnNpZGVoZWFkZXIgew0KICBoZWlnaHQ6IDIycHg7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIHBhZGRpbmc6IDBwYzsNCiAgYmFja2dyb3VuZC1jb2xvcjogIzk5YjRkMTsNCn0NCi5mb3JtLWNvbnRyb2wgew0KICBmbG9hdDogbGVmdDsNCiAgd2lkdGg6IDEwMCU7DQogIGN1cnNvcjogcG9pbnRlcjsNCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQojbWRpdiB7DQogIGZsb2F0OiByaWdodDsNCiAgbWFyZ2luOiBpbml0aWFsOw0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIHRvcDogMHB4Ow0KICB3aWR0aDogMjBweDsNCiAgaGVpZ2h0OiAxNnB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7DQogIGJvcmRlcjogb3V0c2V0Ow0KfQ0KDQoubWRpdiB7DQogIGhlaWdodDogMTdweDsNCiAgd2lkdGg6IDJweDsNCiAgbWFyZ2luLWxlZnQ6IDYwcHg7DQogIGJhY2tncm91bmQtY29sb3I6IGJsYWNrOw0KICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7DQogIHotaW5kZXg6IDE7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgcmlnaHQ6IDhweDsNCn0NCg0KLm1kIHsNCiAgaGVpZ2h0OiAxN3B4Ow0KICB3aWR0aDogMnB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsNCiAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOw0KICB6LWluZGV4OiAyOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHJpZ2h0OiAwcHg7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDPropertyList","sourcesContent":["<template>\r\n  <div v-if=\"isTableVisible===false\">\r\n    <div>\r\n      <div class=\"sideheader\">\r\n        <span class=\"sideheader1\">\r\n          <span>Properties - {{displayName ? userformData[userFormId][getSelectedControlsDatas[0]].properties.Name : userformData[userFormId][userFormId].properties.Name }}</span>\r\n          <div id=\"mdiv\" v-on:click=\"hideShowTable\">\r\n            <div class=\"mdiv\">\r\n              <div class=\"md\"></div>\r\n            </div>\r\n          </div>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n       <select\r\n        class=\"form-control\"\r\n        name=\"selectedUserForm\"\r\n        id=\"selectedUserForm\"\r\n        ref=\"selectedUserForm\"\r\n        v-if=\"userFormId\"\r\n        v-model=\"selected\"\r\n        @change=\"updateSelected($event)\"\r\n      >\r\n        <option\r\n          :value=\"userFormId\"\r\n        >{{displayName ? containerData.properties.Name + ' '+ containerData.type : ''}}</option>\r\n        <template v-if=\"displayName\">\r\n         <option  v-for=\"control in containerDataControl\" :value=\"control\" :key=\"userData[control].properties.Name\">\r\n          <b>{{displayName ?  userData[control].properties.Name + ' ' + userData[control].type : ''}}</b>\r\n        </option>\r\n        </template>\r\n      </select>\r\n\r\n    </div>\r\n    <FDTable v-if=\"selectedSelect.length > 0\" :tableData=\"propertyTableData\"\r\n      :userFormId=\"userFormId\"\r\n      :getSelectedControlsDatas=\"getSelectedControlsDatas\" />\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Ref, Vue, Watch } from 'vue-property-decorator'\r\nimport { Action, State } from 'vuex-class'\r\nimport FDTable from '@/FormDesigner/components/organisms/FDTable/index.vue'\r\nimport { PropertyListDefine } from '@/FormDesigner/models/ControlsTableProperties/propertyList'\r\nimport { IselectControl } from '@/storeModules/fd/actions'\r\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\r\nimport { EventBus } from '@/FormDesigner/event-bus'\r\n\r\n@Component({\r\n  name: 'PropertiesList',\r\n  components: {\r\n    FDTable\r\n  }\r\n})\r\nexport default class PropertiesList extends FDCommonMethod {\r\n  @State(state => state.fd.userformData) userformData!: userformData\r\n  @State((state) => state.fd.selectedControls) selectedControls!: fdState['selectedControls'];\r\n  @Prop({ required: true, type: String }) public readonly userFormId! : string\r\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void;\r\n\r\n  propList = new PropertyListDefine();\r\n  selected: string | number | font | null | undefined = null\r\n\r\n  isTableVisible = false;\r\n  hideShowTable () {\r\n    this.isTableVisible = true\r\n  }\r\n\r\n  selectedOption: Object= {}\r\n\r\n  selectOption () {\r\n    if (this.displayName) {\r\n      this.selected = this.selectedSelect[0]\r\n    }\r\n  }\r\n  get getSelectedControlsDatas () {\r\n    if (this.selectedSelect.length > 0 && this.selectedContainer.length > 0) {\r\n      if (this.selectedControls[this.userFormId].selected.length === 1 && !this.selectedControls[this.userFormId].selected[0].startsWith('group')) {\r\n        return this.selectedControls[this.userFormId].selected\r\n      } else {\r\n        const filteredSelectedControls = []\r\n        const controls = this.userformData[this.userFormId][this.selectedControls[this.userFormId].container[0]].controls\r\n        const selControls = this.selectedControls[this.userFormId].selected\r\n        for (let i = 0; i < selControls.length; i++) {\r\n          if (selControls[i].startsWith('group')) {\r\n            for (let j = 0; j < controls.length; j++) {\r\n              if (this.userformData[this.userFormId][controls[j]].properties.GroupID === selControls[i]) {\r\n                filteredSelectedControls.push(controls[j])\r\n              }\r\n            }\r\n          } else {\r\n            filteredSelectedControls.push(selControls[i])\r\n          }\r\n        }\r\n        return filteredSelectedControls\r\n      }\r\n    }\r\n  }\r\n\r\n  get propertyTableData () {\r\n    let result : tableDatas = {}\r\n    if (this.selectedSelect.length > 0 && this.selectedContainer.length > 0) {\r\n      if (this.getSelectedControlsDatas!.length === 1) {\r\n        const controlData: controlData = this.userformData[this.userFormId][this.getSelectedControlsDatas![0]]\r\n        result = this.updateResult(controlData.properties)\r\n      } else if (this.getSelectedControlsDatas!.length > 1) {\r\n        let ctrlKeys = []\r\n        const uniqueKey = ['Name', 'TabIndex', 'Index', 'MouseIcon', 'Picture', 'Cancel', 'Default', 'Value', 'Style']\r\n        const combinedObj: ICommonProp = {}\r\n        const commonPropValue: ICommonPropVal = {}\r\n\r\n        // get array of Object which property Object of selected Controls\r\n        for (const controlIndex in this.getSelectedControlsDatas!) {\r\n          const controlData = this.userformData[this.userFormId][this.getSelectedControlsDatas![controlIndex]]\r\n          const defineList = this.propList.data[controlData.type]\r\n          ctrlKeys.push(Object.keys(defineList))\r\n        }\r\n        // get the array which include common key of selected controls\r\n        let commonProp = ctrlKeys.reduce((a, b) => a.filter((c: string) => b.includes(c)))\r\n\r\n        // excluding the Unique key\r\n        commonProp = commonProp.filter((x: string) => !uniqueKey.includes(x))\r\n\r\n        // Generating the Object of common key : value pair and Intializing value as null\r\n        for (const propName in commonProp) {\r\n          Vue.set(combinedObj, commonProp[propName], '')\r\n        }\r\n\r\n        // get the Object which include common key:[value] pair of selected control\r\n        for (const key of this.getSelectedControlsDatas!) {\r\n          const contolProp: controlProperties = this.userformData[this.userFormId][key].properties\r\n          for (const propName in contolProp) {\r\n            if (commonProp.indexOf(propName) > -1) {\r\n              combinedObj[propName] = [...combinedObj[propName], contolProp[propName as keyof controlProperties]]\r\n            }\r\n          }\r\n        }\r\n        const allEqual = (arr: string[]): boolean => { return arr.every((v: string) => v === arr[0]) }\r\n\r\n        // get the common value\r\n        for (const propName in combinedObj) {\r\n          const isSame: boolean = allEqual(combinedObj[propName])\r\n          commonPropValue[propName] = isSame ? combinedObj[propName][0] : ''\r\n        }\r\n\r\n        const controlData: controlData = this.userformData[this.userFormId][this.getSelectedControlsDatas![0]]\r\n        const defineList = this.propList.data[controlData.type]\r\n        result = this.updateResult(commonPropValue)\r\n      }\r\n      return result\r\n    }\r\n  }\r\n  updateResult (commonPropValue: ICommonPropVal|controlProperties) {\r\n    const result : tableDatas = {}\r\n    const controlData: controlData = this.userformData[this.userFormId][this.getSelectedControlsDatas![0]]\r\n    const defineList = this.propList.data[controlData.type]\r\n    for (const propName in defineList) {\r\n      const propValue = commonPropValue[propName as keyof controlProperties]\r\n      if (propValue !== undefined) {\r\n        result[propName] = {\r\n          ...defineList[propName],\r\n          value: propValue\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }\r\n  updateSelected (e: MouseEvent) {\r\n    if (e.target instanceof HTMLSelectElement) {\r\n      if (e.target.options.selectedIndex > -1) {\r\n        const controlName = e.target.options[e.target.options.selectedIndex].text.split(' ')[0]\r\n        const controlsArray = this.userformData[this.userFormId][this.selectedContainer[0]].controls\r\n        const value = Object.keys(this.userformData[this.userFormId]).filter(val => {\r\n          return this.userformData[this.userFormId][val].properties.Name === controlName\r\n        })\r\n        this.selectControl({\r\n          userFormId: this.userFormId,\r\n          select: {\r\n            container: this.getContainerList(value[0]),\r\n            selected: [value[0]]\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  get selectedSelect () {\r\n    return this.selectedControls[this.userFormId].selected\r\n  }\r\n  get selectedContainer () {\r\n    return this.selectedControls[this.userFormId].container\r\n  }\r\n  get containerData () {\r\n    const type = this.userData[this.selectedContainer[0]].type\r\n    return type === 'Page' ? this.userData[this.selectedContainer[1]] : this.userData[this.selectedContainer[0]]\r\n  }\r\n  get containerDataControl () {\r\n    const type = this.userData[this.selectedContainer[0]].type\r\n    return type === 'Page' ? this.getChildControl(this.selectedContainer[1]) : this.userData[this.selectedContainer[0]].controls\r\n  }\r\n  get userData () {\r\n    return this.userformData[this.userFormId]\r\n  }\r\n  get displayName () {\r\n    return this.selectedSelect.length === 1 && !this.selectedSelect[0].startsWith('group')\r\n  }\r\n  @Watch('selectedControls', { deep: true })\r\n  updateOption () {\r\n    this.selectOption()\r\n  }\r\n  created () {\r\n    EventBus.$on('dispProp', (val: boolean) => {\r\n      this.isTableVisible = val\r\n    })\r\n  }\r\n  destroyed () {\r\n    EventBus.$off('dispProp')\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.sideheader1 {\r\n   display: grid;\r\n  grid-template-columns: 1fr 25px;\r\n  background-color: rgb(142, 191, 231);\r\n  margin-bottom: 8px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n}\r\n.sideheader {\r\n  height: 22px;\r\n  text-align: left;\r\n  padding: 0pc;\r\n  background-color: #99b4d1;\r\n}\r\n.form-control {\r\n  float: left;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  background-color: white;\r\n}\r\n#mdiv {\r\n  float: right;\r\n  margin: initial;\r\n  position: relative;\r\n  top: 0px;\r\n  width: 20px;\r\n  height: 16px;\r\n  background-color: lightgray;\r\n  border: outset;\r\n}\r\n\r\n.mdiv {\r\n  height: 17px;\r\n  width: 2px;\r\n  margin-left: 60px;\r\n  background-color: black;\r\n  transform: rotate(45deg);\r\n  z-index: 1;\r\n  position: absolute;\r\n  right: 8px;\r\n}\r\n\r\n.md {\r\n  height: 17px;\r\n  width: 2px;\r\n  background-color: black;\r\n  transform: rotate(90deg);\r\n  z-index: 2;\r\n  position: absolute;\r\n  right: 0px;\r\n}\r\n</style>\r\n"]}]}